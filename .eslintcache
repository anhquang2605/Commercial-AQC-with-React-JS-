[{"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\index.js":"1","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\reportWebVitals.js":"2","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\App\\index.js":"3","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\Routes.js":"4","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchBar\\index.js":"5","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Navigator\\index.js":"6","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\NavBar\\index.js":"7","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\index.js":"8","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\index.js":"9","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\index.js":"10","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Logo\\index.js":"11","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\KartDetail\\index.js":"12","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\index.js":"13","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ShoppingCart\\index.js":"14","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\index.js":"15","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\NavigationItems.js":"16","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\OrderTypesRadio\\OrderTypeRadio.js":"17","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\Orders.js":"18","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ImageView\\index.js":"19","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\PriceTotal\\index.js":"20","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\ResultDisplay\\index.js":"21","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\Sorter\\index.js":"22","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ItemsSummary\\index.js":"23","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\SearchForm\\index.js":"24","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ItemDetail\\index.js":"25","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\index.js":"26","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\Payment\\index.js":"27","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\FeaturedItems\\index.js":"28","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ShippingInfo\\index.js":"29","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CardModal\\index.js":"30","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\BannerList.js":"31","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\GiftCards.js":"32","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\index.js":"33","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerBox\\index.js":"34","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Pagination\\index.js":"35","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Controller\\index.js":"36","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Modal\\index.js":"37","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderWidget\\index.js":"38","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Collaspable\\index.js":"39","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerItem\\index.js":"40","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationView\\index.js":"41","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationController\\index.js":"42","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\HozBox\\index.js":"43","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ThankYou\\index.js":"44","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\firebase.js":"45","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\index.js":"46","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\context.js":"47","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Shortcut\\index.js":"48","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\GCards\\index.js":"49","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Cards\\index.js":"50","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\index.js":"51","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Orders\\index.js":"52","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\index.js":"53","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\LinkCard\\index.js":"54","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\CollapseTab\\index.js":"55"},{"size":582,"mtime":1613775252117,"results":"56","hashOfConfig":"57"},{"size":362,"mtime":499162500000,"results":"58","hashOfConfig":"57"},{"size":12361,"mtime":1618633716309,"results":"59","hashOfConfig":"57"},{"size":348,"mtime":1613178422575,"results":"60","hashOfConfig":"57"},{"size":4733,"mtime":1611352936106,"results":"61","hashOfConfig":"57"},{"size":973,"mtime":1611180209883,"results":"62","hashOfConfig":"57"},{"size":743,"mtime":1610666505233,"results":"63","hashOfConfig":"57"},{"size":1772,"mtime":1617233708549,"results":"64","hashOfConfig":"57"},{"size":3571,"mtime":1611359926206,"results":"65","hashOfConfig":"57"},{"size":562,"mtime":1611196139710,"results":"66","hashOfConfig":"57"},{"size":499,"mtime":1611180209881,"results":"67","hashOfConfig":"57"},{"size":2699,"mtime":1611278845892,"results":"68","hashOfConfig":"57"},{"size":4405,"mtime":1618633886913,"results":"69","hashOfConfig":"57"},{"size":4149,"mtime":1611288862263,"results":"70","hashOfConfig":"57"},{"size":2520,"mtime":1617331335600,"results":"71","hashOfConfig":"57"},{"size":278,"mtime":1613782375023,"results":"72","hashOfConfig":"57"},{"size":1051,"mtime":1610758266626,"results":"73","hashOfConfig":"57"},{"size":12864,"mtime":1611180209911,"results":"74","hashOfConfig":"57"},{"size":414,"mtime":1610158351321,"results":"75","hashOfConfig":"57"},{"size":2545,"mtime":1613269417761,"results":"76","hashOfConfig":"57"},{"size":3077,"mtime":1617238477531,"results":"77","hashOfConfig":"57"},{"size":230,"mtime":1609546100947,"results":"78","hashOfConfig":"57"},{"size":1508,"mtime":1611279139568,"results":"79","hashOfConfig":"57"},{"size":4075,"mtime":1617238744898,"results":"80","hashOfConfig":"57"},{"size":913,"mtime":1610755321375,"results":"81","hashOfConfig":"57"},{"size":10428,"mtime":1609979699007,"results":"82","hashOfConfig":"57"},{"size":14097,"mtime":1618634252155,"results":"83","hashOfConfig":"57"},{"size":1022,"mtime":1611270304607,"results":"84","hashOfConfig":"57"},{"size":9091,"mtime":1617240850994,"results":"85","hashOfConfig":"57"},{"size":487,"mtime":1613168144605,"results":"86","hashOfConfig":"57"},{"size":930,"mtime":1609550482256,"results":"87","hashOfConfig":"57"},{"size":420,"mtime":1618632002881,"results":"88","hashOfConfig":"57"},{"size":2989,"mtime":1617239041865,"results":"89","hashOfConfig":"57"},{"size":1196,"mtime":1609550531186,"results":"90","hashOfConfig":"57"},{"size":973,"mtime":1609459932185,"results":"91","hashOfConfig":"57"},{"size":395,"mtime":1609282399476,"results":"92","hashOfConfig":"57"},{"size":1517,"mtime":1614469553413,"results":"93","hashOfConfig":"57"},{"size":1548,"mtime":1611269600547,"results":"94","hashOfConfig":"57"},{"size":1800,"mtime":1613170205999,"results":"95","hashOfConfig":"57"},{"size":1215,"mtime":1609550537263,"results":"96","hashOfConfig":"57"},{"size":678,"mtime":1617229149815,"results":"97","hashOfConfig":"57"},{"size":2132,"mtime":1617238915994,"results":"98","hashOfConfig":"57"},{"size":921,"mtime":1613177174547,"results":"99","hashOfConfig":"57"},{"size":1602,"mtime":1617331499441,"results":"100","hashOfConfig":"57"},{"size":511,"mtime":1613773946849,"results":"101","hashOfConfig":"57"},{"size":129,"mtime":1613774255334,"results":"102","hashOfConfig":"57"},{"size":111,"mtime":1613774165148,"results":"103","hashOfConfig":"57"},{"size":1669,"mtime":1617239773719,"results":"104","hashOfConfig":"57"},{"size":13338,"mtime":1617239576826,"results":"105","hashOfConfig":"57"},{"size":13312,"mtime":1617239431697,"results":"106","hashOfConfig":"57"},{"size":2632,"mtime":1614477231325,"results":"107","hashOfConfig":"57"},{"size":1888,"mtime":1618619196884,"results":"108","hashOfConfig":"57"},{"size":467,"mtime":1617239722038,"results":"109","hashOfConfig":"57"},{"size":292,"mtime":1613786127304,"results":"110","hashOfConfig":"57"},{"size":1186,"mtime":1617239686226,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"178c7ws",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"114"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"114"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"114"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"114"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"114"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"114"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"114"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"114"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"114"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"114"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"114"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"114"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"114"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"114"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"114"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\index.js",[],["244","245"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\reportWebVitals.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\App\\index.js",["246","247","248","249","250","251"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\Routes.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchBar\\index.js",["252","253","254","255"],"import React from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport * as ROUTES from '../../Constants/Routes';\r\nimport './search-bar.scss';\r\nimport ORDERS from '../../model/Orders';\r\nimport {BsSearch} from 'react-icons/bs';\r\nimport { BiBody } from 'react-icons/bi';\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.refSearch = React.createRef();\r\n        this.state = {\r\n            searchQueue: '',\r\n            valid: false,\r\n            hintList: [],\r\n            fullList: [],\r\n            focused: false,\r\n            mouseOvered: false,\r\n        }\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.emptyField = this.emptyField.bind(this);\r\n        this.handleOnFocus = this.handleOnFocus.bind(this);\r\n        this.handleOnFocusOut = this.handleOnFocusOut.bind(this);\r\n        this.handleSearchClick = this.handleSearchClick.bind(this);\r\n        this.handleMouseOver = this.handleMouseOver.bind(this);\r\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    }\r\n    fetchItems = () => {//get list of items here\r\n        /* fetch(\"ORDERS.json\").then( res => res.text() ).then((res)=>{\r\n            var res = JSON.parse(res);\r\n            let newList = res.map((item) => {//only take their names\r\n                return item.name.toLowerCase();\r\n            })\r\n            this.setState({\r\n                fullList: newList\r\n            })\r\n        }); */ // somehow json error input keeps on popping up, might check to solve this later\r\n        \r\n        //Using direct ORDERS FROM models\r\n        let newList = ORDERS.map((item) => {//only take their names\r\n            return item.name.toLowerCase();\r\n        })\r\n        this.setState({\r\n            fullList: newList\r\n        })\r\n    }\r\n    handleOnChange(event){\r\n        this.setState(()=>({\r\n            searchQueue: event.target.value\r\n        }))\r\n        this.hintSearchName(event.target.value);\r\n    }\r\n    handleOnFocus(){\r\n        this.setState(()=>({\r\n            focused: true\r\n        }))\r\n    }\r\n    handleOnFocusOut(){\r\n        if(!this.state.mouseOvered){\r\n            this.setState(()=>({\r\n                focused: false \r\n              }))\r\n        }  \r\n    }\r\n    handleSearchClick(item){\r\n        \r\n        var promises = new Promise((resolve) => {\r\n            this.setState({\r\n            searchQueue: item})\r\n            resolve();//gotta put this here for resolve result else put refuse if no working, can obmit the refuse\r\n        }\r\n        );\r\n        promises.then(()=>{ //to make sure that the state is updated before trigger click\r\n            this.refSearch.current.click();\r\n        })\r\n    }\r\n    handleMouseOver(){\r\n        this.setState({\r\n            mouseOvered: true,\r\n        })\r\n    }\r\n    handleMouseLeave(){\r\n        this.setState({\r\n            mouseOvered: false,\r\n        })\r\n    }\r\n    hintSearchName(key){\r\n        let hints = [];\r\n        this.state.hintList = [];\r\n        this.state.fullList.forEach((iName)=>{\r\n            if(iName.search(key) >= 0){\r\n                hints.push(iName);\r\n            }\r\n        })\r\n        this.state.hintList = [...new Set(hints)];//ultilzing Set that consist of unique items, then tranform the set back to js array\r\n    }\r\n    emptyField = () => {\r\n        let search_bar_ele = document.getElementById(\"search_bar\");\r\n        let inputSearchField = search_bar_ele.children[0];\r\n        this.setState(()=>({\r\n            searchQueue: inputSearchField.value\r\n        }));\r\n        inputSearchField.value = \"\";\r\n    }\r\n    componentDidMount = () => {\r\n        if(this.state.fullList.length === 0 ){\r\n            this.fetchItems();\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <div onBlur={this.handleOnFocusOut} id=\"search_bar\">\r\n                <input type=\"text\" value={this.state.searchQueue} onFocus={this.handleOnFocus} onChange={this.handleOnChange}></input>\r\n                <Link ref={ this.refSearch} alt=\"Search\" to={ROUTES.SEARCH_RESULT + \"/\" + this.state.searchQueue} onClick={this.emptyField}><BsSearch></BsSearch></Link>\r\n                {this.state.hintList.length > 0 && this.state.focused && <div onMouseEnter={this.handleMouseOver} onMouseLeave={this.handleMouseLeave} className=\"hints\" >\r\n                    { this.state.hintList.map(item => {\r\n                        return(\r\n                            <span key={item} onClick={(e)=>{\r\n                                e.stopPropagation();\r\n                                this.handleSearchClick(item)}} className=\"hint-item\">{item}</span>\r\n                        )\r\n                    })}\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Navigator\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\NavBar\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\index.js",["256","257"],"import {React, useEffect, useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport ImageView from './ImageView';\r\nimport ItemDetail from './ItemDetail';\r\nimport OrderTypeRadio from './OrderTypesRadio/OrderTypeRadio';\r\nimport ORDERS from '../../model/Orders';\r\nimport './order-detail.scss';\r\nconst OrderDetail = (props) => {\r\n    const history = useHistory();\r\n    let idFromParams = props.match.params.id - 1;\r\n    let theOrder = ORDERS[idFromParams];\r\n    let getImgSrcFromType = (type) =>{\r\n        return order.id + \"-\" + type + \".jpg\";\r\n    }\r\n    const [order, setOrder] = useState(theOrder);\r\n    const [curType, setCurType] = useState(order.types[0]);\r\n    const [curImg, setCurImg] = useState(getImgSrcFromType(order.types[0]));\r\n    let [quantityInput,setQuantityInput] = useState(1);\r\n    //handler to send to order type radio so that it can update the current type for order detail component\r\n    let upDateCurType = (daType) =>{\r\n        setCurType(daType);\r\n    }\r\n    //update Quanity Input to add to cart\r\n    let handleQuantityInput = (e) =>{\r\n        setQuantityInput(parseInt(e.target.value));\r\n    }\r\n    //reset quantity when switch between types\r\n    let resetQInput = () => {\r\n        setQuantityInput(1);\r\n    }\r\n    //Add Item to cart then trigger route change to check out\r\n    let handleBuyNow = (obj) => {\r\n       var promise = new Promise(resolve => {\r\n        props.addItem(obj);\r\n        resolve();\r\n       }) \r\n        promise.then(()=>{\r\n            history.push(\"/checkout\");\r\n        })\r\n    }\r\n    //watch for curtype change then update img src \r\n    useEffect(()=>{\r\n        setCurImg(getImgSrcFromType(curType));\r\n    }, [curType]);\r\n    \r\n    if (order == null){\r\n        return \"Loading....\";\r\n    }\r\n    return (\r\n        <div id=\"order_detail\">\r\n            <ImageView key={curImg} imgSrc={curImg} imgName={curType + \" \" + order.name.toLowerCase()} ></ImageView>\r\n            <div className=\"detail-container\">\r\n                <ItemDetail daOrder={order}></ItemDetail>\r\n                <OrderTypeRadio resetQInput={resetQInput} upDateCurType={upDateCurType} types={order.types}></OrderTypeRadio>\r\n                <span className=\"quantity-selector-group\">\r\n                    <label htmlFor=\"quantity\">Quantity</label>\r\n                    <input type=\"number\" value={quantityInput} min={1} max={order.quantity} onChange={handleQuantityInput}></input>\r\n                </span>\r\n                <div className=\"payment-proceed-btn-group\">\r\n                    <button onClick={()=>{\r\n                        props.addItem({\r\n                            name: order.name,\r\n                            quantity: parseInt(quantityInput),\r\n                            id: order.id,\r\n                            price: order.price,\r\n                            type: curType,\r\n                        })\r\n                        props.reRendering();\r\n                    }} disabled={order.quantity <= 0}>Add to Cart</button>\r\n                    <button onClick={()=> {\r\n                        handleBuyNow({\r\n                            name: order.name,\r\n                            quantity: parseInt(quantityInput),\r\n                            id: order.id,\r\n                            price: order.price,\r\n                            type: curType,\r\n                        })}\r\n                        } disabled={order.quantity <= 0}>\r\n                        Buy Now\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderDetail;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Logo\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\KartDetail\\index.js",["258","259"],"import {React, useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport ORDERS from '../../model/Orders';\r\nimport './kart-detail.scss';\r\nconst KartDetail = (props) => {\r\n    const [list,setList] = useState(props.list);\r\n    const [,setState] = useState();\r\n    let handleQuantityChange = (e, index) => {\r\n        let val = parseInt(e.target.value);\r\n        props.changeQuantity(index, val);\r\n        props.rerenderer();\r\n    } \r\n    useEffect(() => {\r\n        setList(props.list);\r\n    }, [props.list]);\r\n    useEffect(()=>{\r\n    \r\n    }, [list])\r\n    return (\r\n        <div id=\"kart_detail\">\r\n            <h4>Kart Detail</h4>\r\n            {list.length > 0 ? (\r\n                <table width=\"60%\">\r\n                    <colgroup>\r\n                        <col span=\"1\"></col>\r\n                        <col span=\"1\"></col>\r\n                        <col span=\"1\"></col>\r\n                        <col span=\"1\"></col>\r\n                        <col span=\"1\"></col>\r\n                        <col span=\"1\"></col>\r\n                        <col span=\"1\"></col>\r\n                    </colgroup>\r\n                    <tr>\r\n                        <th width=\"5%\">No</th>\r\n                        <th width=\"10%\"></th>\r\n                        <th width=\"35%\">Name</th>\r\n                        <th width=\"5%\">Quantity</th>\r\n                        <th width=\"15%\">Price Ea</th>\r\n                        <th width=\"15%\">Total</th>\r\n                        <th></th>\r\n                    </tr>\r\n                    {list.map((item,index)=>{\r\n                        return(\r\n                        <tr key={index}>\r\n                            <td>{index + 1}</td>\r\n                            <td><img src={require(\"./../../images/\" + item.id + \"-\" +item.type+ \".jpg\")}></img></td>\r\n                            <td>{item.type + \" \" + item.name}</td>\r\n                            <td><input max={ORDERS[item.id-1].quantity}  type=\"number\" value={item.quantity} onChange={ (e) => {handleQuantityChange(e,index)}}\r\n                            ></input></td>\r\n                            <td>$ {item.price}</td>\r\n                            <td>$ {item.price * item.quantity}</td>\r\n                            <td><button className=\"remove-item-btn\" onClick={()=>{\r\n                                props.removeItem(index);\r\n                            }}>Delete</button></td>\r\n                        </tr>)\r\n                    })}\r\n                </table>\r\n            ) : <span className=\"empty-kart-detail\">No item</span>}\r\n            {list.length > 0 && <Link className=\"check-out-btn btn\" to=\"/checkout\">Check out</Link>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KartDetail;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\index.js",["260","261","262","263","264","265","266"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ShoppingCart\\index.js",["267"],"import {React, useState, useEffect} from 'react';\r\nimport {BiX} from 'react-icons/bi';\r\nimport {BsFillBagFill} from 'react-icons/bs';\r\nimport {Link} from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport './shopping-cart.scss';\r\nconst ShoppingCart = (props) => {\r\n    const [list,setList] = useState(props.cartList);\r\n    let [,setState] = useState();\r\n    let JQueryCode = () => {\r\n        let $closeBtn = $('.close-btn');\r\n        let $shoppingCartMini = $('#shopping_cart_mini');\r\n        let $shoppingCartContainer = $('#shopping_cart_container');\r\n        let $shoppingCartContainerWidth = $shoppingCartContainer.outerWidth(true);\r\n        let $shoppingCartContainerOffSet = $shoppingCartContainer.offset().left;\r\n        let $window = $(window);\r\n        $closeBtn.on(\"click\", (e) => {\r\n            e.stopPropagation();\r\n            $shoppingCartContainer.animate({left: $shoppingCartContainerOffSet += (($shoppingCartContainerWidth*105)/100)}\r\n            ,500\r\n            ,\"swing\"\r\n            ,()=>{\r\n                $shoppingCartMini.show();\r\n                $shoppingCartContainer.removeAttr(\"style\");\r\n            });\r\n        });\r\n        $shoppingCartMini.on(\"click\", (e) => {\r\n            e.stopPropagation();\r\n            $shoppingCartContainer.animate({left: $shoppingCartContainerOffSet -= (($shoppingCartContainerWidth*105)/100)},500);\r\n            $shoppingCartMini.hide();\r\n        });\r\n        $window.on(\"resize\",function(){\r\n            $shoppingCartContainerWidth = $shoppingCartContainer.outerWidth(true);\r\n            $shoppingCartContainerOffSet = $shoppingCartContainer.position().left;\r\n            if(!$shoppingCartMini.is(\":visible\")){\r\n                $shoppingCartContainer.removeAttr(\"style\");\r\n                $shoppingCartContainer.css({\r\n                    \"right\": \"0\" \r\n                 });\r\n            };\r\n        })\r\n    }\r\n    let getTotalQuantity = () => {\r\n        var quantity = 0;\r\n        list.forEach((item) => {\r\n            quantity += parseInt(item.quantity);\r\n        })\r\n        return quantity\r\n    }\r\n    useEffect(()=>{\r\n        JQueryCode();\r\n    },[])\r\n    useEffect(()=>{\r\n        setList(props.cartList);\r\n    },[props.cartList]);\r\n    return (\r\n        <div id=\"shopping_cart_container\">\r\n             <div id=\"shopping_cart_mini\">\r\n                <BsFillBagFill></BsFillBagFill>\r\n                <span className=\"item-no-mini-cart\">{getTotalQuantity()}</span>        \r\n             </div>\r\n             <div className=\"close-btn\">\r\n                <BiX></BiX>\r\n            </div>\r\n            <div id=\"shopping_cart\">\r\n                { list.length > 0? (\r\n                <table key={props.cartList}>\r\n                    <colgroup>\r\n                        <col span={1}></col>\r\n                        <col span={1} style={{width: \"50%\"}}></col>\r\n                        <col span={1}></col>\r\n                        <col span={1}></col>\r\n                    </colgroup>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th >Name</th>\r\n                            <th>No</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {list.map((item,index) => {\r\n                        return(\r\n                        <tr key={index}>\r\n                            <td>{index + 1}</td>\r\n                            <td>{item.type + \" \" + item.name}</td>\r\n                            <td>{item.quantity}</td>\r\n                            <td><button alt=\"remove item\" onClick={()=>{\r\n                                props.removeItem(index)                               \r\n                            }}><BiX></BiX></button></td>\r\n                        </tr>\r\n                        )\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n                ) : \"No item\" }\r\n            </div>\r\n            {(list.length>0) && <Link className=\"cart-check-out-btn btn\" to=\"/checkout\" onClick={()=>{}}>Check out</Link>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShoppingCart;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\NavigationItems.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\OrderTypesRadio\\OrderTypeRadio.js",["268"],"import {React, useEffect, useState} from 'react';\r\nimport \"./order-type-radio.scss\";\r\nconst OrderTypeRadio = (props) => {\r\n    const [curType, setCurType] = useState('');\r\n    const [types, setTypes] = useState([]);\r\n    useEffect(()=>{\r\n        setTypes(props.types);\r\n        setCurType(props.types[0]);\r\n    },[]);\r\n    \r\n    return (\r\n        <form id=\"type_form\">\r\n            <span className=\"select-type\">Select types:</span>\r\n            { types.map((daType) => {\r\n                return(\r\n                <div className=\"radio-input-container\"  key={daType}>\r\n                    <span className=\"radio-color-type-display\" style={{backgroundColor: daType}}></span>\r\n                    <input onClick={()=>{\r\n                        props.upDateCurType(daType);\r\n                        props.resetQInput();\r\n                    }} type=\"radio\" id={daType} name=\"type\" value={daType} defaultChecked={daType === curType}/>\r\n                </div>\r\n            )\r\n            }) }\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default OrderTypeRadio;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\Orders.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ImageView\\index.js",["269","270","271","272"],"import {React, useState, useEffect} from 'react';\r\nimport './image-view.scss';\r\nconst ImageView = (props) => {\r\n    const [imgSrc, setImgSrc] = useState(props.imgSrc);\r\n    const [imgName, setImgName] = useState(props.imgName);\r\n    return (\r\n        <div id=\"image_view\">\r\n            <img att={imgName} src={require('./../../../images/' + imgSrc)}></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageView;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\PriceTotal\\index.js",["273","274","275"],"import React, {useState, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './price-total.scss';\r\nconst PriceTotal = (props) => {\r\n    let getSum = () => {\r\n        let initial = 0;\r\n        var sum = list.reduce((prev,current) => {\r\n            return prev + (current.price * current.quantity);\r\n        }, initial);\r\n        return sum;\r\n    }\r\n    const [list,setList] = useState(props.list);\r\n    const [sum, setSum] = useState(getSum());\r\n    const [tax, setTax] = useState(15);\r\n    const [debit, setDebit] = useState(props.debit);\r\n    const [dis, setDis] =  useState(props.dis);\r\n    let getSubTotal = () => {\r\n        var dasum = (sum + ((tax * sum)/100)) - debit - ((dis*sum)/100);\r\n        if (dasum < 0) {\r\n            props.setTotalForCheckOut(0)\r\n            return 0;\r\n        } else {\r\n            props.setTotalForCheckOut(dasum);\r\n            return dasum\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        setList(props.list);\r\n        setSum(getSum());\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        setList(props.list);\r\n        setSum(getSum());\r\n        \r\n    },[props.list])\r\n\r\n    useEffect(()=>{\r\n        setDis(parseInt(props.dis));\r\n        setDebit(parseInt(props.debit));\r\n    },[props.dis,props.debit])\r\n    return (\r\n        <div className=\"total-price\" key={props}>\r\n            <h4>Order Summary</h4>\r\n            <span className=\"price-row\">\r\n                <span className=\"item-label\">Before Tax:</span>\r\n                <span className=\"item-value\">$ {sum}</span>    \r\n            </span>\r\n            <span className=\"price-row\">\r\n                <span className=\"item-label\">Tax ({tax}%):</span>\r\n                <span className=\"item-value\">$ {(tax * sum)/100}</span>    \r\n            </span>\r\n            <span className=\"price-row\">\r\n                <span className=\"item-label\">Discount (ammount): </span>\r\n                <span className=\"item-value\">$ {debit}</span>    \r\n            </span>\r\n            <span className=\"price-row\">\r\n                <span className=\"item-label\">Discount ({props.dis}%):</span>\r\n                <span className=\"item-value\">$ {(dis*sum)/100}</span>    \r\n            </span>\r\n            <hr></hr>\r\n            <span className=\"price-row\">\r\n                <span className=\"item-label final\">Total:</span>\r\n                <span className=\"item-value\">$ {getSubTotal()}</span>    \r\n            </span>\r\n            <Link to=\"/place-order\" className=\"order-place-btn btn\">Place Orders</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PriceTotal;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\ResultDisplay\\index.js",["276","277"],"import React from 'react';\r\nimport Pagination from './../../Pagination';\r\n\r\nimport './result-display.css';\r\nclass ResultDisplay extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchQueue: {\r\n                name: props.name,\r\n                maxPrice: props.maxPrice,\r\n                minPrice: props.minPrice,\r\n                inStock: props.inStock,\r\n            },\r\n            list: [],\r\n            foundList: []\r\n        }\r\n        this.fetchItems = this.fetchItems.bind(this);\r\n    }\r\n    getItemBasedOnSearchResult(){\r\n        let list = this.state.list;\r\n        let newList = [];\r\n        let result = [];\r\n        let nameResult = this.props.name;\r\n        let maxPriceResult = parseInt(this.props.maxPrice);\r\n        let minPriceResult = parseInt(this.props.minPrice);\r\n        let getInStockResult = this.props.inStock;\r\n        if(getInStockResult){\r\n            list.forEach((item) =>{\r\n                var nameMatchResult = item.name.toLowerCase().search(nameResult);\r\n                if (nameMatchResult != -1 && item.quantity > 0){\r\n                    newList.push(item);\r\n                } \r\n            });\r\n        } else {\r\n            list.forEach((item) =>{\r\n                var nameMatchResult = item.name.toLowerCase().search(nameResult);\r\n                if (nameMatchResult != -1){\r\n                    newList.push(item);\r\n                } \r\n            });\r\n        }\r\n        \r\n        if (maxPriceResult === 0){\r\n           result = newList.filter(item => (parseInt(item.price) >= minPriceResult));\r\n        }else {\r\n           result = newList.filter(item => (parseInt(item.price) >= minPriceResult && parseInt(item.price) <= maxPriceResult));\r\n        }\r\n        return result;\r\n    }\r\n    fetchItems(){\r\n        fetch(\"../ORDERS.json\").then(res => res.json()).then((result)=>{\r\n            this.setState({\r\n                 list: result,\r\n             });\r\n        }).then(()=>{\r\n            this.setState({\r\n               foundList: this.getItemBasedOnSearchResult()\r\n            })\r\n        })\r\n     }\r\n    componentDidMount(){\r\n        this.fetchItems();\r\n    }\r\n    componentDidUpdate(prevProps,prevState){\r\n        if(prevProps.name !== this.props.name \r\n            || prevProps.minPrice !== this.props.minPrice\r\n            || prevProps.maxPrice !== this.props.maxPrice\r\n            || prevProps.inStock !== this.props.inStock\r\n            ){//need to use this to update component when props change, compare the prev props with the current props to stop infinite call of render\r\n            this.setState({\r\n                foundList: this.getItemBasedOnSearchResult()\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"result_display\">\r\n                    <h4>Results: ({this.state.foundList.length})</h4>\r\n                    { this.state.foundList.length >0 ? (<Pagination  dalist={this.state.foundList}></Pagination>) : ( <div>Not found</div>)}   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultDisplay;","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\Sorter\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ItemsSummary\\index.js",["278","279"],"import React, {useState, useEffect} from 'react';\r\nimport './items-summary.scss'\r\nconst ItemsSummary = (props) => {\r\n    const [list,setList] = useState(props.list);\r\n    useEffect(()=>{\r\n        setList(props.list);\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        setList(props.list);\r\n    },[props.list])\r\n   \r\n    return (\r\n        <div id=\"items-summary\">\r\n            <h4 className=\"check-out-title\">Items summary</h4>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>No</th>\r\n                        <th></th>\r\n                        <th>Name</th>\r\n                        <th>Quantity</th>\r\n                        <th>Total</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {list.length > 0 && list.map((item, index)=>{\r\n                        return(\r\n                            <tr key={item.id + item.type}>\r\n                                <td>{index + 1}</td>\r\n                                <td><img src={require(\"./../../../images/\" +  item.id + \"-\" + item.type + \".jpg\")}></img></td>\r\n                                <td>{item.type + \" \" + item.name}</td>\r\n                                <td>{item.quantity}</td>\r\n                                <td>$ {item.quantity * item.price}</td>\r\n                            </tr>     \r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemsSummary;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\SearchForm\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ItemDetail\\index.js",["280"],"import {React, useState} from 'react';\r\nimport './item-detail.scss';\r\nconst ItemDetail = (props) => {\r\n    const [order,setOrder] = useState(props.daOrder);\r\n    return (\r\n        <div id=\"item_detail\">\r\n            <span className=\"product-name\">{order.name}</span>\r\n            <span className=\"product-price\">Price: $ {order.price}</span>\r\n            <p className=\"product-description\">{order.description}</p>\r\n            <span className=\"product-availability\">\r\n                {order.quantity<=0?(\r\n                    <span className=\"out-of-stock\">Out of stock</span>\r\n                ):(\r\n                    <span>\r\n                        <span className=\"item-in-stock\">In Stock</span>\r\n                        <span className=\"item-quantity\">{order.quantity} left</span>\r\n                    </span>\r\n                )}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemDetail;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\Payment\\index.js",["281"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\FeaturedItems\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ShippingInfo\\index.js",["282","283"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport './shipping-info.scss';\r\nimport Collapsable from \"../../Plugins/Collaspable\";\r\nimport Modal from \"../../Plugins/Modal\";\r\nimport firebase from '../../Firebase/firebase.js';\r\nconst db = firebase.firestore();\r\nconst ShippingInfo = (props) => {\r\n    //Refs\r\n    const modalRef = useRef();\r\n    //States\r\n    const [shippingList, setShippingList] = useState([]);\r\n    const [currentShipping, setCurrentShipping] = useState(props.curShipping)\r\n    const [allStates, setAllStates] = useState();\r\n    const [shippingFormValues, setShippingFormValues] = useState({\r\n        name:\"\",\r\n        zip: \"\",\r\n        city: \"\",\r\n        resiState: \"\",\r\n        address: \"\",\r\n        id: \"\",\r\n    });\r\n    //Methods\r\n    //data getter from firestore\r\n    let fetchDataFromFireStore = (id) => {\r\n        db.collection(\"shippings\").get().then((dat)=>{\r\n            var collections = dat.docs;\r\n            var list = [];\r\n            var promise = new Promise((resolve)=>{\r\n                collections.forEach((doc)=>{\r\n                    list.push(doc.data())\r\n                });\r\n                resolve();\r\n             });\r\n            promise.then(()=>{\r\n                setShippingList(list);\r\n                if (!id){\r\n                    setCurrentShipping(list[0]);\r\n                } else {\r\n                    setCurrentShipping(list[id]);\r\n                    props.setShippingForApp(list[id]);\r\n                }\r\n            });\r\n        })\r\n    }\r\n    //Forms handlers\r\n        //Handling Forms inputs\r\n    let handleNameChange = (e) => {\r\n        setShippingFormValues(prevState => ({\r\n            ...prevState,\r\n            name: e.target.value\r\n        }))\r\n    }\r\n    let handleZipChange = (e) => {\r\n        setShippingFormValues(prevState => ({\r\n            ...prevState,\r\n            zip: e.target.value\r\n        }))\r\n    }    \r\n    let handleStateChange = (e) => {\r\n        setShippingFormValues(prevState => ({\r\n            ...prevState,\r\n            resiState: e.target.value\r\n        }))\r\n    }\r\n    let handleCityChange = (e) => {\r\n        setShippingFormValues(prevState => ({\r\n            ...prevState,\r\n            city: e.target.value\r\n        }))\r\n    }\r\n    let handleAddressChange = (e) => {\r\n        setShippingFormValues(prevState => ({\r\n            ...prevState,\r\n            address: e.target.value\r\n        }))\r\n    }\r\n    let updateCurrentShipping = (e) =>{\r\n        let id = e.target.value;\r\n        setCurrentShipping(shippingList[id]);\r\n    }\r\n        //Submitting form values\r\n    let setShippingAddress = () => {\r\n        if(shippingFormValues.length === 0 || shippingFormValues === undefined){\r\n            return;\r\n        } else {\r\n            var newShipAddress = {...shippingFormValues};\r\n            var lengthOfList = (shippingList.length).toString();\r\n            newShipAddress.id = lengthOfList;\r\n            db.collection(\"shippings\").doc(lengthOfList).set(newShipAddress).then(()=>{\r\n                fetchDataFromFireStore(newShipAddress.id);\r\n            });\r\n        }\r\n    } \r\n    //When current shipping changed, update shipping info to Check Out component\r\n    useEffect(()=>{\r\n        if(currentShipping !== undefined){\r\n            props.setShippingForApp(currentShipping);\r\n        }\r\n    },[currentShipping])\r\n    //Getting shipping datas from fire store and states data from json file from public directory\r\n    useEffect(() => {\r\n        if (props.curShipping === undefined){\r\n            fetchDataFromFireStore(0);\r\n            fetch(\"USstates.json\").then((dat)=>dat.json()).then(data=>{\r\n                setAllStates(data);\r\n            });\r\n        } else {     \r\n            fetchDataFromFireStore(props.curShipping.id);\r\n            fetch(\"USstates.json\").then((dat)=>dat.json()).then(data=>{\r\n                setAllStates(data);\r\n            });\r\n        }\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"shipping-info\">\r\n                <h4 className=\"check-out-title\">Shipping</h4>\r\n                <Collapsable\r\n                    itemName=\"shipping\"\r\n                   //Top part of the collapsable plugin\r\n                    chosenChildren= {currentShipping && \r\n                        <div className=\"shipping-chosen\">\r\n                            <span className=\"chosen-shipping-name\">{currentShipping.name}</span>\r\n                            <span className=\"chosen-shipping-address-line\">{currentShipping.address}</span>\r\n                            <span className=\"chosen-shipping-city-state\">{currentShipping.city}, {currentShipping.resiState} {currentShipping.zip} </span>\r\n                        </div>\r\n                    }\r\n                    //Bottom part of the collapsable plugin where change field and form present\r\n                    changeChildren={\r\n                        (\r\n                        <div>\r\n                            <div className=\"shipping-options\">\r\n                                <table >\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th></th>\r\n                                            <th>Name</th>\r\n                                            <th>Address</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {shippingList && currentShipping && shippingList.map((ship)=>{\r\n                                        return(\r\n                                       <tr key={ship.id}>\r\n                                           <td><input onClick={updateCurrentShipping} type=\"radio\" name=\"shipping\" checked={currentShipping.id === ship.id} value={ship.id}></input></td>\r\n                                           <td className=\"ship-name\">{ship.name}</td>\r\n                                           <td className=\"ship-address\">{ship.address}</td>\r\n                                       </tr>     \r\n                                        );\r\n                                    })}\r\n                                    </tbody>\r\n                                </table>\r\n                                <button onClick={()=>{modalRef.current.showModal()}}>+ Add new Address</button>\r\n                            </div>\r\n                            <Modal ref={modalRef} extraFuncToCloseMethod name=\"add_shipping\">{/*Provdie name to make unique ID for the modal*/}\r\n                                <div className=\"shipping-adding\">\r\n                                    <span className=\"add-shipping-name\">\r\n                                        <label className=\"label\">For (Name):</label>\r\n                                        <input value={shippingFormValues.name} onChange={handleNameChange} type=\"text\" placeholder=\"Enter Name Here\"></input>\r\n                                    </span>\r\n                                    <span className=\"add-shipping-address\">\r\n                                        <label className=\"label\">Address</label>\r\n                                        <input value={shippingFormValues.address} onChange={handleAddressChange}  type=\"text\" placeholder=\"Enter Address\"></input>\r\n                                    </span>\r\n                                    <span className=\"add-shipping-state\">\r\n                                        <label className=\"label\">State</label>\r\n                                        <select value={shippingFormValues.resiState} onChange={handleStateChange}>\r\n                                            {allStates && allStates.map((daState)=>{\r\n                                                return(\r\n                                                    <option key={daState.abbreviation} value={daState.abbreviation}>{daState.name}</option>\r\n                                                );\r\n                                            })}\r\n                                        </select>\r\n                                    </span>\r\n                                    <span className=\"add-shipping-city\">\r\n                                        <label className=\"label\">City</label>\r\n                                        <input value={shippingFormValues.city} onChange={handleCityChange} type=\"text\" placeholder=\"Enter City\"></input>\r\n                                    </span>\r\n                                    <span className=\"add-shipping-zip\">\r\n                                        <label className=\"label\">Zip</label>\r\n                                        <input value={shippingFormValues.zip} onChange={handleZipChange} type=\"text\" placeholder=\"Enter zip code\"></input>\r\n                                    </span>\r\n                                </div>\r\n                                <button onClick={setShippingAddress}>Add the Address</button>\r\n                            </Modal>\r\n                        </div>\r\n                        )\r\n                    }\r\n                >\r\n\r\n                </Collapsable>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShippingInfo;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CardModal\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\BannerList.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\GiftCards.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\index.js",["284","285","286","287","288"],"import {React, useState, useEffect} from 'react';\r\nimport PaginationController from './PaginationController';\r\nimport PaginationView from './PaginationView';\r\nimport './pagination.scss';\r\nconst Pagination = (props) => {\r\n   let getTotalPageNumbers = () => {\r\n        var totalItems = props.dalist.length;\r\n        var divider = parseInt(itemPerPage);\r\n        return Math.ceil(totalItems/divider);\r\n    }\r\n    let getItemsForPage = (startIndex) => {\r\n        let newList = [...props.dalist];\r\n        let itemsList =  newList.splice(startIndex, itemPerPage);\r\n        return itemsList;\r\n    } \r\n    let handlePageChange = (indexFromController) => {\r\n       setCurPage(indexFromController);\r\n    }\r\n    let nextPage = () => {\r\n        let next = parseInt(curPage) + 1;//Added parseInt here because the curPage sometimes is string\r\n        setCurPage(next);\r\n    }\r\n    let prevPage = () => {\r\n        let prev = curPage - 1;\r\n        setCurPage(prev);\r\n    }\r\n    let firstPage = () =>{\r\n        setCurPage(0);\r\n    }\r\n    let lastPage = () =>{\r\n        setCurPage(getTotalPageNumbers() - 1);\r\n    }\r\n    const [itemPerPage, setItemPerPage] = useState(8);//how many item to display\r\n   // const [itemWidth, setItemWidth] = useState(30); //percentage width of items\r\n    const [curList, setCurList] = useState(getItemsForPage(0));\r\n    const [pageNumber, setPageNumber] = useState(getTotalPageNumbers());\r\n    const [curPage, setCurPage] = useState(0);//deduct one to get the start index\r\n    const [paginified,setPaginified] = useState(pageNumber>0);\r\n    //props.dalist got update from search result\r\n\r\n    useEffect(()=>{\r\n                var totalPages = getTotalPageNumbers();\r\n                setCurList(getItemsForPage(0));\r\n                setPageNumber(totalPages);\r\n                setPaginified(totalPages >= 2);\r\n            },[]);\r\n    useEffect((prev,next)=>{ \r\n        if (prev != props){\r\n            var totalPages = getTotalPageNumbers();\r\n            setCurList(getItemsForPage(0));\r\n            setCurPage(0);\r\n            setPageNumber(totalPages);\r\n            setPaginified(totalPages >= 2);\r\n        }\r\n    },[props.dalist]); \r\n    useEffect(()=>{\r\n         \r\n        setCurList(getItemsForPage(curPage*itemPerPage));\r\n    },[curPage]);\r\n    return (\r\n        <div className=\"pagination\">\r\n            {paginified && <PaginationController list={curList} prev={prevPage} next={nextPage} last={lastPage} cur={curPage} lastP={getTotalPageNumbers()-1} first={firstPage} pageNo={pageNumber} handlePageChange={handlePageChange}></PaginationController>\r\n            }\r\n            <PaginationView list={curList}></PaginationView>\r\n            { paginified &&\r\n            <PaginationController list={curList} prev={prevPage} next={nextPage} last={lastPage} cur={curPage} lastP={getTotalPageNumbers()-1} first={firstPage} pageNo={pageNumber} handlePageChange={handlePageChange}></PaginationController>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerBox\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Pagination\\index.js",["289"],"import React from 'react';\r\nimport './Pagination.css';\r\nimport {BsFillCircleFill as Circle} from 'react-icons/bs';\r\nfunction Pagedot(props) {\r\n    return(\r\n        <a href=\"#\" className=\"page-dot\" index={props.index}>\r\n            <Circle></Circle>\r\n        </a>\r\n    )\r\n\r\n};\r\nclass Pagination extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            NoOfItems: this.props.NoOfItems,\r\n            current: 0,\r\n            next: this.props.NoOfItems - 1,\r\n            prev: 0,\r\n        }\r\n    }\r\n    generateUI(){\r\n        var i = 0;\r\n        var max = this.state.NoOfItems;\r\n        var items = [];\r\n        for(i; i < max; i+=1){\r\n            items.push(<Pagedot key={i} index={i}></Pagedot>);\r\n        }\r\n        return items;   \r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"Pagination\">\r\n                {this.generateUI()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pagination;","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Controller\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Modal\\index.js",["290","291"],"import React, {useEffect, useState, useImperativeHandle} from 'react';\r\nimport  {AiFillCloseCircle} from 'react-icons/ai';\r\nimport './modal.scss';\r\nconst Modal = React.forwardRef((props,ref) => {//expose showModal method to the user\r\n    let [id, setid] = useState(\"modal\" + (props.name? (\"_\"+props.name) : \"\"));\r\n    let hideModal = () => {\r\n        var daModal = document.getElementById(id);\r\n        daModal.classList.add(\"hide-modal\");\r\n    }\r\n    let showModal = () => {\r\n        var daModal = document.getElementById(id);\r\n        daModal.classList.remove(\"hide-modal\");\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n        showModal: showModal, hideModal: hideModal\r\n    }));//use ref in parent component to access to the component methods from outside\r\n    useEffect(()=>{\r\n        if (props.hide === false){\r\n            showModal();\r\n        }\r\n    },[props.hide])\r\n    return (\r\n        //initially hide the modal with hide-modal class, can be found in modal.scss in the same directory\r\n        <div className=\"modal-container hide-modal\" id={\"modal\" + (props.name? (\"_\"+props.name) : \"\") }>\r\n            <div className=\"modal\">\r\n                {props.hasTitle && <h5>{props.name.replaceAll('-',\" \").toUpperCase()}</h5>}\r\n                <button className=\"close-btn-modal\" onClick={hideModal}><AiFillCloseCircle></AiFillCloseCircle></button>\r\n                {props.children}\r\n            </div>\r\n            <div className=\"black-curtain\"></div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Modal;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderWidget\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Collaspable\\index.js",["292","293","294"],"import React, {useState,useEffect, useImperativeHandle} from 'react';\r\nimport './collapsable.scss';\r\nconst Collapsable = React.forwardRef((props,ref) => {\r\n    //States\r\n    let [idChosenDiv, setIdChosenDiv] = useState(\"chosen_\"+props.itemName);\r\n    let [idChangeDiv, setIdChangeDiv] = useState(\"change_field_\"+props.itemName);\r\n\r\n\r\n    //Methods of the component\r\n      //When user click change button to change their cards option\r\n    let handleChange = (e) =>{\r\n        e.stopPropagation();\r\n        var changeField = document.getElementById(idChangeDiv);\r\n        var chosen = document.getElementById(idChosenDiv);\r\n        changeField.classList.remove(\"display-none\");\r\n        chosen.classList.add(\"display-none\");\r\n    }\r\n      //when use click close button or commit to change to hide the change option tab\r\n    let handleClose = (e) =>{\r\n       e.stopPropagation();\r\n       var changeField = document.getElementById(idChangeDiv);\r\n       var chosen = document.getElementById(idChosenDiv);\r\n        chosen.classList.remove(\"display-none\");\r\n        changeField.classList.add(\"display-none\");\r\n    }\r\n    useImperativeHandle(ref, ()=>({//expose the component methods to its user, must use useRef to refer to it \r\n\r\n    }));\r\n    return (\r\n        <div className=\"collapsable\">\r\n            <div id={idChosenDiv} className=\"chosen-collapsable\">\r\n                {props.chosenChildren}\r\n                <button className=\"change-btn\" onClick={handleChange}>Change</button>\r\n            </div>\r\n            <div id={idChangeDiv} className=\"change-collapsable display-none\">\r\n                {props.changeChildren}\r\n                <button className=\"close-btn\" onClick={handleClose}>Commit Change (Close)</button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Collapsable;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerItem\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationView\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationController\\index.js",["295","296","297","298","299","300","301","302","303","304","305"],"import { checkPropTypes } from 'prop-types';\r\nimport React, {useState, useEffect} from 'react';\r\nimport './pagination-controller.scss';\r\nconst PaginationController = (props) => {\r\n    const [curPage, setCurPage] = useState(props.cur);\r\n    const [,setState] = useState();\r\n    const [lastPage, setLastPage] = useState(props.lastP);\r\n    const [listOfPage,setListOfPage] = useState([]);\r\n    let generatePageNo = () =>{\r\n        let arrays = [];\r\n        let i = 0;\r\n        let length = props.pageNo;\r\n        while(i < length){\r\n            arrays.push((<span  data-index={i} onClick={(e)=>{\r\n                e.stopPropagation();\r\n                let index = e.target.getAttribute(\"data-index\");\r\n                props.handlePageChange(index);\r\n            }} className={(props.cur == i? \"cur-page-btn \" : \"\") + \"page-no\"} key={i}>{i + 1}</span>));\r\n            i+=1;\r\n        }\r\n        return arrays;\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        //if the current page number is updated\r\n        setCurPage(props.cur);\r\n        setListOfPage(generatePageNo());\r\n    },[props.cur]);\r\n    useEffect(()=>{\r\n        setListOfPage(generatePageNo());\r\n    },[props.pageNo]);\r\n    return (\r\n        <div className=\"pagination-controller\">\r\n            <span hidden={curPage == 0} className=\"first-btn\" onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.first();\r\n            }}>First</span>\r\n            <span className=\"prev-btn\" hidden={curPage == 0} onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.prev();\r\n            }}>Prev</span>\r\n            <span key={curPage} className=\"pages-number\">\r\n                {listOfPage}\r\n            </span>\r\n            <span hidden={curPage == props.lastP } className=\"next-btn\"onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.next();\r\n            }}>Next</span>\r\n            <span hidden={curPage == props.lastP } className=\"last-btn\"onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.last();\r\n            }}>Last</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PaginationController;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\HozBox\\index.js",["306"],"import React, { Component } from 'react';\r\nimport \"./hoz-box.scss\";\r\nclass HozBox extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            imgSrc: props.imgSrc,\r\n            title: props.title,\r\n            content: props.content,\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n                <div className=\"hoz-order-box\">\r\n                    <img src={require(\"./../../../images/\" + this.state.imgSrc)}></img>\r\n                    <div className=\"box-content\">\r\n                        <span className=\"order-name\">{this.state.title}</span>\r\n                        <div className=\"order-content\">{this.state.content}</div>\r\n                        {this.props.extraContent &&(\r\n                            this.props.extraContent\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default HozBox;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ThankYou\\index.js",["307","308"],"import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./thank-you.scss\";\r\nclass ThankYou extends Component {\r\n    constructor(props){\r\n     super(props);\r\n     this.state = {\r\n         randomizedOrderTracking: \"\",\r\n     }       \r\n    }\r\n    generateRanDomMaxChar = (max) =>{\r\n        const maxChar = max;\r\n        let charList=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'];\r\n        let charListLength = charList.length;\r\n        let listOfChar = [];\r\n        let i = 0;\r\n        for (i; i<maxChar; i+=1){\r\n            let randomNo = Math.floor(Math.random()*charListLength);\r\n            listOfChar.push(charList[randomNo]);\r\n        }\r\n        return listOfChar.toString().replaceAll(',',\"\").toUpperCase();\r\n    }\r\n    componentDidMount = () => {\r\n       this.state.randomizedOrderTracking  = this.generateRanDomMaxChar(15);   \r\n       let promise = new Promise((resolve)=>{\r\n        this.props.addToOrderAfterCheckOut(this.state.randomizedOrderTracking);\r\n        resolve();\r\n        }).then(()=>{\r\n            this.props.flushCart();\r\n       })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                Thank You \r\n                <div>\r\n                    Here is your tracking number: \r\n                    <span className=\"tracking-number\">{this.state.randomizedOrderTracking}</span>\r\n                    <Link to=\"/\">Continue Shopping</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ThankYou;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\firebase.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\context.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Shortcut\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\GCards\\index.js",["309","310","311","312"],"import React, {useState,useEffect, useRef} from 'react';\r\nimport CollapseTab from '../Plugins/CollapseTab';\r\nimport Modal from '../../Plugins/Modal';\r\nimport Firebase from '../../Firebase';\r\nimport './gcards.scss';\r\n\r\nconst GCards = (props) => {\r\n    //List of random state to generate when add a new card, as if the information is retrieved from the bank the card from\r\n    const randomTypes = [\"visa\",\"master\"];\r\n    const INITIALCARDFORM = {//empty object used to initialize form for adding card\r\n        name: \"Newly added gcard\",\r\n        \"exp month\": 0,\r\n        \"exp year\": 0,\r\n        \"id\": randomTypes[Math.floor(Math.random()*2)] + Math.floor(Math.random()*99),\r\n        type: randomTypes[Math.floor(Math.random()*2)],\r\n    }\r\n    const [prepList, setPrepList] = useState([]);\r\n    const [addingCardFromForm, setAddingCardFromForm] = useState({...INITIALCARDFORM});\r\n    const [deletingCard, setDeletingCard] = useState({});\r\n    const [confirmedAddedCard, setConfirmedAddedCard] = useState({});\r\n    const [beforeEditedCard, setBeforeEditedCard] = useState({});//To remove in the fire store\r\n    const [beingEdittedCard, setBeingEdittedCard] = useState({});//To add to the fire store to replace the removed one\r\n    //reference to the modal that is exposed with there showModal and hideModal methods.\r\n    const refForAddCardModal = useRef({});\r\n    const refForRemoveCardModal = useRef({});\r\n    const refForEditCardModal = useRef({});\r\n    //Firebase 's firestore \r\n    const db = Firebase.firestore();\r\n    \r\n    let handlePreProcessingCardListToComponent = () => {//Transform the provided gift cards list from props to title and content props that is later used by collapse tab component\r\n        if(props.list){\r\n        return props.list.map((item,index)=>{\r\n            return {\r\n                title: //Title part\r\n                <React.Fragment>\r\n                    <span className=\"card-thumb\"><img alt={item.type} src={require(\"./../../../images/Cards/\" + item.type + \".jpg\")}></img></span>\r\n                    <span className=\"card-mini-info\">{item.type[0].toUpperCase() + item.type.slice(1)} {item.name}</span>\r\n                    <span>{item[\"exp month\"]} / {item[\"exp year\"]}</span>\r\n                </React.Fragment>,\r\n                content: //Content part\r\n                <React.Fragment>\r\n                    <div>\r\n                        <h5>Gift card name</h5>\r\n                        <span>{item.name}</span>\r\n                    </div>\r\n                    <div>\r\n                        <h5>{item.type === \"debit\"? \"Amount($): \" : \"Discount(%): \"} <span>{item.amount}</span></h5>\r\n                    </div>\r\n                    <div className=\"card-edit-remove\">\r\n                        <button onClick={(e)=>{\r\n                            e.stopPropagation();\r\n                            handleClickEditCardButton(item,index)}} >Edit</button>\r\n                        <button onClick={()=>{handleClickDeleteCardButton(item)}}>Delete</button>\r\n                    </div>\r\n                </React.Fragment>\r\n            }\r\n            })\r\n        }\r\n    }\r\n    //Adding card to account\r\n    let handleClickingAddCard = () => {\r\n        refForAddCardModal.current.showModal();\r\n    }\r\n    let handleAddCardToAccount = () =>{ \r\n        let daCard = {...addingCardFromForm};\r\n        let promise = new Promise((resolve,reject)=>{\r\n            setConfirmedAddedCard(daCard);//Set the card to buffer before updating\r\n            resolve(\"added confirmation\");\r\n        })\r\n        promise.then((result)=>{//reset the buffer, close the modal\r\n            if (result === \"added confirmation\"){\r\n                setAddingCardFromForm({...INITIALCARDFORM});\r\n                refForAddCardModal.current.hideModal();\r\n            } else {\r\n                console.log(\"cannot add\");\r\n            }\r\n        });\r\n    }\r\n        //Handling adding field to card in form modal\r\n    let handleAddingNameToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            name: e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpMonthToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpYearToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp year\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingTypeToCardForm = (e) =>{\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            type: e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingAmountToCardForm = (e) =>{\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            amount: e.target.value,\r\n        }))\r\n    }\r\n    //Handling deleting card\r\n    let handleClickDeleteCardButton = (card) => {\r\n        setDeletingCard(card);\r\n        refForRemoveCardModal.current.showModal();\r\n    } \r\n     let handleDeleteCard = () => {\r\n        let daCard = {...deletingCard};\r\n        let promise = new Promise((resolve,reject)=>{\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                gcards: Firebase.firestore.FieldValue.arrayRemove(daCard)\r\n            });\r\n            resolve(); \r\n        });\r\n        promise.then(()=>{     \r\n            refForRemoveCardModal.current.hideModal();\r\n        });\r\n    }\r\n    //Handling Editing \r\n    let handleClickEditCardButton = (card,index) => {\r\n        //ard.name.toCamelCase();\r\n        console.log(String(\"hello there\").toUpperCase());\r\n        setBeingEdittedCard(card);\r\n        setBeforeEditedCard(card);\r\n        \r\n        refForEditCardModal.current.showModal();\r\n    }\r\n        //Handling editing form\r\n    let handleNameChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            name: e.target.value\r\n        }));\r\n    }\r\n    let handleExpMonthChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value\r\n        }))\r\n    }\r\n    let handleExpYearChangeEditing = (e) => {\r\n        setBeingEdittedCard((prevState) => ({\r\n            ...prevState,\r\n            \"exp year\": e.target.value\r\n        }))\r\n    }\r\n        //When user pressed confirmed\r\n    let handleEditConfirmation = () =>{\r\n        let daCard = {...beingEdittedCard};//To be added\r\n        let daOrignial = {...beforeEditedCard};//To be removed, the original\r\n        if (JSON.stringify(daCard) !== JSON.stringify(daOrignial)){//If there is difference\r\n           let promise = new Promise((resolve,reject)=>{//First remove the original\r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    gcards: Firebase.firestore.FieldValue.arrayRemove(daOrignial)\r\n                });\r\n                resolve(); \r\n            });\r\n            promise.then(()=>{//Then add the updated version to replace the removed one     \r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    gcards: Firebase.firestore.FieldValue.arrayUnion(daCard)\r\n                });\r\n                refForEditCardModal.current.hideModal();\r\n            }); \r\n    /*         let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.get().then((snapShot)=>{\r\n                let daGCardsOld = snapShot.data().gcards;\r\n                let daGCardsNew = snapShot.data().gcards;\r\n                daGCardsNew[currentIndexOfEdited] = daCard;\r\n                for (var i = 0; i < daGCardsNew.length; i+=1){\r\n                    accountDoc.update({\r\n                        gcards: Firebase.firestore.FieldValue.arrayUnion(daGCardsNew[i])\r\n                    });\r\n                }\r\n                for (var i = 0; i < daGCardsOld.length; i+=1){\r\n                    accountDoc.update({\r\n                        gcards: Firebase.firestore.FieldValue.arrayRemove(daGCardsOld[i])\r\n                    });\r\n                }\r\n\r\n            }).then(()=>{\r\n                refForEditCardModal.current.hideModal();\r\n            }); */\r\n        }else{//no difference, simply close the box\r\n            refForEditCardModal.current.hideModal();\r\n        }\r\n    }\r\n\r\n \r\n    useEffect(() => {//preping item and markup to provide the collapse Tab\r\n        setPrepList(handlePreProcessingCardListToComponent);\r\n    }, []);\r\n    useEffect(() => {//When confirmedAddedCard is update through the card adding method\r\n        if(JSON.stringify(confirmedAddedCard)!= JSON.stringify({})){\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                gcards: Firebase.firestore.FieldValue.arrayUnion(confirmedAddedCard)\r\n            });\r\n        }\r\n    }, [confirmedAddedCard]);\r\n    useEffect(()=>{//rerender GCards component whenever new card is added\r\n        setPrepList(handlePreProcessingCardListToComponent);\r\n    },[props.list])\r\n    return (\r\n        <div className=\"user-gcards-manament\">\r\n            <h4>Gift Cards</h4>\r\n            <div className=\"title-for-card-list\">\r\n                <span className=\"card-name tab-head\">Your Gift Cards</span>\r\n                <span className=\"card-exp tab-head\">Expires</span>\r\n            </div>\r\n            {prepList && <CollapseTab list={prepList}>\r\n            </CollapseTab>}\r\n            <Modal hasTitle={true} ref={refForAddCardModal} name=\"add-gift-card-for-account\">\r\n                    <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name of Card</legend>\r\n                            <input type=\"text\" onChange={handleAddingNameToCardForm} value={addingCardFromForm.name} placeholder=\"Enter Name on Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleAddingExpMonthToCardForm} type=\"number\" value={addingCardFromForm[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleAddingExpYearToCardForm} type=\"number\" value={addingCardFromForm[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half type\">\r\n                            <legend>Type</legend>\r\n                            <select className=\"exp-month\" onChange={handleAddingTypeToCardForm} type=\"number\" value={addingCardFromForm.type}>\r\n                                {\r\n                                    randomTypes.map((item)=>(\r\n                                        <option key={item} value={item}>{item[0].toUpperCase() + item.slice(1)}</option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                        </span>\r\n                        <span className=\"form-row-control half amount\">\r\n                            <legend>Amount</legend>\r\n                            <input type=\"number\" onChange={handleAddingAmountToCardForm} value={addingCardFromForm.amount} placeholder=\"Enter Amount\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleAddCardToAccount}>Add Card</div>\r\n                    </div>\r\n            </Modal>\r\n            <Modal ref={refForRemoveCardModal} name=\"remove-gift-card-confirm\">\r\n                {deletingCard !== {} && <div>Are you sure you want to remove <b>{deletingCard.name}</b> card ?</div>}\r\n                <button onClick={handleDeleteCard}>Confirm</button> \r\n                <button onClick={refForRemoveCardModal.current.hideModal}>Cancel</button> \r\n            </Modal>\r\n            <Modal hasTitle={true} ref={refForEditCardModal} name=\"edit-gift-card-for-account\">\r\n            {Object.keys(beingEdittedCard) !== 0 && <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name of Card</legend>\r\n                            <input type=\"text\" onChange={handleNameChangeEditing} value={beingEdittedCard.name} placeholder=\"Enter Name of Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleExpMonthChangeEditing} type=\"number\" value={beingEdittedCard[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleExpYearChangeEditing} type=\"number\" value={beingEdittedCard[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleEditConfirmation}>Confirm edit</div>\r\n                    </div>}\r\n            </Modal>\r\n            <button onClick={handleClickingAddCard}>Add a new card</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GCards;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Cards\\index.js",["313","314","315"],"import React, {useState,useEffect, useRef} from 'react';\r\nimport CollapseTab from '../Plugins/CollapseTab';\r\nimport Modal from '../../Plugins/Modal';\r\nimport Firebase from '../../Firebase';\r\nimport './cards.scss';\r\nconst Cards = (props) => {\r\n    //List of random state to generate when add a new card, as if the information is retrieved from the bank the card from\r\n    const randomCities = [\"San jose\", \"San Frans\", \"Sunny vale\"];\r\n    const randomStates = [\"CA\", \"AZ\", \"NY\"];\r\n    const randomZips = [\"97888\",\"99999\",\"11100\"];\r\n    const randomTypes = [\"visa\",\"master\"];\r\n    const INITIALCARDFORM = {//empty object used to initialize form for adding card\r\n        name: \"Newly added\",\r\n        owner: \"\",\r\n        \"card number\": \"\",\r\n        \"exp month\": 0,\r\n        \"exp year\": 0,\r\n        \"billing address\": \"Newly added\" + (Math.round(Math.random()*99)),\r\n        \"billing city\": randomCities[Math.floor(Math.random()*3)],\r\n        \"billing state\": randomStates[Math.floor(Math.random()*3)],\r\n        \"billing zip\": randomZips[Math.floor(Math.random()*3)],\r\n        type: randomTypes[Math.floor(Math.random()*2)],\r\n    }\r\n    const [prepList, setPrepList] = useState([]);\r\n    const [addingCardFromForm, setAddingCardFromForm] = useState({...INITIALCARDFORM});\r\n    const [deletingCard, setDeletingCard] = useState({});\r\n    const [confirmedAddedCard, setConfirmedAddedCard] = useState({});\r\n    const [beforeEditedCard, setBeforeEditedCard] = useState({});//To remove in the fire store\r\n    const [beingEdittedCard, setBeingEdittedCard] = useState({});//To add to the fire store to replace the removed one\r\n    //reference to the modal that is exposed with there showModal and hideModal methods.\r\n    const refForAddCardModal = useRef({});\r\n    const refForRemoveCardModal = useRef({});\r\n    const refForEditCardModal = useRef({});\r\n    //Firebase 's firestore \r\n    const db = Firebase.firestore();\r\n    \r\n    let handlePreProcessingCardListToComponent = () => {//Transform the provided cards list from props to title and content props that is later used by collapse tab component\r\n        if(props.list){\r\n        return props.list.map((item,index)=>{\r\n            return {\r\n                title: //Title part\r\n                <React.Fragment>\r\n                    <span className=\"card-thumb\"><img alt={item.type} src={require(\"./../../../images/Cards/\" + item.type + \".jpg\")}></img></span>\r\n                    <span className=\"card-mini-info\">{item.type} {item.name} {item[\"card number\"]}</span>\r\n                    <span>{item[\"exp month\"]} / {item[\"exp year\"]}</span>\r\n                </React.Fragment>,\r\n                content: //Content part\r\n                <React.Fragment>\r\n                    <div>\r\n                        <h5>Name on card</h5>\r\n                        <span>{item.owner}</span>\r\n                    </div>\r\n                    <div>\r\n                        <h5>Billing Address</h5>\r\n                        <div>\r\n                            <span>{item[\"billing address\"]}</span>\r\n                            <span>{item[\"billing city\"]}</span>\r\n                            <span>{item[\"billing state\"]}</span>\r\n                            <span>{item[\"billing zip\"]}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-edit-remove\">\r\n                        <button onClick={(e)=>{\r\n                            e.stopPropagation();\r\n                            handleClickEditCardButton(item,index)}} >Edit</button>\r\n                        <button onClick={()=>{handleClickDeleteCardButton(item)}}>Delete</button>\r\n                    </div>\r\n                </React.Fragment>\r\n            }\r\n            })\r\n        }\r\n    }\r\n    //Adding card to account\r\n    let handleClickingAddCard = () => {\r\n        refForAddCardModal.current.showModal();\r\n    }\r\n    let handleAddCardToAccount = () =>{ \r\n        let daCard = {...addingCardFromForm};\r\n        let promise = new Promise((resolve,reject)=>{\r\n            setConfirmedAddedCard(daCard);//Set the card to buffer before updating\r\n            resolve(\"added confirmation\");\r\n        })\r\n        promise.then((result)=>{//reset the buffer, close the modal\r\n            if (result === \"added confirmation\"){\r\n                setAddingCardFromForm({...INITIALCARDFORM});\r\n                refForAddCardModal.current.hideModal();\r\n            } else {\r\n                console.log(\"cannot add\");\r\n            }\r\n        });\r\n    }\r\n        //Handling adding field to card in form modal\r\n    let handleAddingOwnerToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            owner: e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingCardNumberToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"card number\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpMonthToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpYearToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp year\": e.target.value,\r\n        }))\r\n    }\r\n    //Handling deleting card\r\n    let handleClickDeleteCardButton = (card) => {\r\n        setDeletingCard(card);\r\n        refForRemoveCardModal.current.showModal();\r\n    } \r\n     let handleDeleteCard = () => {\r\n        let daCard = {...deletingCard};\r\n        let promise = new Promise((resolve,reject)=>{\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                cards: Firebase.firestore.FieldValue.arrayRemove(daCard)\r\n            });\r\n            resolve(); \r\n        });\r\n        promise.then(()=>{     \r\n            refForRemoveCardModal.current.hideModal();\r\n        });\r\n    }\r\n    //Handling Editing \r\n    let handleClickEditCardButton = (card,index) => {\r\n        setBeingEdittedCard(card);\r\n        setBeforeEditedCard(card);\r\n        refForEditCardModal.current.showModal();\r\n    }\r\n        //Handling editing form\r\n    let handleOwnerChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            owner: e.target.value\r\n        }));\r\n    }\r\n    let handleExpMonthChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value\r\n        }))\r\n    }\r\n    let handleExpYearChangeEditing = (e) => {\r\n        setBeingEdittedCard((prevState) => ({\r\n            ...prevState,\r\n            \"exp year\": e.target.value\r\n        }))\r\n    }\r\n        //When user pressed confirmed\r\n    let handleEditConfirmation = () =>{\r\n        let daCard = {...beingEdittedCard};//To be added\r\n        let daOrignial = {...beforeEditedCard};//To be removed, the original\r\n        if (JSON.stringify(daCard) !== JSON.stringify(daOrignial)){//If there is difference\r\n           let promise = new Promise((resolve,reject)=>{//First remove the original\r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    cards: Firebase.firestore.FieldValue.arrayRemove(daOrignial)\r\n                });\r\n                resolve(); \r\n            });\r\n            promise.then(()=>{//Then add the updated version to replace the removed one     \r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    cards: Firebase.firestore.FieldValue.arrayUnion(daCard)\r\n                });\r\n                refForEditCardModal.current.hideModal();\r\n            }); \r\n    /*         let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.get().then((snapShot)=>{\r\n                let daCardsOld = snapShot.data().cards;\r\n                let daCardsNew = snapShot.data().cards;\r\n                daCardsNew[currentIndexOfEdited] = daCard;\r\n                for (var i = 0; i < daCardsNew.length; i+=1){\r\n                    accountDoc.update({\r\n                        cards: Firebase.firestore.FieldValue.arrayUnion(daCardsNew[i])\r\n                    });\r\n                }\r\n                for (var i = 0; i < daCardsOld.length; i+=1){\r\n                    accountDoc.update({\r\n                        cards: Firebase.firestore.FieldValue.arrayRemove(daCardsOld[i])\r\n                    });\r\n                }\r\n\r\n            }).then(()=>{\r\n                refForEditCardModal.current.hideModal();\r\n            }); */\r\n        }else{//no difference, simply close the box\r\n            refForEditCardModal.current.hideModal();\r\n        }\r\n    }\r\n\r\n \r\n    useEffect(() => {//preping item and markup to provide the collapse Tab\r\n        setPrepList(handlePreProcessingCardListToComponent());\r\n    }, []);\r\n    useEffect(() => {//When confirmedAddedCard is update through the card adding method\r\n        if(JSON.stringify(confirmedAddedCard)!== JSON.stringify({})){\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                cards: Firebase.firestore.FieldValue.arrayUnion(confirmedAddedCard)\r\n            });\r\n        }\r\n    }, [confirmedAddedCard]);\r\n    useEffect(()=>{//rerender Cards component whenever new card is added\r\n        setPrepList(handlePreProcessingCardListToComponent());\r\n    },[props.list])\r\n    return (\r\n        <div className=\"user-cards-manament\">\r\n            <h4>Payments</h4>\r\n            <div className=\"title-for-card-list\">\r\n                <span className=\"card-name tab-head\">Your Cards</span>\r\n                <span className=\"card-exp tab-head\">Expires</span>\r\n            </div>\r\n            {prepList && <CollapseTab list={prepList}>\r\n            </CollapseTab>}\r\n            <Modal hasTitle={true} ref={refForAddCardModal} name=\"add-card-for-account\">\r\n                    <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name on Card</legend>\r\n                            <input type=\"text\" onChange={handleAddingOwnerToCardForm} value={addingCardFromForm.owner} placeholder=\"Enter Name on Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Card Number </legend>\r\n                            <input type=\"text\" onChange={handleAddingCardNumberToCardForm} value={addingCardFromForm[\"card number\"]} placeholder=\"Enter Card Number\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleAddingExpMonthToCardForm} type=\"number\" value={addingCardFromForm[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleAddingExpYearToCardForm} type=\"number\" value={addingCardFromForm[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleAddCardToAccount}>Add Card</div>\r\n                    </div>\r\n            </Modal>\r\n            <Modal ref={refForRemoveCardModal} name=\"remove-card-confirm\">\r\n                {deletingCard !== {} && <div>Are you sure you want to remove <b>{deletingCard.type}</b> card ending in {deletingCard[\"card number\"]} ?</div>}\r\n                <button onClick={handleDeleteCard}>Confirm</button> \r\n                <button onClick={refForRemoveCardModal.current.hideModal}>Cancel</button> \r\n            </Modal>\r\n            <Modal hasTitle={true} ref={refForEditCardModal} name=\"edit-card-for-account\">\r\n            {beingEdittedCard!==undefined && <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            Card type, ending in {beingEdittedCard[\"card number\"] === undefined ? \"\" : beingEdittedCard[\"card number\"]}\r\n                        </span>\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name on Card</legend>\r\n                            <input type=\"text\" onChange={handleOwnerChangeEditing} value={beingEdittedCard.owner} placeholder=\"Enter Name on Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleExpMonthChangeEditing} type=\"number\" value={beingEdittedCard[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleExpYearChangeEditing} type=\"number\" value={beingEdittedCard[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleEditConfirmation}>Confirm edit</div>\r\n                    </div>}\r\n            </Modal>\r\n            <button onClick={handleClickingAddCard}>Add a new card</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\index.js",["316","317"],"import React ,{useEffect, useState, useRef} from 'react';\r\nimport Modal from './../Plugins/Modal';\r\nimport './account.scss';\r\nimport LinkCards from './Plugins/LinkCards';\r\nconst Account = (props) => {\r\n    const changePassRefModal = useRef(null);\r\n    const otherInfo = [{name: \"Your Cards\", path: \"account/cards\"},{name: \"Gift Cards You Owned\", path: \"account/gcards\"},{name: \"Your Orders\", path: \"account/orders\"}]\r\n    return (\r\n        <div>\r\n            <h4>Account Information</h4>\r\n            <div className=\"account information\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"title-col\">User Name</td>\r\n                            <td className=\"content-col\">{props.account.username}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"title-col\">Email</td>\r\n                            <td className=\"content-col\">{props.account.email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"title-col\">Phone</td>\r\n                            <td className=\"content-col\">{props.account.phone}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"title-col\">Nick Name</td>\r\n                            <td className=\"content-col\">{props.account.nickname}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <button onClick={()=>{changePassRefModal.current.showModal()}}>Change Password</button>\r\n                <Modal hasTitle={true} ref={changePassRefModal} name=\"change-password\">\r\n                <   div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            <legend>New Password</legend>\r\n                            <input type=\"password\" value=\"\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Re enter new password </legend>\r\n                            <input type=\"password\" value=\"\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\">Confirm Change Password</div>\r\n                    </div>\r\n                   \r\n                </Modal>\r\n                <div className=\"other-information-access\">\r\n                    {otherInfo && <LinkCards list={otherInfo}>\r\n                    </LinkCards>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Account;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Orders\\index.js",["318","319","320"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\LinkCard\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\CollapseTab\\index.js",[],{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":16,"column":20,"nodeType":"327","messageId":"328","endLine":16,"endColumn":35},{"ruleId":"325","severity":1,"message":"329","line":23,"column":8,"nodeType":"327","messageId":"328","endLine":23,"endColumn":17},{"ruleId":"325","severity":1,"message":"330","line":41,"column":22,"nodeType":"327","messageId":"328","endLine":41,"endColumn":29},{"ruleId":"331","severity":1,"message":"332","line":98,"column":32,"nodeType":"333","messageId":"334","endLine":98,"endColumn":33},{"ruleId":"335","severity":1,"message":"336","line":141,"column":24,"nodeType":"337","messageId":"338","endLine":141,"endColumn":26},{"ruleId":"339","severity":1,"message":"340","line":184,"column":11,"nodeType":"341","endLine":184,"endColumn":13,"suggestions":"342"},{"ruleId":"325","severity":1,"message":"343","line":2,"column":15,"nodeType":"327","messageId":"328","endLine":2,"endColumn":23},{"ruleId":"325","severity":1,"message":"344","line":7,"column":10,"nodeType":"327","messageId":"328","endLine":7,"endColumn":16},{"ruleId":"345","severity":1,"message":"346","line":89,"column":9,"nodeType":"347","endLine":89,"endColumn":19},{"ruleId":"345","severity":1,"message":"346","line":95,"column":9,"nodeType":"347","endLine":95,"endColumn":19},{"ruleId":"325","severity":1,"message":"348","line":15,"column":19,"nodeType":"327","messageId":"328","endLine":15,"endColumn":27},{"ruleId":"339","severity":1,"message":"349","line":44,"column":8,"nodeType":"341","endLine":44,"endColumn":17,"suggestions":"350"},{"ruleId":"325","severity":1,"message":"351","line":7,"column":13,"nodeType":"327","messageId":"328","endLine":7,"endColumn":21},{"ruleId":"352","severity":1,"message":"353","line":46,"column":33,"nodeType":"354","endLine":46,"endColumn":106},{"ruleId":"325","severity":1,"message":"355","line":13,"column":10,"nodeType":"327","messageId":"328","endLine":13,"endColumn":16},{"ruleId":"325","severity":1,"message":"356","line":13,"column":18,"nodeType":"327","messageId":"328","endLine":13,"endColumn":27},{"ruleId":"325","severity":1,"message":"357","line":14,"column":20,"nodeType":"327","messageId":"328","endLine":14,"endColumn":31},{"ruleId":"325","severity":1,"message":"358","line":15,"column":10,"nodeType":"327","messageId":"328","endLine":15,"endColumn":15},{"ruleId":"325","severity":1,"message":"359","line":33,"column":17,"nodeType":"327","messageId":"328","endLine":33,"endColumn":24},{"ruleId":"339","severity":1,"message":"360","line":84,"column":8,"nodeType":"341","endLine":84,"endColumn":10,"suggestions":"361"},{"ruleId":"339","severity":1,"message":"362","line":87,"column":8,"nodeType":"341","endLine":87,"endColumn":14,"suggestions":"363"},{"ruleId":"325","severity":1,"message":"351","line":9,"column":11,"nodeType":"327","messageId":"328","endLine":9,"endColumn":19},{"ruleId":"339","severity":1,"message":"364","line":9,"column":7,"nodeType":"341","endLine":9,"endColumn":9,"suggestions":"365"},{"ruleId":"325","severity":1,"message":"366","line":1,"column":26,"nodeType":"327","messageId":"328","endLine":1,"endColumn":35},{"ruleId":"325","severity":1,"message":"367","line":4,"column":20,"nodeType":"327","messageId":"328","endLine":4,"endColumn":29},{"ruleId":"325","severity":1,"message":"368","line":5,"column":21,"nodeType":"327","messageId":"328","endLine":5,"endColumn":31},{"ruleId":"352","severity":1,"message":"353","line":8,"column":13,"nodeType":"354","endLine":8,"endColumn":77},{"ruleId":"325","severity":1,"message":"369","line":14,"column":17,"nodeType":"327","messageId":"328","endLine":14,"endColumn":23},{"ruleId":"339","severity":1,"message":"370","line":30,"column":7,"nodeType":"341","endLine":30,"endColumn":9,"suggestions":"371"},{"ruleId":"339","severity":1,"message":"372","line":36,"column":7,"nodeType":"341","endLine":36,"endColumn":19,"suggestions":"373"},{"ruleId":"335","severity":1,"message":"336","line":31,"column":37,"nodeType":"337","messageId":"338","endLine":31,"endColumn":39},{"ruleId":"335","severity":1,"message":"336","line":38,"column":37,"nodeType":"337","messageId":"338","endLine":38,"endColumn":39},{"ruleId":"339","severity":1,"message":"374","line":7,"column":7,"nodeType":"341","endLine":7,"endColumn":9,"suggestions":"375"},{"ruleId":"352","severity":1,"message":"353","line":31,"column":37,"nodeType":"354","endLine":31,"endColumn":116},{"ruleId":"325","severity":1,"message":"348","line":4,"column":18,"nodeType":"327","messageId":"328","endLine":4,"endColumn":26},{"ruleId":"325","severity":1,"message":"376","line":19,"column":24,"nodeType":"327","messageId":"328","endLine":19,"endColumn":37},{"ruleId":"339","severity":1,"message":"362","line":99,"column":7,"nodeType":"341","endLine":99,"endColumn":24,"suggestions":"377"},{"ruleId":"339","severity":1,"message":"378","line":114,"column":8,"nodeType":"341","endLine":114,"endColumn":10,"suggestions":"379"},{"ruleId":"325","severity":1,"message":"380","line":33,"column":25,"nodeType":"327","messageId":"328","endLine":33,"endColumn":39},{"ruleId":"339","severity":1,"message":"381","line":46,"column":15,"nodeType":"341","endLine":46,"endColumn":17,"suggestions":"382"},{"ruleId":"335","severity":1,"message":"336","line":48,"column":18,"nodeType":"337","messageId":"338","endLine":48,"endColumn":20},{"ruleId":"339","severity":1,"message":"383","line":55,"column":7,"nodeType":"341","endLine":55,"endColumn":21,"suggestions":"384"},{"ruleId":"339","severity":1,"message":"385","line":59,"column":7,"nodeType":"341","endLine":59,"endColumn":16,"suggestions":"386"},{"ruleId":"387","severity":1,"message":"388","line":6,"column":9,"nodeType":"354","endLine":6,"endColumn":62},{"ruleId":"325","severity":1,"message":"389","line":5,"column":14,"nodeType":"327","messageId":"328","endLine":5,"endColumn":19},{"ruleId":"339","severity":1,"message":"390","line":21,"column":7,"nodeType":"341","endLine":21,"endColumn":19,"suggestions":"391"},{"ruleId":"325","severity":1,"message":"366","line":1,"column":25,"nodeType":"327","messageId":"328","endLine":1,"endColumn":34},{"ruleId":"325","severity":1,"message":"392","line":5,"column":23,"nodeType":"327","messageId":"328","endLine":5,"endColumn":37},{"ruleId":"325","severity":1,"message":"393","line":6,"column":23,"nodeType":"327","messageId":"328","endLine":6,"endColumn":37},{"ruleId":"325","severity":1,"message":"394","line":1,"column":10,"nodeType":"327","messageId":"328","endLine":1,"endColumn":24},{"ruleId":"325","severity":1,"message":"351","line":6,"column":13,"nodeType":"327","messageId":"328","endLine":6,"endColumn":21},{"ruleId":"325","severity":1,"message":"395","line":7,"column":12,"nodeType":"327","messageId":"328","endLine":7,"endColumn":20},{"ruleId":"325","severity":1,"message":"396","line":7,"column":22,"nodeType":"327","messageId":"328","endLine":7,"endColumn":33},{"ruleId":"335","severity":1,"message":"397","line":18,"column":38,"nodeType":"337","messageId":"338","endLine":18,"endColumn":40},{"ruleId":"339","severity":1,"message":"398","line":28,"column":7,"nodeType":"341","endLine":28,"endColumn":18,"suggestions":"399"},{"ruleId":"339","severity":1,"message":"398","line":31,"column":7,"nodeType":"341","endLine":31,"endColumn":21,"suggestions":"400"},{"ruleId":"335","severity":1,"message":"397","line":34,"column":35,"nodeType":"337","messageId":"338","endLine":34,"endColumn":37},{"ruleId":"335","severity":1,"message":"397","line":38,"column":56,"nodeType":"337","messageId":"338","endLine":38,"endColumn":58},{"ruleId":"335","severity":1,"message":"397","line":45,"column":35,"nodeType":"337","messageId":"338","endLine":45,"endColumn":37},{"ruleId":"335","severity":1,"message":"397","line":49,"column":35,"nodeType":"337","messageId":"338","endLine":49,"endColumn":37},{"ruleId":"352","severity":1,"message":"353","line":15,"column":21,"nodeType":"354","endLine":15,"endColumn":82},{"ruleId":"345","severity":1,"message":"346","line":24,"column":8,"nodeType":"347","endLine":24,"endColumn":18},{"ruleId":"325","severity":1,"message":"359","line":25,"column":12,"nodeType":"327","messageId":"328","endLine":25,"endColumn":19},{"ruleId":"339","severity":1,"message":"401","line":202,"column":8,"nodeType":"341","endLine":202,"endColumn":10,"suggestions":"402"},{"ruleId":"335","severity":1,"message":"336","line":204,"column":46,"nodeType":"337","messageId":"338","endLine":204,"endColumn":48},{"ruleId":"339","severity":1,"message":"403","line":210,"column":8,"nodeType":"341","endLine":210,"endColumn":28,"suggestions":"404"},{"ruleId":"339","severity":1,"message":"401","line":213,"column":7,"nodeType":"341","endLine":213,"endColumn":19,"suggestions":"405"},{"ruleId":"339","severity":1,"message":"401","line":206,"column":8,"nodeType":"341","endLine":206,"endColumn":10,"suggestions":"406"},{"ruleId":"339","severity":1,"message":"403","line":214,"column":8,"nodeType":"341","endLine":214,"endColumn":28,"suggestions":"407"},{"ruleId":"339","severity":1,"message":"401","line":217,"column":7,"nodeType":"341","endLine":217,"endColumn":19,"suggestions":"408"},{"ruleId":"325","severity":1,"message":"366","line":1,"column":16,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"409","line":1,"column":27,"nodeType":"327","messageId":"328","endLine":1,"endColumn":35},{"ruleId":"325","severity":1,"message":"410","line":7,"column":12,"nodeType":"327","messageId":"328","endLine":7,"endColumn":21},{"ruleId":"325","severity":1,"message":"411","line":7,"column":23,"nodeType":"327","messageId":"328","endLine":7,"endColumn":35},{"ruleId":"325","severity":1,"message":"412","line":8,"column":9,"nodeType":"327","messageId":"328","endLine":8,"endColumn":20},"no-native-reassign",["413"],"no-negated-in-lhs",["414"],"no-unused-vars","'FirebaseContext' is defined but never used.","Identifier","unusedVar","'GIFTCARDS' is defined but never used.","'setUser' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'db', 'location.pathname', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["415"],"'Redirect' is defined but never used.","'BiBody' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'setOrder' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getImgSrcFromType'. Either include it or remove the dependency array.",["416"],"'setState' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'gcards' is assigned a value but never used.","'setGcards' is assigned a value but never used.","'setShipping' is assigned a value but never used.","'total' is assigned a value but never used.","'promise' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'card' and 'props.account'. Either include them or remove the dependency array.",["417"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["418"],"React Hook useEffect has a missing dependency: 'props.types'. Either include it or remove the dependency array. If 'setTypes' needs the current value of 'props.types', you can also switch to useReducer instead of useState and read 'props.types' in the reducer.",["419"],"'useEffect' is defined but never used.","'setImgSrc' is assigned a value but never used.","'setImgName' is assigned a value but never used.","'setTax' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getSum' and 'props.list'. Either include them or remove the dependency array. If 'setList' needs the current value of 'props.list', you can also switch to useReducer instead of useState and read 'props.list' in the reducer.",["420"],"React Hook useEffect has a missing dependency: 'getSum'. Either include it or remove the dependency array.",["421"],"React Hook useEffect has a missing dependency: 'props.list'. Either include it or remove the dependency array. If 'setList' needs the current value of 'props.list', you can also switch to useReducer instead of useState and read 'props.list' in the reducer.",["422"],"'setUserGcards' is assigned a value but never used.",["423"],"React Hook useEffect has missing dependencies: 'fetchDataFromFireStore' and 'props.curShipping'. Either include them or remove the dependency array.",["424"],"'setItemPerPage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getItemsForPage' and 'getTotalPageNumbers'. Either include them or remove the dependency array.",["425"],"React Hook useEffect has missing dependencies: 'getItemsForPage', 'getTotalPageNumbers', and 'props'. Either include them or remove the dependency array.",["426"],"React Hook useEffect has missing dependencies: 'getItemsForPage' and 'itemPerPage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurList' needs the current value of 'itemPerPage'.",["427"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'setid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'showModal'. Either include it or remove the dependency array.",["428"],"'setIdChosenDiv' is assigned a value but never used.","'setIdChangeDiv' is assigned a value but never used.","'checkPropTypes' is defined but never used.","'lastPage' is assigned a value but never used.","'setLastPage' is assigned a value but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'generatePageNo'. Either include it or remove the dependency array.",["429"],["430"],"React Hook useEffect has a missing dependency: 'handlePreProcessingCardListToComponent'. Either include it or remove the dependency array.",["431"],"React Hook useEffect has missing dependencies: 'db' and 'props.accountID'. Either include them or remove the dependency array.",["432"],["433"],["434"],["435"],["436"],"'useState' is defined but never used.","'orderList' is assigned a value but never used.","'setOrderList' is assigned a value but never used.","'cancelOrder' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"447","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"468","fix":"474"},{"desc":"470","fix":"475"},{"desc":"472","fix":"476"},"Update the dependencies array to be: [db, location.pathname, user]",{"range":"477","text":"478"},"Update the dependencies array to be: [curType, getImgSrcFromType]",{"range":"479","text":"480"},"Update the dependencies array to be: [card, props.account]",{"range":"481","text":"482"},"Update the dependencies array to be: [card, props]",{"range":"483","text":"484"},"Update the dependencies array to be: [props.types]",{"range":"485","text":"486"},"Update the dependencies array to be: [getSum, props.list]",{"range":"487","text":"488"},{"range":"489","text":"488"},"Update the dependencies array to be: [props.list]",{"range":"490","text":"491"},"Update the dependencies array to be: [currentShipping, props]",{"range":"492","text":"493"},"Update the dependencies array to be: [fetchDataFromFireStore, props.curShipping]",{"range":"494","text":"495"},"Update the dependencies array to be: [getItemsForPage, getTotalPageNumbers]",{"range":"496","text":"497"},"Update the dependencies array to be: [getItemsForPage, getTotalPageNumbers, props, props.dalist]",{"range":"498","text":"499"},"Update the dependencies array to be: [curPage, getItemsForPage, itemPerPage]",{"range":"500","text":"501"},"Update the dependencies array to be: [props.hide, showModal]",{"range":"502","text":"503"},"Update the dependencies array to be: [generatePageNo, props.cur]",{"range":"504","text":"505"},"Update the dependencies array to be: [generatePageNo, props.pageNo]",{"range":"506","text":"507"},"Update the dependencies array to be: [handlePreProcessingCardListToComponent]",{"range":"508","text":"509"},"Update the dependencies array to be: [confirmedAddedCard, db, props.accountID]",{"range":"510","text":"511"},"Update the dependencies array to be: [handlePreProcessingCardListToComponent, props.list]",{"range":"512","text":"513"},{"range":"514","text":"509"},{"range":"515","text":"511"},{"range":"516","text":"513"},[7402,7404],"[db, location.pathname, user]",[1679,1688],"[curType, getImgSrcFromType]",[3425,3427],"[card, props.account]",[3495,3501],"[card, props]",[313,315],"[props.types]",[1000,1002],"[getSum, props.list]",[1101,1113],[224,226],"[props.list]",[3305,3322],"[currentShipping, props]",[3890,3892],"[fetchDataFromFireStore, props.curShipping]",[1837,1839],"[getItemsForPage, getTotalPageNumbers]",[2131,2145],"[getItemsForPage, getTotalPageNumbers, props, props.dalist]",[2247,2256],"[curPage, getItemsForPage, itemPerPage]",[863,875],"[props.hide, showModal]",[1067,1078],"[generatePageNo, props.cur]",[1151,1165],"[generatePageNo, props.pageNo]",[8569,8571],"[handlePreProcessingCardListToComponent]",[8966,8986],"[confirmedAddedCard, db, props.accountID]",[9133,9145],"[handlePreProcessingCardListToComponent, props.list]",[8922,8924],[9319,9339],[9487,9499]]