[{"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\index.js":"1","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\reportWebVitals.js":"2","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\App\\index.js":"3","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\Routes.js":"4","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\index.js":"5","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchBar\\index.js":"6","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Navigator\\index.js":"7","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\index.js":"8","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Logo\\index.js":"9","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\NavBar\\index.js":"10","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\index.js":"11","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ShoppingCart\\index.js":"12","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\index.js":"13","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Shortcut\\index.js":"14","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\index.js":"15","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\index.js":"16","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\KartDetail\\index.js":"17","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ThankYou\\index.js":"18","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Cards\\index.js":"19","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\GCards\\index.js":"20","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SignInUpButtons\\index.js":"21","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Orders\\index.js":"22","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\SignUp\\index.js":"23","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\context.js":"24","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\firebase.js":"25","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\SignIn\\index.js":"26","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\index.js":"27","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\NavigationItems.js":"28","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\Orders.js":"29","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\OrderTypesRadio\\OrderTypeRadio.js":"30","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\GiftCards.js":"31","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\FeaturedItems\\index.js":"32","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\index.js":"33","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\Sorter\\index.js":"34","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\SearchForm\\index.js":"35","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ItemDetail\\index.js":"36","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\ResultDisplay\\index.js":"37","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ImageView\\index.js":"38","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\AwesomeForm\\index.js":"39","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Modal\\index.js":"40","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\index.js":"41","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\CollapseTab\\index.js":"42","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CardModal\\index.js":"43","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\HozBox\\index.js":"44","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ItemsSummary\\index.js":"45","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ShippingInfo\\index.js":"46","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\Payment\\index.js":"47","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\PriceTotal\\index.js":"48","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\BannerList.js":"49","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderWidget\\index.js":"50","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerBox\\index.js":"51","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Controller\\index.js":"52","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Pagination\\index.js":"53","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\index.js":"54","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\LinkCard\\index.js":"55","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Collaspable\\index.js":"56","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerItem\\index.js":"57","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationView\\index.js":"58","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationController\\index.js":"59","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CustomerService\\index.js":"60","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\ServicesItems.js":"61","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\FlexLinks\\index.js":"62","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\FlexLinks\\FlexLink\\index.js":"63","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\ProtectedRoute\\index.js":"64","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CustomerService\\Help\\index.js":"65","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CollapseTab\\index.js":"66","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Footer\\index.js":"67","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\index.js":"68","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\EmailJSInfo.js":"69","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\EmailForm\\index.js":"70","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\index.js":"71","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\ContactBox\\index.js":"72","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\MapLocation\\index.js":"73","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\MapLocation\\Marker\\index.js":"74","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\KartDetail\\SadBag\\index.js":"75","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourShipping\\index.js":"76","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourTotal\\index.js":"77","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourPayment\\index.js":"78","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourOrder\\index.js":"79","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\DisplayPanel\\index.js":"80","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\OptionPanel\\index.js":"81","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CustomSelect\\index.js":"82","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CoolTable\\index.js":"83","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CoolTable\\TableTitle\\index.js":"84","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CoolTable\\TableRow\\index.js":"85","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Orders\\NoOrder\\index.js":"86"},{"size":601,"mtime":1627689083331,"results":"87","hashOfConfig":"88"},{"size":375,"mtime":1627689050962,"results":"89","hashOfConfig":"88"},{"size":17035,"mtime":1628213880756,"results":"90","hashOfConfig":"88"},{"size":492,"mtime":1627689083251,"results":"91","hashOfConfig":"88"},{"size":129,"mtime":1627689083284,"results":"92","hashOfConfig":"88"},{"size":4733,"mtime":1627689050878,"results":"93","hashOfConfig":"88"},{"size":1338,"mtime":1628296333147,"results":"94","hashOfConfig":"88"},{"size":562,"mtime":1627689050843,"results":"95","hashOfConfig":"88"},{"size":499,"mtime":1611180209881,"results":"96","hashOfConfig":"88"},{"size":797,"mtime":1628034217702,"results":"97","hashOfConfig":"88"},{"size":1804,"mtime":1627689083319,"results":"98","hashOfConfig":"88"},{"size":5455,"mtime":1628202055350,"results":"99","hashOfConfig":"88"},{"size":3608,"mtime":1627689083295,"results":"100","hashOfConfig":"88"},{"size":1032,"mtime":1627693635189,"results":"101","hashOfConfig":"88"},{"size":1972,"mtime":1627700687980,"results":"102","hashOfConfig":"88"},{"size":1293,"mtime":1627689083304,"results":"103","hashOfConfig":"88"},{"size":2639,"mtime":1628295270124,"results":"104","hashOfConfig":"88"},{"size":1873,"mtime":1627689083322,"results":"105","hashOfConfig":"88"},{"size":14384,"mtime":1627689083252,"results":"106","hashOfConfig":"88"},{"size":13955,"mtime":1627689083255,"results":"107","hashOfConfig":"88"},{"size":532,"mtime":1627689083321,"results":"108","hashOfConfig":"88"},{"size":3413,"mtime":1627691875132,"results":"109","hashOfConfig":"88"},{"size":5745,"mtime":1627689083264,"results":"110","hashOfConfig":"88"},{"size":111,"mtime":1627689083283,"results":"111","hashOfConfig":"88"},{"size":511,"mtime":1627689083283,"results":"112","hashOfConfig":"88"},{"size":5152,"mtime":1627689083263,"results":"113","hashOfConfig":"88"},{"size":5226,"mtime":1628213947552,"results":"114","hashOfConfig":"88"},{"size":559,"mtime":1628295095153,"results":"115","hashOfConfig":"88"},{"size":12861,"mtime":1628033325299,"results":"116","hashOfConfig":"88"},{"size":1051,"mtime":1627689050852,"results":"117","hashOfConfig":"88"},{"size":418,"mtime":1627689083332,"results":"118","hashOfConfig":"88"},{"size":1243,"mtime":1628295159396,"results":"119","hashOfConfig":"88"},{"size":10383,"mtime":1627689083287,"results":"120","hashOfConfig":"88"},{"size":230,"mtime":1627689050882,"results":"121","hashOfConfig":"88"},{"size":4312,"mtime":1627689083318,"results":"122","hashOfConfig":"88"},{"size":913,"mtime":1627689050851,"results":"123","hashOfConfig":"88"},{"size":3092,"mtime":1627689083317,"results":"124","hashOfConfig":"88"},{"size":414,"mtime":1627689050850,"results":"125","hashOfConfig":"88"},{"size":364,"mtime":1627689083267,"results":"126","hashOfConfig":"88"},{"size":1863,"mtime":1628296035464,"results":"127","hashOfConfig":"88"},{"size":467,"mtime":1627689083260,"results":"128","hashOfConfig":"88"},{"size":1445,"mtime":1627689083259,"results":"129","hashOfConfig":"88"},{"size":487,"mtime":1613168144605,"results":"130","hashOfConfig":"88"},{"size":921,"mtime":1627689050876,"results":"131","hashOfConfig":"88"},{"size":1472,"mtime":1628292891357,"results":"132","hashOfConfig":"88"},{"size":10878,"mtime":1628297115145,"results":"133","hashOfConfig":"88"},{"size":14948,"mtime":1628297997713,"results":"134","hashOfConfig":"88"},{"size":3333,"mtime":1628296393784,"results":"135","hashOfConfig":"88"},{"size":930,"mtime":1627689050960,"results":"136","hashOfConfig":"88"},{"size":1548,"mtime":1627689050855,"results":"137","hashOfConfig":"88"},{"size":1196,"mtime":1627689050837,"results":"138","hashOfConfig":"88"},{"size":532,"mtime":1627689083286,"results":"139","hashOfConfig":"88"},{"size":973,"mtime":1627689050840,"results":"140","hashOfConfig":"88"},{"size":2989,"mtime":1627689083299,"results":"141","hashOfConfig":"88"},{"size":292,"mtime":1627689083260,"results":"142","hashOfConfig":"88"},{"size":1919,"mtime":1627689083307,"results":"143","hashOfConfig":"88"},{"size":1215,"mtime":1627689050838,"results":"144","hashOfConfig":"88"},{"size":678,"mtime":1627689050858,"results":"145","hashOfConfig":"88"},{"size":2132,"mtime":1627689083297,"results":"146","hashOfConfig":"88"},{"size":2032,"mtime":1628043203284,"results":"147","hashOfConfig":"88"},{"size":536,"mtime":1628202333739,"results":"148","hashOfConfig":"88"},{"size":639,"mtime":1628294968698,"results":"149","hashOfConfig":"88"},{"size":500,"mtime":1628042022826,"results":"150","hashOfConfig":"88"},{"size":533,"mtime":1627692768548,"results":"151","hashOfConfig":"88"},{"size":3120,"mtime":1627689083281,"results":"152","hashOfConfig":"88"},{"size":2066,"mtime":1627689083306,"results":"153","hashOfConfig":"88"},{"size":1989,"mtime":1627689083285,"results":"154","hashOfConfig":"88"},{"size":710,"mtime":1627689083280,"results":"155","hashOfConfig":"88"},{"size":118,"mtime":1627689083249,"results":"156","hashOfConfig":"88"},{"size":6138,"mtime":1627698810629,"results":"157","hashOfConfig":"88"},{"size":376,"mtime":1627689083278,"results":"158","hashOfConfig":"88"},{"size":1744,"mtime":1627689083275,"results":"159","hashOfConfig":"88"},{"size":1016,"mtime":1627689083276,"results":"160","hashOfConfig":"88"},{"size":657,"mtime":1627689083275,"results":"161","hashOfConfig":"88"},{"size":1852,"mtime":1627689083289,"results":"162","hashOfConfig":"88"},{"size":556,"mtime":1627705295320,"results":"163","hashOfConfig":"88"},{"size":342,"mtime":1627689083303,"results":"164","hashOfConfig":"88"},{"size":590,"mtime":1627689083300,"results":"165","hashOfConfig":"88"},{"size":853,"mtime":1627689083299,"results":"166","hashOfConfig":"88"},{"size":31090,"mtime":1627705154719,"results":"167","hashOfConfig":"88"},{"size":981,"mtime":1627693518940,"results":"168","hashOfConfig":"88"},{"size":2944,"mtime":1627689083312,"results":"169","hashOfConfig":"88"},{"size":1545,"mtime":1628294925969,"results":"170","hashOfConfig":"88"},{"size":376,"mtime":1627689083309,"results":"171","hashOfConfig":"88"},{"size":223,"mtime":1627689083308,"results":"172","hashOfConfig":"88"},{"size":1512,"mtime":1627689083257,"results":"173","hashOfConfig":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"178c7ws",{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"176"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"176"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"176"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"176"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"176"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"176"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"176"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"176"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"176"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"176"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"176"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"176"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"176"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"176"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"176"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"176"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"176"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"176"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"280"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"176"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"176"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"176"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"176"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"176"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"176"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"176"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"176"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"176"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"176"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"176"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"176"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"176"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"176"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"176"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"176"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\index.js",[],["383","384"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\reportWebVitals.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\App\\index.js",["385","386","387","388","389","390","391","392","393","394","395"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport Navigator from '../Navigator';\r\nimport Home from '../Home';\r\nimport NavBar from '../NavBar';\r\nimport SearchBar from '../SearchBar';\r\nimport { Route, Switch, useLocation, useHistory, Link} from 'react-router-dom';\r\nimport * as ROUTES from '../../Constants/Routes';\r\nimport SearchResult from '../SearchResult';\r\nimport OrderDetail from '../OrderDetail';\r\nimport ShoppingCart from '../ShoppingCart';\r\nimport KartDetail from '../KartDetail';\r\nimport CheckOut from '../CheckOut';\r\nimport PlaceOrder from '../PlaceOrder';\r\nimport ThankYou from \"../ThankYou\";\r\nimport Firebase from './../Firebase/';\r\nimport Shortcut from '../Account/Shortcut';\r\nimport Orders from '../Account/Orders';\r\nimport Account from '../Account';\r\nimport Cards from '../Account/Cards';\r\nimport GCards from '../Account/GCards'; \r\nimport './app.scss';\r\nimport SignInUpButtons from '../SignInUpButtons';\r\nimport SignIn from '../Account/SignIn';\r\nimport SignUp from '../Account/SignUp'; \r\nimport CustomerService from '../CustomerService';\r\nimport ProtectedRoute from '../Plugins/ProtectedRoute';\r\nimport Help from '../CustomerService/Help';\r\nimport Footer from '../Footer';\r\nimport ContactUs from '../ContactUs';\r\nimport 'overlayscrollbars/css/OverlayScrollbars.css';\r\nimport { OverlayScrollbarsComponent } from 'overlayscrollbars-react';\r\nimport OverlayScrollbars from 'overlayscrollbars';\r\n/*const PageComponents = {\r\n    Home: Home,\r\n    Order: Order,\r\n    Account: Account,\r\n    KartDetail: KartDetail,\r\n    CustomerService: CustomerService\r\n}\r\n/*const  LISTOFROUTES = NAVITEMS.ITEMS.map((item)=>{\r\n    const TagName = item.name.split(' ').join('')\r\n    if(item.name == \"Home\"){\r\n        return <Route key={item.name} value ={item.route} exact path = {item.route} component={Home}/>\r\n    } else {\r\n        return <Route key={item.name} value ={item.route} path = {item.route} component={Home}/>\r\n    }\r\n}\r\n);*/\r\nconst App = (props) =>  {\r\n        //const [user, setUser] = useState(\"\");\r\n        const [user, setUser] = useState(\"anhquang2605\");//set account here to test\r\n        const [pageName, setPageName] = useState('');\r\n        const [,setState] = useState();\r\n        const location = useLocation();\r\n        const [cartList, setCartList] = useState([]);\r\n        const [curCard, setCurCard] = useState();\r\n        const [curGCards, setCurGCards] = useState([]);\r\n        const [curShipping, setCurShipping] = useState(null);\r\n        const [curTotal, setCurTotal] = useState(0);\r\n        const [account, setAccount] = useState(null);\r\n        const [osRef , setOsRef] = useState();\r\n        const [refScrollForChild, setRefScrollForChild] = useState();\r\n        const history = useHistory();\r\n               //for testing purpose\r\n        //the date\r\n        const thisref = React.createRef();\r\n        let d = new Date();\r\n        //const firebasecontext =  useContext(FirebaseContext);\r\n        const db = Firebase.firestore();\r\n        //set user for app upon finish signing in\r\n        let setUserForApp = (u) => {\r\n            setUser(u)\r\n        }\r\n        //Signing out\r\n        let removeAccountFromApp = (e) => {\r\n            e.preventDefault();\r\n            setUser(\"\");\r\n            setAccount(null);\r\n            setCartList([]);\r\n            history.push(\"\");\r\n        }\r\n        //Ref to Check out component\r\n        let isInCart = (name, type) =>{\r\n            var i = 0;\r\n            var length = cartList.length;\r\n            for (i; i < length; i+=1){\r\n                var theItem = cartList[i] \r\n                if(theItem.name === name && theItem.type === type ){\r\n                    return {found: true, index: i};\r\n                }\r\n            }\r\n            return {found:false, index: 0};    \r\n        }\r\n        let addNewItemToUserCart = (account, item) => {\r\n            db.collection(\"accounts\").doc(account).update({\r\n                kart: Firebase.firestore.FieldValue.arrayUnion(item)\r\n            });\r\n        }\r\n        let removeItemFromUserCart = (account, item) => {\r\n            db.collection(\"accounts\").doc(account).update({\r\n                kart: Firebase.firestore.FieldValue.arrayRemove(item)\r\n            })\r\n        }\r\n        let addToCartList = (item) => {\r\n            let inCartSign = isInCart(item.name, item.type);\r\n            if (!inCartSign.found){\r\n                cartList.push(item);\r\n                if(account){\r\n                    addNewItemToUserCart(account.username, item);\r\n                }\r\n            } else {\r\n                var theItem = cartList[inCartSign.index];\r\n                if(account){\r\n                    removeItemFromUserCart(account.username, theItem);\r\n                }\r\n                theItem.quantity += parseInt(item.quantity);\r\n                if(account){\r\n                    addNewItemToUserCart(account.username, theItem)\r\n                }\r\n            }\r\n        }\r\n        let handleRerendering = () =>{\r\n            setState({});\r\n        }\r\n        let addToOrderAfterCheckOut = (tracking) => {\r\n            let proccessedOrders = cartList.map(item=>{\r\n                let day = d.getDate() + 2 + Math.ceil(Math.random()*7);\r\n                let month = d.getMonth() + 1;\r\n                let year = d.getFullYear();\r\n                //Is there a better way to this?\r\n                if (month === 1,3,5,7,8,10,12){\r\n                    if(day > 31){\r\n                        day = day - 31;\r\n                        month +=1;\r\n                    }\r\n                    if(month > 12){\r\n                        month = month - 12;\r\n                        year += 1;\r\n                    }\r\n                } else if( month === 2) {\r\n                    if(day > 28){\r\n                        day = day - 28;\r\n                        month +=1;\r\n                    }\r\n                } else {\r\n                    if(day > 30){\r\n                        day = day - 30;\r\n                        month +=1;\r\n                    }\r\n                }\r\n                return {\r\n                    ...item,\r\n                    arrival: month + \"-\" + day + \"-\" + year,\r\n                }              \r\n            })\r\n            let daOrder = {\r\n                trackingID: tracking,\r\n                orderList: proccessedOrders,\r\n                orderDay: d.getDate(),\r\n                orderMonth: d.getMonth() + 1,\r\n                orderYear: d.getFullYear(),\r\n                shippedTo: curShipping,\r\n                status: \"procesing\"\r\n            }\r\n            db.collection(\"accounts\").doc(account.username).update({\r\n                orders: Firebase.firestore.FieldValue.arrayUnion(daOrder)\r\n            });\r\n            //reset account so that order is updated after checking out, is there a better way?\r\n           reFetchAccount();\r\n        }\r\n        let removeFromCartList = (itemIndex) => {\r\n            if (account!= undefined){\r\n                removeItemFromUserCart(account.username, cartList[itemIndex]);\r\n            }\r\n            let newList = cartList.slice(0,itemIndex).concat(cartList.slice(itemIndex + 1, cartList.length));\r\n            setCartList(newList);\r\n        }\r\n        let handleChangeOfQuantity = (index,val) =>{\r\n            if (val === 0) removeFromCartList(index);\r\n            else  cartList[index].quantity = val;\r\n        }\r\n        //Set Gcard, card, and shipping for app from within checkout component\r\n        let getCardFromCheckout = (obj) =>{\r\n            setCurCard(obj);\r\n        }\r\n        let getGCardsFromCheckout = (arr) =>{\r\n            setCurGCards(arr);\r\n            \r\n        }\r\n        let getShippingFromCheckout = (obj) =>{\r\n            setCurShipping(obj);\r\n        }\r\n        let getTotalFromCheckout = (num) =>{\r\n            setCurTotal(num);\r\n        }\r\n        //flush the cart list when user hit place order\r\n        let flushCart = () => {\r\n            setCartList([]);\r\n            if(account!==null){\r\n                db.collection(\"accounts\").doc(account.username).update({\r\n                    kart: []\r\n                })\r\n            }\r\n        }\r\n        //for component that add, edit and delete their data\r\n        let primaryAsCurrentShipping = (shippingList) => {\r\n            for(let shipping of shippingList){\r\n                if(shipping.current === true){\r\n                    setCurShipping(shipping);\r\n                }\r\n            }\r\n        };\r\n        let reFetchAccount = () =>{\r\n            if(user !== \"\" && user !== undefined){\r\n                db.collection(\"accounts\").doc(user).onSnapshot((datas)=>{//use on Snap shot for real time data getting, else use get().then().\r\n                    //Using get()then() might return undefined for a real time data query\r\n                    //Set account and kart after accessing database is fine\r\n                    if (datas.exists){\r\n                        var account = datas.data();\r\n                        setAccount(account);\r\n                        setCartList(account.kart);\r\n                        primaryAsCurrentShipping(account.shippings);\r\n                    } else {\r\n                        console.log(\"no data receive please try again\");\r\n                    }\r\n                }) \r\n            }     \r\n        }\r\n        useEffect(() => {\r\n            if(user!==\"\"){//IF THERE IS USER\r\n                db.collection(\"accounts\").doc(user).get().then((datas)=>{\r\n                    //Set account and kart after accessing database is fine\r\n                    var account = datas.data();\r\n                    setAccount(account);\r\n                    setCartList(account.kart);\r\n                }) \r\n            } \r\n            setPageName(location.pathname);\r\n            setRefScrollForChild(thisref.current);\r\n        },[]);\r\n       /*  useEffect(()=>{\r\n            if (ref !== undefined && ref.current!==null){\r\n                setRefScrollForChild(ref);\r\n                console.log(ref);\r\n            }\r\n        },[ref]); */\r\n        useEffect(()=>{//keep track of paths\r\n            setPageName(location.pathname);\r\n        },[location]);\r\n        useEffect(()=>{\r\n            if(user!==\"\"){\r\n                db.collection(\"accounts\").doc(user).get().then((datas)=>{\r\n                    //Set account and kart after accessing database is fine\r\n                    var account = datas.data();\r\n                    setAccount(account);\r\n                    setCartList(account.kart);\r\n                    if(account.shippings && account.shippings.length > 0){\r\n                        let curShipping = account.shippings[0];\r\n                        for (let shipping of account.shippings){\r\n                            if (shipping.current === true) curShipping = shipping;\r\n                        }\r\n                        setCurShipping(curShipping);\r\n                    }\r\n                }) \r\n            }\r\n        },[user]);\r\n        return(\r\n            <OverlayScrollbarsComponent ref={thisref}   style={{ height: '100%' }}> \r\n            <div id=\"aqc\" className=\"commercial-AQC\">\r\n                <div className=\"content\">\r\n                <div className=\"top-header\">\r\n                    <h1 className=\"site-heading\"><Link to=\"/\">Commercial website AQC</Link></h1> \r\n                    {(pageName.search(\"result\")) === -1  && \r\n                    <SearchBar></SearchBar>}\r\n                </div>\r\n                {(pageName.search(\"sign-in\") === -1 && pageName.search(\"sign-up\") === -1) && \r\n                <Navigator osScrollBar = {refScrollForChild ? refScrollForChild : \"\"}>\r\n                    {/* <Logo href={ROUTES.HOME} src={'logo.png'}></Logo> */}\r\n                    <NavBar></NavBar>            \r\n                    {(JSON.stringify(account) !== JSON.stringify({}) && account !== null && account !== undefined) && \r\n                    <Shortcut username={account.nickname || account.username}></Shortcut>}\r\n                    <SignInUpButtons user={user} removeAccount={removeAccountFromApp}></SignInUpButtons>\r\n                </Navigator>}\r\n                {((pageName.search(\"/kart-detail\")!== 0) && (pageName.search(\"/checkout\")!== 0) && (pageName.search(\"/sign-up\")!== 0) && (pageName.search(\"/sign-in\")!== 0) ) && <ShoppingCart  reRendering={handleRerendering} cartList={cartList} removeItem={removeFromCartList}></ShoppingCart>}\r\n                <Switch location={location}>\r\n                    <Route  exact path = {ROUTES.HOME} component = {Home}/>\r\n                    <Route  path = {ROUTES.SEARCH_RESULT+\"/:name?/:type?/:spec?/:dis?\"} component = {SearchResult}/>\r\n                    <Route path = {ROUTES.ORDERS + \"/:id\"} render={(props) => (<OrderDetail {...props} addItem={addToCartList} reRendering={handleRerendering}></OrderDetail>)}></Route>\r\n                    <Route path = {ROUTES.KART_DETAIL} render={(props) => (<KartDetail {...props} list={cartList} removeItem={removeFromCartList} changeQuantity={handleChangeOfQuantity} rerenderer={handleRerendering}></KartDetail>)}></Route>\r\n                    <Route \r\n                        path = {ROUTES.CHECK_OUT} \r\n                        render = {(props) => (\r\n                            <CheckOut {...props}\r\n                                    reFetch={reFetchAccount}\r\n                                    osRef={refScrollForChild}\r\n                                    account={account}\r\n                                    curGCards={curGCards}  \r\n                                    curCard={curCard} \r\n                                    curShipping={curShipping}  \r\n                                    setShippingForApp={getShippingFromCheckout} \r\n                                    setCardForApp={getCardFromCheckout} \r\n                                    setGCardForApp={getGCardsFromCheckout} \r\n                                    setTotalForApp={getTotalFromCheckout}\r\n                                    list={cartList}>\r\n                                    \r\n                            </CheckOut>)}>\r\n                            </Route>\r\n                    <Route path = {ROUTES.PLACE_ORDER} \r\n                        render={(props) => (\r\n                            <PlaceOrder\r\n                                {...props} \r\n                                cartList={cartList}\r\n                                total={curTotal}\r\n                                shipping={curShipping}\r\n                                card={curCard}\r\n                                >\r\n                            </PlaceOrder>)}>\r\n                    </Route>\r\n                    <Route path = {ROUTES.THANK_YOU} render={(props)=>(\r\n                        <ThankYou {...props} account={account} flushCart={flushCart} addToOrderAfterCheckOut={addToOrderAfterCheckOut}>\r\n                        </ThankYou>\r\n                        )}></Route>\r\n                    {/* Account Routes  */}\r\n                    <ProtectedRoute path = {ROUTES.ACCOUNT + \"/:subpath?\"} user={user} account={account} component={\r\n                        <Account {...props} refetchAccount={reFetchAccount} account={account}>\r\n\r\n                        </Account>\r\n                    }>\r\n                    </ProtectedRoute>\r\n                  {/*   <ProtectedRoute path = {ROUTES.ACCOUNT + '/orders'} account={account} component ={\r\n                        account && account.orders ? <Orders {...props} ordersOfAccount={account.orders}></Orders> : <span className=\"no-order\">No order found</span>\r\n                    }></ProtectedRoute>\r\n                    <ProtectedRoute path = {ROUTES.ACCOUNT + '/cards'} account={account} component ={\r\n                        account && account.cards ? <Cards reFetch={reFetchAccount} {...props} accountID={account.username} list={account.cards}>\r\n                            \r\n                        </Cards> : \"\"\r\n                        }></ProtectedRoute>\r\n                    <ProtectedRoute path = {ROUTES.ACCOUNT + '/gcards'} account={account} component ={\r\n                        account && account.gcards? <GCards reFetch={reFetchAccount} {...props} accountID={account.username} list={account.gcards}></GCards> : \"\"\r\n                    }></ProtectedRoute> */}\r\n                    <Route path ={ROUTES.SIGN_IN} render={(props)=>(\r\n                            <SignIn {...props} setUserForApp = {setUserForApp}>\r\n\r\n                        </SignIn>\r\n                    )}/>\r\n                      <Route path ={ROUTES.SIGN_UP} component={SignUp}/>\r\n                    <Route exact path = {ROUTES.CUSTOMER} component={CustomerService}></Route>\r\n                    <Route path = {ROUTES.CUSTOMER + ROUTES.HELP  + \"/:section?/:sub?\"} component={Help}></Route>\r\n                    <Route path = {ROUTES.CONTACT_US} render={(props)=>(\r\n                        <ContactUs {...props} account={account}>\r\n                        </ContactUs>\r\n                    )}/>\r\n                </Switch>\r\n                </div>\r\n                <Footer></Footer>   \r\n                       \r\n            </div>\r\n            </OverlayScrollbarsComponent>\r\n        )\r\n} \r\n\r\nexport default App;","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\Routes.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchBar\\index.js",["396","397","398","399"],"import React from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport * as ROUTES from '../../Constants/Routes';\r\nimport './search-bar.scss';\r\nimport ORDERS from '../../model/Orders';\r\nimport {BsSearch} from 'react-icons/bs';\r\nimport { BiBody } from 'react-icons/bi';\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.refSearch = React.createRef();\r\n        this.state = {\r\n            searchQueue: '',\r\n            valid: false,\r\n            hintList: [],\r\n            fullList: [],\r\n            focused: false,\r\n            mouseOvered: false,\r\n        }\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.emptyField = this.emptyField.bind(this);\r\n        this.handleOnFocus = this.handleOnFocus.bind(this);\r\n        this.handleOnFocusOut = this.handleOnFocusOut.bind(this);\r\n        this.handleSearchClick = this.handleSearchClick.bind(this);\r\n        this.handleMouseOver = this.handleMouseOver.bind(this);\r\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    }\r\n    fetchItems = () => {//get list of items here\r\n        /* fetch(\"ORDERS.json\").then( res => res.text() ).then((res)=>{\r\n            var res = JSON.parse(res);\r\n            let newList = res.map((item) => {//only take their names\r\n                return item.name.toLowerCase();\r\n            })\r\n            this.setState({\r\n                fullList: newList\r\n            })\r\n        }); */ // somehow json error input keeps on popping up, might check to solve this later\r\n        \r\n        //Using direct ORDERS FROM models\r\n        let newList = ORDERS.map((item) => {//only take their names\r\n            return item.name.toLowerCase();\r\n        })\r\n        this.setState({\r\n            fullList: newList\r\n        })\r\n    }\r\n    handleOnChange(event){\r\n        this.setState(()=>({\r\n            searchQueue: event.target.value\r\n        }))\r\n        this.hintSearchName(event.target.value);\r\n    }\r\n    handleOnFocus(){\r\n        this.setState(()=>({\r\n            focused: true\r\n        }))\r\n    }\r\n    handleOnFocusOut(){\r\n        if(!this.state.mouseOvered){\r\n            this.setState(()=>({\r\n                focused: false \r\n              }))\r\n        }  \r\n    }\r\n    handleSearchClick(item){\r\n        \r\n        var promises = new Promise((resolve) => {\r\n            this.setState({\r\n            searchQueue: item})\r\n            resolve();//gotta put this here for resolve result else put refuse if no working, can obmit the refuse\r\n        }\r\n        );\r\n        promises.then(()=>{ //to make sure that the state is updated before trigger click\r\n            this.refSearch.current.click();\r\n        })\r\n    }\r\n    handleMouseOver(){\r\n        this.setState({\r\n            mouseOvered: true,\r\n        })\r\n    }\r\n    handleMouseLeave(){\r\n        this.setState({\r\n            mouseOvered: false,\r\n        })\r\n    }\r\n    hintSearchName(key){\r\n        let hints = [];\r\n        this.state.hintList = [];\r\n        this.state.fullList.forEach((iName)=>{\r\n            if(iName.search(key) >= 0){\r\n                hints.push(iName);\r\n            }\r\n        })\r\n        this.state.hintList = [...new Set(hints)];//ultilzing Set that consist of unique items, then tranform the set back to js array\r\n    }\r\n    emptyField = () => {\r\n        let search_bar_ele = document.getElementById(\"search_bar\");\r\n        let inputSearchField = search_bar_ele.children[0];\r\n        this.setState(()=>({\r\n            searchQueue: inputSearchField.value\r\n        }));\r\n        inputSearchField.value = \"\";\r\n    }\r\n    componentDidMount = () => {\r\n        if(this.state.fullList.length === 0 ){\r\n            this.fetchItems();\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <div onBlur={this.handleOnFocusOut} id=\"search_bar\">\r\n                <input type=\"text\" value={this.state.searchQueue} onFocus={this.handleOnFocus} onChange={this.handleOnChange}></input>\r\n                <Link ref={ this.refSearch} alt=\"Search\" to={ROUTES.SEARCH_RESULT + \"/\" + this.state.searchQueue} onClick={this.emptyField}><BsSearch></BsSearch></Link>\r\n                {this.state.hintList.length > 0 && this.state.focused && <div onMouseEnter={this.handleMouseOver} onMouseLeave={this.handleMouseLeave} className=\"hints\" >\r\n                    { this.state.hintList.map(item => {\r\n                        return(\r\n                            <span key={item} onClick={(e)=>{\r\n                                e.stopPropagation();\r\n                                this.handleSearchClick(item)}} className=\"hint-item\">{item}</span>\r\n                        )\r\n                    })}\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Navigator\\index.js",["400","401","402","403","404"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Logo\\index.js",[],["405","406"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\NavBar\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ShoppingCart\\index.js",["407","408","409"],"import {React, useState, useEffect, Fragment} from 'react';\r\nimport {IoBagCheckOutline} from 'react-icons/io5';\r\nimport {BsFillBagFill, BsArrowRightShort} from 'react-icons/bs';\r\nimport {VscClose} from 'react-icons/vsc';\r\nimport {FiShoppingCart} from 'react-icons/fi';\r\nimport {Link} from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport './shopping-cart.scss';\r\nimport {OverlayScrollbarsComponent} from 'overlayscrollbars-react';\r\nconst ShoppingCart = (props) => {\r\n    const [list,setList] = useState(props.cartList);\r\n    const [total,setTotal] = useState(0);\r\n    let getTotal = () =>{\r\n        let sumOfPrice = 0;\r\n        for (let item of list){\r\n            let sum = item.quantity * item.price;\r\n             sumOfPrice += sum;\r\n        }\r\n        setTotal(sumOfPrice);\r\n    }\r\n    let JQueryCode = () => {\r\n        let $closeBtn = $('.close-btn');\r\n        let $shoppingCartMini = $('#shopping_cart_mini');\r\n        let $shoppingCartContainer = $('#shopping_cart_container');\r\n        let $shoppingCartContainerWidth = $shoppingCartContainer.outerWidth(true);\r\n        let $shoppingCartContainerOffSet = $shoppingCartContainer.offset().left;\r\n        let $window = $(window);\r\n        $closeBtn.on(\"click\", (e) => {\r\n            e.stopPropagation();\r\n            $shoppingCartContainer.animate({left: $shoppingCartContainerOffSet += (($shoppingCartContainerWidth*105)/100)}\r\n            ,200\r\n            ,\"swing\"\r\n            ,()=>{\r\n                $shoppingCartMini.show();\r\n                $shoppingCartContainer.removeAttr(\"style\");\r\n            });\r\n        });\r\n        $(document).on(\"click\", (e) => {\r\n            let $cartLeftOffset = $shoppingCartContainer.offset().left;\r\n            let documentCurWidth = document.body.clientWidth;  \r\n            if (!$(e.target).closest(\"#shopping_cart_container\").length && documentCurWidth - $cartLeftOffset >= 0){\r\n                e.stopPropagation();\r\n                $shoppingCartContainer.animate({left: $shoppingCartContainerOffSet += (($shoppingCartContainerWidth*105)/100)}\r\n                ,200\r\n                ,\"swing\"\r\n                ,()=>{\r\n                    $shoppingCartMini.show();\r\n                    $shoppingCartContainer.removeAttr(\"style\");\r\n                });\r\n            } \r\n        })\r\n        $shoppingCartMini.on(\"click\", (e) => {\r\n            e.stopPropagation();\r\n            $shoppingCartContainer.animate({left: $shoppingCartContainerOffSet -= (($shoppingCartContainerWidth*105)/100)},200);\r\n            $shoppingCartMini.hide();\r\n        });\r\n        $window.on(\"resize\",function(){\r\n            $shoppingCartContainerWidth = $shoppingCartContainer.outerWidth(true);\r\n            $shoppingCartContainerOffSet = $shoppingCartContainer.position().left;\r\n            if(!$shoppingCartMini.is(\":visible\")){\r\n                $shoppingCartContainer.removeAttr(\"style\");\r\n                $shoppingCartContainer.css({\r\n                    \"right\": \"0\" \r\n                 });\r\n            };\r\n        })\r\n    }\r\n    let getTotalQuantity = () => {\r\n        var quantity = 0;\r\n        list.forEach((item) => {\r\n            quantity += parseInt(item.quantity);\r\n        })\r\n        return quantity\r\n    }\r\n    useEffect(()=>{\r\n        JQueryCode();\r\n    },[])\r\n    useEffect(()=>{\r\n        setList(props.cartList);\r\n    },[props.cartList]);\r\n    useEffect(() => {\r\n        getTotal();\r\n    }, [list]);\r\n    return (\r\n        <div id=\"shopping_cart_container\">\r\n             <div id=\"shopping_cart_mini\">\r\n                <BsFillBagFill></BsFillBagFill>\r\n                <span className=\"item-no-mini-cart\">{getTotalQuantity()}</span>        \r\n             </div>\r\n             <div className=\"close-btn\">\r\n                <BsArrowRightShort></BsArrowRightShort>\r\n            </div>\r\n            \r\n            <div id=\"shopping_cart\">\r\n                <h6>Your Cart</h6>\r\n                { list.length > 0? (\r\n                <Fragment>\r\n                <OverlayScrollbarsComponent  style={{ maxHeight: '270px' }}>\r\n                <table key={props.cartList}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th></th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {list.map((item,index) => {\r\n                        return(\r\n                        <tr key={index}>\r\n                            <td><img className=\"kart-item-img\" src={require(\"./../../images/\" + item.id + \"-\" + item.type + \".jpg\")}></img></td>\r\n                            <td>{item.type + \" \" + item.name}</td>\r\n                            <td>{item.quantity}</td>\r\n                        \r\n                        </tr>\r\n                        )\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n                </OverlayScrollbarsComponent>\r\n                <div className=\"cart-total\">Subtotal <b>${total}</b></div>\r\n                </Fragment>\r\n                ) : \"No item\" }\r\n            </div>\r\n          \r\n            {(list.length>0) && <div className=\"button-group\"> <Link className=\"cart-check-out-btn btn\" to=\"/checkout\" onClick={()=>{}}><IoBagCheckOutline></IoBagCheckOutline>Check out</Link> <Link className=\"btn kart-detail-btn\" to=\"/kart-detail\"><FiShoppingCart></FiShoppingCart> View kart</Link></div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShoppingCart;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\index.js",["410","411"],"import {React, useEffect, useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport ImageView from './ImageView';\r\nimport ItemDetail from './ItemDetail';\r\nimport OrderTypeRadio from './OrderTypesRadio/OrderTypeRadio';\r\nimport ORDERS from '../../model/Orders';\r\nimport './order-detail.scss';\r\nconst OrderDetail = (props) => {\r\n    const history = useHistory();\r\n    let idFromParams = props.match.params.id - 1;\r\n    let theOrder = ORDERS[idFromParams];\r\n    let getImgSrcFromType = (type) =>{\r\n        return order.id + \"-\" + type + \".jpg\";\r\n    }\r\n    const [order, setOrder] = useState(theOrder);\r\n    const [curType, setCurType] = useState(order.types[0]);\r\n    const [curImg, setCurImg] = useState(getImgSrcFromType(order.types[0]));\r\n    let [quantityInput,setQuantityInput] = useState(1);\r\n    //handler to send to order type radio so that it can update the current type for order detail component\r\n    let upDateCurType = (daType) =>{\r\n        setCurType(daType);\r\n    }\r\n    //update Quanity Input to add to cart\r\n    let handleQuantityInput = (e) =>{\r\n        setQuantityInput(parseInt(e.target.value));\r\n    }\r\n    //reset quantity when switch between types\r\n    let resetQInput = () => {\r\n        setQuantityInput(1);\r\n    }\r\n    //Add Item to cart then trigger route change to check out\r\n    let handleBuyNow = (obj) => {\r\n       var promise = new Promise(resolve => {\r\n        props.addItem(obj);\r\n        resolve();\r\n       }) \r\n        promise.then(()=>{\r\n            history.push(\"/checkout\");\r\n        })\r\n    }\r\n    //watch for curtype change then update img src \r\n    useEffect(()=>{\r\n        setCurImg(getImgSrcFromType(curType));\r\n    }, [curType]);\r\n    \r\n    if (order == null){\r\n        return \"Loading....\";\r\n    }\r\n    return (\r\n        <div id=\"order_detail\">\r\n            <ImageView key={curImg} imgSrc={curImg} imgName={curType + \" \" + order.name.toLowerCase()} ></ImageView>\r\n            <div className=\"detail-container\">\r\n                <ItemDetail daOrder={order}></ItemDetail>\r\n                <OrderTypeRadio resetQInput={resetQInput} upDateCurType={upDateCurType} types={order.types}></OrderTypeRadio>\r\n                <span className=\"quantity-selector-group\">\r\n                    <label htmlFor=\"quantity\">Quantity</label>\r\n                    <input type=\"number\" value={quantityInput} min={1} max={order.quantity} onChange={handleQuantityInput}></input>\r\n                </span>\r\n                <div className=\"payment-proceed-btn-group\">\r\n                    <button onClick={()=>{\r\n                        props.addItem({\r\n                            name: order.name,\r\n                            quantity: parseInt(quantityInput),\r\n                            id: order.id,\r\n                            price: order.price,\r\n                            type: curType,\r\n                        })\r\n                        props.reRendering();\r\n                    }} disabled={order.quantity <= 0}>Add to Cart</button>\r\n                    <button className=\"buy-now-order-detail-btn\" onClick={()=> {\r\n                        handleBuyNow({\r\n                            name: order.name,\r\n                            quantity: parseInt(quantityInput),\r\n                            id: order.id,\r\n                            price: order.price,\r\n                            type: curType,\r\n                        })}\r\n                        } disabled={order.quantity <= 0}>\r\n                        Buy Now\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderDetail;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Shortcut\\index.js",["412"],"import React, {useEffect} from 'react';\r\nimport {IoIosArrowDropdownCircle} from \"react-icons/io\";\r\nimport {Link} from 'react-router-dom';\r\nimport './shortcut.scss';\r\nconst Shortcut = (props) => {\r\n    return (\r\n        <div className=\"account-shortcut\">\r\n            <div className=\"mini-information\">\r\n                <span className=\"hello-user\">Hello {props.username}</span>\r\n                <span className=\"more-detail-btn\"><IoIosArrowDropdownCircle></IoIosArrowDropdownCircle></span>\r\n            </div>\r\n            <div className=\"dropdown-account-nav\" id=\"drop-down-account-detail\">\r\n                <ul>\r\n                    <li><Link to=\"/account/information\">Account info</Link></li>\r\n                    <li><Link to=\"/account/orders\">Your Orders</Link></li>\r\n                    <li><Link to=\"/account/payments\">Your Payment</Link></li>\r\n                    <li><Link to=\"/account/payments\">Your Gift Cards</Link></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Shortcut;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\index.js",["413","414"],"import React ,{useEffect, useState} from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './account.scss';\r\nimport Firebase from './../Firebase';\r\n\r\nimport DisplayPanel from './DisplayPanel';\r\nimport OptionPanel from './OptionPanel';\r\nconst Account = (props) => {\r\n    const db = Firebase.firestore();\r\n    const {subpath} = useParams();\r\n    const [optionItems, setOptionItems] = useState();\r\n    const [currentOption, setCurrentOption] = useState();\r\n    let getOptionItems = () =>{\r\n        db.collection(\"account-side-panel\").get().then((response)=>{\r\n            let daList = [];\r\n            response.forEach((doc)=>{\r\n                daList.push(doc.data());\r\n            });\r\n            setOptionItems(daList);\r\n        })\r\n    }\r\n    let setCurrentOptionForAccount = (option) =>{\r\n        setCurrentOption(option);\r\n    }\r\n    useEffect(() => {\r\n        if(subpath){\r\n            getOptionItems();\r\n            setCurrentOption(subpath);\r\n        } else {\r\n            getOptionItems();\r\n            if(optionItems && currentOption === undefined){\r\n                setCurrentOption(optionItems[0].name);\r\n            }\r\n        }\r\n        \r\n      \r\n    }, []);\r\n    useEffect(() => {\r\n        if(subpath !== currentOption){\r\n            setCurrentOption(subpath);\r\n        }   \r\n    }, [subpath]);\r\n/*     useEffect(() => {\r\n        if(retrievedItemFromFirestore.length !== 0){\r\n            setOptionItems(retrievedItemFromFirestore);\r\n        }\r\n    }, [retrievedItemFromFirestore]); */\r\n    return (\r\n        <div className=\"account\">\r\n            <h4>Account Information</h4>\r\n           {optionItems ? <OptionPanel setCurrent={setCurrentOptionForAccount} list={optionItems} current={currentOption}></OptionPanel> : \"\"}\r\n            {currentOption && <DisplayPanel reFetch={props.refetchAccount} account = {props.account} current={currentOption}>\r\n\r\n            </DisplayPanel>}\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Account;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\KartDetail\\index.js",["415","416"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ThankYou\\index.js",["417","418"],"import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {GiPartyPopper} from 'react-icons/gi';\r\nimport \"./thank-you.scss\";\r\nclass ThankYou extends Component {\r\n    constructor(props){\r\n     super(props);\r\n     this.state = {\r\n         randomizedOrderTracking: \"\",\r\n     }       \r\n    }\r\n    generateRanDomMaxChar = (max) =>{\r\n        const maxChar = max;\r\n        let charList=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'];\r\n        let charListLength = charList.length;\r\n        let listOfChar = [];\r\n        let i = 0;\r\n        for (i; i<maxChar; i+=1){\r\n            let randomNo = Math.floor(Math.random()*charListLength);\r\n            listOfChar.push(charList[randomNo]);\r\n        }\r\n        return listOfChar.toString().replaceAll(',',\"\").toUpperCase();\r\n    }\r\n    componentDidMount = () => {\r\n       this.state.randomizedOrderTracking  = this.generateRanDomMaxChar(15);   \r\n       let promise = new Promise((resolve)=>{\r\n        if(this.props.account){\r\n            this.props.addToOrderAfterCheckOut(this.state.randomizedOrderTracking);\r\n        }\r\n        resolve();\r\n        }).then(()=>{\r\n            this.props.flushCart();\r\n       })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"thank_you\">\r\n                <div className=\"thank_you_headline\"><GiPartyPopper></GiPartyPopper><span>Thank You</span><GiPartyPopper></GiPartyPopper></div> \r\n                <div>\r\n                    Here is the tracking number for your Orders: \r\n                    <span className=\"tracking-number\">{this.state.randomizedOrderTracking}</span>\r\n                </div>\r\n                <Link className=\"continue-shop\" to=\"/\">Continue Shopping</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ThankYou;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Cards\\index.js",["419","420","421"],"import React, {useState,useEffect, useRef} from 'react';\r\nimport CollapseTab from '../Plugins/CollapseTab';\r\nimport Modal from '../../Plugins/Modal';\r\nimport Firebase from '../../Firebase';\r\nimport './cards.scss';\r\nconst Cards = (props) => {\r\n    //List of random state to generate when add a new card, as if the information is retrieved from the bank the card from\r\n    const randomCities = [\"San jose\", \"San Frans\", \"Sunny vale\"];\r\n    const randomStates = [\"CA\", \"AZ\", \"NY\"];\r\n    const randomZips = [\"97888\",\"99999\",\"11100\"];\r\n    const randomTypes = [\"visa\",\"master\"];\r\n    const INITIALCARDFORM = {//empty object used to initialize form for adding card\r\n        name: \"Newly added\",\r\n        owner: \"\",\r\n        \"card number\": \"\",\r\n        \"exp month\": 0,\r\n        \"exp year\": 0,\r\n        \"billing address\": \"Newly added\" + (Math.round(Math.random()*99)),\r\n        \"billing city\": randomCities[Math.floor(Math.random()*3)],\r\n        \"billing state\": randomStates[Math.floor(Math.random()*3)],\r\n        \"billing zip\": randomZips[Math.floor(Math.random()*3)],\r\n        type: randomTypes[Math.floor(Math.random()*2)],\r\n        id: 0,\r\n    }\r\n    const [prepList, setPrepList] = useState([]);\r\n    const [addingCardFromForm, setAddingCardFromForm] = useState({...INITIALCARDFORM});\r\n    const [deletingCard, setDeletingCard] = useState({});\r\n    const [confirmedAddedCard, setConfirmedAddedCard] = useState({});\r\n    const [beforeEditedCard, setBeforeEditedCard] = useState({});//To remove in the fire store\r\n    const [beingEdittedCard, setBeingEdittedCard] = useState({});//To add to the fire store to replace the removed one\r\n    //reference to the modal that is exposed with there showModal and hideModal methods.\r\n    const refForAddCardModal = useRef({});\r\n    const refForRemoveCardModal = useRef({});\r\n    const refForEditCardModal = useRef({});\r\n    //Firebase 's firestore \r\n    const db = Firebase.firestore();\r\n    \r\n    let handlePreProcessingCardListToComponent = () => {//Transform the provided cards list from props to title and content props that is later used by collapse tab component\r\n        if(props.list){\r\n        return props.list.map((item,index)=>{\r\n            return {\r\n                title: //Title part\r\n                <React.Fragment>\r\n                    <span className=\"card-thumb\"><img alt={item.type} src={require(\"./../../../images/Cards/\" + item.type + \".jpg\")}></img></span>\r\n                    <span className=\"card-mini-info\"> <span className=\"card-title\"><span className=\"card-type\">{item.type}</span>  {item.name}</span> <span className=\"card-number\">Ending in {item[\"card number\"].slice(item[\"card number\"].length - 4)}</span></span>\r\n                    <span>{item[\"exp month\"]} / {item[\"exp year\"]}</span>\r\n                </React.Fragment>,\r\n                content: //Content part\r\n                <React.Fragment>\r\n                    <div>\r\n                        <h5>Name on card</h5>\r\n                        <span>{item.owner}</span>\r\n                    </div>\r\n                    <div>\r\n                        <h5>Billing Address</h5>\r\n                        <div>\r\n                            <span>{item[\"billing address\"]}</span>\r\n                            <span>, {item[\"billing city\"]}</span>\r\n                            <span>, {item[\"billing state\"]}</span>\r\n                            <span>, {item[\"billing zip\"]}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-edit-remove\">\r\n                        <button onClick={(e)=>{\r\n                            e.stopPropagation();\r\n                            handleClickEditCardButton(item,index)}}>\r\n                            <span class=\"material-icons\">edit</span>\r\n                            Edit\r\n                        </button>\r\n                        <button onClick={()=>{handleClickDeleteCardButton(item)}}>\r\n                            <span class=\"material-icons\">delete_forever</span>\r\n                            Delete\r\n                        </button>\r\n                    </div>\r\n                </React.Fragment>\r\n            }\r\n            })\r\n        }\r\n    }\r\n    //Adding card to account\r\n    let handleClickingAddCard = () => {\r\n        refForAddCardModal.current.showModal();\r\n    }\r\n    let handleAddCardToAccount = () =>{ \r\n        let daCard = {...addingCardFromForm};\r\n        daCard.id = props.list.length;\r\n        let promise = new Promise((resolve,reject)=>{\r\n            setConfirmedAddedCard(daCard);//Set the card to buffer before updating\r\n            resolve(\"added confirmation\");\r\n        })\r\n        promise.then((result)=>{//reset the buffer, close the modal\r\n            if (result === \"added confirmation\"){\r\n                setAddingCardFromForm({...INITIALCARDFORM});\r\n                refForAddCardModal.current.hideModal();\r\n                //!important to re update the account so that the cards list will be upto date\r\n                props.reFetch();\r\n            } else {\r\n                console.log(\"cannot add\");\r\n            }\r\n        });\r\n    }\r\n        //Handling adding field to card in form modal\r\n    let handleAddingOwnerToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            owner: e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingCardNumberToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"card number\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpMonthToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpYearToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp year\": e.target.value,\r\n        }))\r\n    }\r\n    //Handling deleting card\r\n    let handleClickDeleteCardButton = (card) => {\r\n        setDeletingCard(card);\r\n        refForRemoveCardModal.current.showModal();\r\n    } \r\n     let handleDeleteCard = () => {\r\n        let daCard = {...deletingCard};\r\n        let promise = new Promise((resolve,reject)=>{\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                cards: Firebase.firestore.FieldValue.arrayRemove(daCard)\r\n            });\r\n            resolve(); \r\n        });\r\n        promise.then(()=>{     \r\n            props.reFetch();\r\n            refForRemoveCardModal.current.hideModal();\r\n        });\r\n    }\r\n    //Handling Editing \r\n    let handleClickEditCardButton = (card,index) => {\r\n        setBeingEdittedCard(card);\r\n        setBeforeEditedCard(card);\r\n        refForEditCardModal.current.showModal();\r\n    }\r\n        //Handling editing form\r\n    let handleOwnerChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            owner: e.target.value\r\n        }));\r\n    }\r\n    let handleExpMonthChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value\r\n        }))\r\n    }\r\n    let handleExpYearChangeEditing = (e) => {\r\n        setBeingEdittedCard((prevState) => ({\r\n            ...prevState,\r\n            \"exp year\": e.target.value\r\n        }))\r\n    }\r\n        //When user pressed confirmed\r\n    let handleEditConfirmation = () =>{\r\n        let daCard = {...beingEdittedCard};//To be added\r\n        let daOrignial = {...beforeEditedCard};//To be removed, the original\r\n        if (JSON.stringify(daCard) !== JSON.stringify(daOrignial)){//If there is difference\r\n           let promise = new Promise((resolve,reject)=>{//First remove the original\r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    cards: Firebase.firestore.FieldValue.arrayRemove(daOrignial)\r\n                });\r\n                resolve(); \r\n            });\r\n            promise.then(()=>{//Then add the updated version to replace the removed one     \r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    cards: Firebase.firestore.FieldValue.arrayUnion(daCard)\r\n                });\r\n                props.reFetch();\r\n                refForEditCardModal.current.hideModal();\r\n            }); \r\n    /*         let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.get().then((snapShot)=>{\r\n                let daCardsOld = snapShot.data().cards;\r\n                let daCardsNew = snapShot.data().cards;\r\n                daCardsNew[currentIndexOfEdited] = daCard;\r\n                for (var i = 0; i < daCardsNew.length; i+=1){\r\n                    accountDoc.update({\r\n                        cards: Firebase.firestore.FieldValue.arrayUnion(daCardsNew[i])\r\n                    });\r\n                }\r\n                for (var i = 0; i < daCardsOld.length; i+=1){\r\n                    accountDoc.update({\r\n                        cards: Firebase.firestore.FieldValue.arrayRemove(daCardsOld[i])\r\n                    });\r\n                }\r\n\r\n            }).then(()=>{\r\n                refForEditCardModal.current.hideModal();\r\n            }); */\r\n        }else{//no difference, simply close the box\r\n            refForEditCardModal.current.hideModal();\r\n        }\r\n    }\r\n\r\n \r\n    useEffect(() => {//preping item and markup to provide the collapse Tab\r\n        setPrepList(handlePreProcessingCardListToComponent());\r\n    }, []);\r\n    useEffect(() => {//When confirmedAddedCard is update through the card adding method\r\n        if(JSON.stringify(confirmedAddedCard)!== JSON.stringify({})){\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                cards: Firebase.firestore.FieldValue.arrayUnion(confirmedAddedCard)\r\n            });\r\n        }\r\n    }, [confirmedAddedCard]);\r\n    useEffect(()=>{//rerender Cards component whenever new card is added\r\n        setPrepList(handlePreProcessingCardListToComponent());\r\n    },[props.list])\r\n    return (\r\n        <div className=\"user-cards-manament payment-section\">\r\n            <h5 className=\"panel-title\">Payments</h5>\r\n            <button className=\"add-new-card\" onClick={handleClickingAddCard}><span class=\"material-icons\">add</span>Add a new card</button>\r\n            {props.list.length > 0 ?\r\n            <div className=\"title-for-card-list\">\r\n                <span className=\"card-name tab-head\">Your Cards</span>\r\n                <span className=\"card-exp tab-head\">Expires</span>\r\n            </div> : \r\n            <div className=\"no-card-yet\">\r\n                You have no card yet, try adding more\r\n            </div>\r\n            }\r\n            {prepList && <CollapseTab list={prepList}>\r\n            </CollapseTab>}\r\n            <Modal hasTitle={true} ref={refForAddCardModal} name=\"add-card-for-account\">\r\n                    <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name on Card</legend>\r\n                            <input type=\"text\" onChange={handleAddingOwnerToCardForm} value={addingCardFromForm.owner} placeholder=\"Enter Name on Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Card Number </legend>\r\n                            <input type=\"text\" onChange={handleAddingCardNumberToCardForm} value={addingCardFromForm[\"card number\"]} placeholder=\"Enter Card Number\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleAddingExpMonthToCardForm} type=\"number\" value={addingCardFromForm[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleAddingExpYearToCardForm} type=\"number\" value={addingCardFromForm[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleAddCardToAccount}>Add Card</div>\r\n                    </div>\r\n            </Modal>\r\n            <Modal ref={refForRemoveCardModal} name=\"remove-card-confirm\" className=\"remove-card\">\r\n                {deletingCard !== {} && <div>Are you sure you want to remove <b>{deletingCard.type}</b> card ending in {deletingCard[\"card number\"] ? deletingCard[\"card number\"].slice(deletingCard[\"card number\"].length - 4) : \"\"} ?</div>}\r\n                <button onClick={handleDeleteCard}>Confirm</button> \r\n                <button onClick={refForRemoveCardModal.current.hideModal}>Cancel</button> \r\n            </Modal>\r\n            <Modal hasTitle={true} ref={refForEditCardModal} name=\"edit-card-for-account\">\r\n            {beingEdittedCard!==undefined && <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            Card type, ending in {beingEdittedCard[\"card number\"] === undefined ? \"\" : beingEdittedCard[\"card number\"]}\r\n                        </span>\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name on Card</legend>\r\n                            <input type=\"text\" onChange={handleOwnerChangeEditing} value={beingEdittedCard.owner} placeholder=\"Enter Name on Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleExpMonthChangeEditing} type=\"number\" value={beingEdittedCard[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleExpYearChangeEditing} type=\"number\" value={beingEdittedCard[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleEditConfirmation}>Confirm edit</div>\r\n                    </div>}\r\n            </Modal>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\GCards\\index.js",["422","423","424","425","426"],"import React, {useState,useEffect, useRef} from 'react';\r\nimport CollapseTab from '../Plugins/CollapseTab';\r\nimport Modal from '../../Plugins/Modal';\r\nimport Firebase from '../../Firebase';\r\nimport './gcards.scss';\r\n\r\nconst GCards = (props) => {\r\n    //List of random state to generate when add a new card, as if the information is retrieved from the bank the card from\r\n    const randomTypes = [\"debit\",\"discount\"];\r\n    const INITIALCARDFORM = {//empty object used to initialize form for adding card\r\n        name: \"Newly added gcard\",\r\n        \"exp month\": 0,\r\n        \"exp year\": 0,\r\n        \"id\": randomTypes[Math.floor(Math.random()*2)] + Math.floor(Math.random()*99),\r\n        type: randomTypes[Math.floor(Math.random()*2)],\r\n        id: 0,\r\n    }\r\n    const [prepList, setPrepList] = useState([]);\r\n    const [addingCardFromForm, setAddingCardFromForm] = useState({...INITIALCARDFORM});\r\n    const [deletingCard, setDeletingCard] = useState({});\r\n    const [confirmedAddedCard, setConfirmedAddedCard] = useState({});\r\n    const [beforeEditedCard, setBeforeEditedCard] = useState({});//To remove in the fire store\r\n    const [beingEdittedCard, setBeingEdittedCard] = useState({});//To add to the fire store to replace the removed one\r\n    //reference to the modal that is exposed with there showModal and hideModal methods.\r\n    const refForAddCardModal = useRef({});\r\n    const refForRemoveCardModal = useRef({});\r\n    const refForEditCardModal = useRef({});\r\n    //Firebase 's firestore \r\n    const db = Firebase.firestore();\r\n    \r\n    let handlePreProcessingCardListToComponent = () => {//Transform the provided gift cards list from props to title and content props that is later used by collapse tab component\r\n        if(props.list){\r\n        return props.list.map((item,index)=>{\r\n            return {\r\n                title: //Title part\r\n                <React.Fragment>\r\n                    <span className=\"card-thumb\"><img alt={item.type} src={require(\"./../../../images/Cards/\" + item.type + \".jpg\")}></img></span>\r\n                    <span className=\"card-mini-info\"><span className=\"card-type\">{item.type[0].toUpperCase() + item.type.slice(1)}</span> {item.name}</span>\r\n                    <span>{item[\"exp month\"]} / {item[\"exp year\"]}</span>\r\n                </React.Fragment>,\r\n                content: //Content part\r\n                <React.Fragment>\r\n                    <div>\r\n                        <h5>Gift card name</h5>\r\n                        <span>{item.name}</span>\r\n                    </div>\r\n                    <div>\r\n                        <h5>{item.type === \"debit\"? \"Amount($): \" : \"Discount(%): \"} <span>{item.amount}</span></h5>\r\n                    </div>\r\n                    <div className=\"card-edit-remove\">\r\n                        <button onClick={(e)=>{\r\n                            e.stopPropagation();\r\n                            handleClickEditCardButton(item,index)}}> <span class=\"material-icons\">edit</span>Edit</button>\r\n                        <button onClick={()=>{handleClickDeleteCardButton(item)}}><span class=\"material-icons\">delete_forever</span>Delete</button>\r\n                    </div>\r\n                </React.Fragment>\r\n            }\r\n            })\r\n        }\r\n    }\r\n    //Adding card to account\r\n    let handleClickingAddCard = () => {\r\n        refForAddCardModal.current.showModal();\r\n    }\r\n    let handleAddCardToAccount = () =>{ \r\n        let daCard = {...addingCardFromForm};\r\n        daCard.id = props.list.length;\r\n        let promise = new Promise((resolve,reject)=>{\r\n            setConfirmedAddedCard(daCard);//Set the card to buffer before updating\r\n            resolve(\"added confirmation\");\r\n        })\r\n        promise.then((result)=>{//reset the buffer, close the modal\r\n            if (result === \"added confirmation\"){\r\n                setAddingCardFromForm({...INITIALCARDFORM});\r\n                refForAddCardModal.current.hideModal();\r\n                //!important to re update the account so that the cards list will be upto date\r\n                props.reFetch();\r\n            } else {\r\n                console.log(\"cannot add\");\r\n            }\r\n        });\r\n    }\r\n        //Handling adding field to card in form modal\r\n    let handleAddingNameToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            name: e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpMonthToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingExpYearToCardForm = (e) => {\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            \"exp year\": e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingTypeToCardForm = (e) =>{\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            type: e.target.value,\r\n        }))\r\n    }\r\n    let handleAddingAmountToCardForm = (e) =>{\r\n        setAddingCardFromForm((prevState)=>({\r\n            ...prevState,\r\n            amount: e.target.value,\r\n        }))\r\n    }\r\n    //Handling deleting card\r\n    let handleClickDeleteCardButton = (card) => {\r\n        setDeletingCard(card);\r\n        refForRemoveCardModal.current.showModal();\r\n    } \r\n     let handleDeleteCard = () => {\r\n        let daCard = {...deletingCard};\r\n        let promise = new Promise((resolve,reject)=>{\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                gcards: Firebase.firestore.FieldValue.arrayRemove(daCard)\r\n            });\r\n            resolve(); \r\n        });\r\n        promise.then(()=>{     \r\n            props.reFetch();\r\n            refForRemoveCardModal.current.hideModal();\r\n        });\r\n    }\r\n    //Handling Editing \r\n    let handleClickEditCardButton = (card,index) => {\r\n        //ard.name.toCamelCase();\r\n        setBeingEdittedCard(card);\r\n        setBeforeEditedCard(card);\r\n        refForEditCardModal.current.showModal();\r\n    }\r\n        //Handling editing form\r\n    let handleNameChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            name: e.target.value\r\n        }));\r\n    }\r\n    let handleExpMonthChangeEditing = (e) =>{\r\n        setBeingEdittedCard((prevState)=>({\r\n            ...prevState,\r\n            \"exp month\": e.target.value\r\n        }))\r\n    }\r\n    let handleExpYearChangeEditing = (e) => {\r\n        setBeingEdittedCard((prevState) => ({\r\n            ...prevState,\r\n            \"exp year\": e.target.value\r\n        }))\r\n    }\r\n        //When user pressed confirmed\r\n    let handleEditConfirmation = () =>{\r\n        let daCard = {...beingEdittedCard};//To be added\r\n        let daOrignial = {...beforeEditedCard};//To be removed, the original\r\n        if (JSON.stringify(daCard) !== JSON.stringify(daOrignial)){//If there is difference\r\n           let promise = new Promise((resolve,reject)=>{//First remove the original\r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    gcards: Firebase.firestore.FieldValue.arrayRemove(daOrignial)\r\n                });\r\n                resolve(); \r\n            });\r\n            promise.then(()=>{//Then add the updated version to replace the removed one     \r\n                let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.update({\r\n                    gcards: Firebase.firestore.FieldValue.arrayUnion(daCard)\r\n                });\r\n                props.reFetch();\r\n                refForEditCardModal.current.hideModal();\r\n            }); \r\n    /*         let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n                accountDoc.get().then((snapShot)=>{\r\n                let daGCardsOld = snapShot.data().gcards;\r\n                let daGCardsNew = snapShot.data().gcards;\r\n                daGCardsNew[currentIndexOfEdited] = daCard;\r\n                for (var i = 0; i < daGCardsNew.length; i+=1){\r\n                    accountDoc.update({\r\n                        gcards: Firebase.firestore.FieldValue.arrayUnion(daGCardsNew[i])\r\n                    });\r\n                }\r\n                for (var i = 0; i < daGCardsOld.length; i+=1){\r\n                    accountDoc.update({\r\n                        gcards: Firebase.firestore.FieldValue.arrayRemove(daGCardsOld[i])\r\n                    });\r\n                }\r\n\r\n            }).then(()=>{\r\n                refForEditCardModal.current.hideModal();\r\n            }); */\r\n        }else{//no difference, simply close the box\r\n            refForEditCardModal.current.hideModal();\r\n        }\r\n    }\r\n\r\n \r\n    useEffect(() => {//preping item and markup to provide the collapse Tab\r\n        setPrepList(handlePreProcessingCardListToComponent);\r\n    }, []);\r\n    useEffect(() => {//When confirmedAddedCard is update through the card adding method\r\n        if(JSON.stringify(confirmedAddedCard)!= JSON.stringify({})){\r\n            let accountDoc = db.collection(\"accounts\").doc(props.accountID);\r\n            accountDoc.update({\r\n                gcards: Firebase.firestore.FieldValue.arrayUnion(confirmedAddedCard)\r\n            });\r\n        }\r\n    }, [confirmedAddedCard]);\r\n    useEffect(()=>{//rerender GCards component whenever new card is added\r\n        setPrepList(handlePreProcessingCardListToComponent);\r\n    },[props.list])\r\n    return (\r\n        <div className=\"user-gcards-manament payment-section\">\r\n            <h5 className=\"panel-title\">Gift Cards</h5>\r\n            <button className=\"add-new-card\"  onClick={handleClickingAddCard}> <span class=\"material-icons\">add</span>Add a new card</button>\r\n            {props.list.length > 0?\r\n            <div className=\"title-for-card-list\">\r\n                <span className=\"card-name tab-head\">Your Gift Cards</span>\r\n                <span className=\"card-exp tab-head\">Expires</span>\r\n            </div> : \r\n            <div className=\"no-card-yet\">\r\n                You have no gift card yet, try adding more\r\n            </div>\r\n            }\r\n            {prepList && <CollapseTab list={prepList}>\r\n            </CollapseTab>}\r\n            <Modal hasTitle={true} ref={refForAddCardModal} name=\"add-gift-card-for-account\">\r\n                    <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name of Card</legend>\r\n                            <input type=\"text\" onChange={handleAddingNameToCardForm} value={addingCardFromForm.name} placeholder=\"Enter Name on Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleAddingExpMonthToCardForm} type=\"number\" value={addingCardFromForm[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleAddingExpYearToCardForm} type=\"number\" value={addingCardFromForm[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half type\">\r\n                            <legend>Type</legend>\r\n                            <select className=\"exp-month\" onChange={handleAddingTypeToCardForm} type=\"number\" value={addingCardFromForm.type}>\r\n                                {\r\n                                    randomTypes.map((item)=>(\r\n                                        <option key={item} value={item}>{item[0].toUpperCase() + item.slice(1)}</option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                        </span>\r\n                        <span className=\"form-row-control half amount\">\r\n                            <legend>Amount</legend>\r\n                            <input type=\"number\" onChange={handleAddingAmountToCardForm} value={addingCardFromForm.amount} placeholder=\"Enter Amount\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleAddCardToAccount}>Add Card</div>\r\n                    </div>\r\n            </Modal>\r\n            <Modal ref={refForRemoveCardModal} name=\"remove-gift-card-confirm\" className=\"remove-card\">\r\n                {deletingCard !== {} && <div>Are you sure you want to remove <b>{deletingCard.name}</b> card ?</div>}\r\n                <button onClick={handleDeleteCard}>Confirm</button> \r\n                <button onClick={refForRemoveCardModal.current.hideModal}>Cancel</button> \r\n            </Modal>\r\n            <Modal hasTitle={true} ref={refForEditCardModal} name=\"edit-gift-card-for-account\">\r\n            {Object.keys(beingEdittedCard) !== 0 && <div className=\"form-in-modal\">\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Name of Card</legend>\r\n                            <input type=\"text\" onChange={handleNameChangeEditing} value={beingEdittedCard.name} placeholder=\"Enter Name of Card\"></input>\r\n                        </span>\r\n                        <span className=\"form-row-control half exp-date\">\r\n                            <legend>Expire month/year (MM/YYYY)</legend>\r\n                            <input className=\"exp-month\" onChange={handleExpMonthChangeEditing} type=\"number\" value={beingEdittedCard[\"exp month\"]} min=\"1\" max=\"12\"></input>\r\n                            <input className=\"exp-year\" onChange={handleExpYearChangeEditing} type=\"number\" value={beingEdittedCard[\"exp year\"]} min=\"2020\"></input>\r\n                        </span>\r\n                        <div className=\"add-card-btn half\" onClick={handleEditConfirmation}>Confirm edit</div>\r\n                    </div>}\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GCards;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SignInUpButtons\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Orders\\index.js",["427"],"import React, {Fragment, useEffect, useState} from 'react';\r\nimport './orders.scss';\r\nimport './../../Plugins/HozBox';\r\nimport NoOrder from \"./NoOrder\";\r\nimport CoolTable from './../../Plugins/CoolTable';\r\nconst Orders = (props) => {\r\n    const [orders, setOrders] = useState({delivered: [], onTheWay: []})\r\n    const titleList = [\"preview\", \"name\", \"type\", \"arrival\", \"status\"]\r\n    let filterOrdersByEra = () =>{\r\n        let delivered = [];\r\n        let onTheWay = [];\r\n        if(props.ordersOfAccount && props.ordersOfAccount.length > 0){\r\n            for (let orderPack of props.ordersOfAccount){\r\n                for(let item of orderPack.orderList){\r\n                    item.status = orderPack.status;\r\n                }\r\n                if (orderPack.status === \"delivered\"){\r\n                    delivered.push(orderPack);\r\n                } else{\r\n                    onTheWay.push(orderPack);\r\n                }\r\n            }\r\n            setOrders((prevState)=>({\r\n                ...prevState,\r\n                delivered: delivered,\r\n                onTheWay: onTheWay\r\n            }))\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        filterOrdersByEra();\r\n    },[])\r\n    useEffect(() => {\r\n        \r\n    }, [props.ordersOfAccount]);\r\n    return (\r\n        <div className=\"account_orders\">\r\n            {props.ordersOfAccount ? <Fragment><div className=\"current-orders order-section\">\r\n                <h5 className=\"panel-title\">Current Order</h5>\r\n                {orders.onTheWay && orders.onTheWay.map((item)=>(\r\n                    <CoolTable key={item.trackingID} titleList={titleList} list={item.orderList}>\r\n                        <div className=\"package-info\">\r\n                            <div className=\"order-tracking\">Order tracking number <span className=\"tracking-id\">#{item.trackingID}</span></div>\r\n                            <div className=\"order-date\">Date placed: <span className=\"date-placed\">{item.orderMonth + \"-\" + item.orderDay+\"-\"+item.orderYear}</span></div>\r\n                            {item.shippedTo && <div className=\"shipped-to\">Shipped to: <span className=\"shipped-address\">{item.shippedTo.address}</span></div>}\r\n                        </div>    \r\n                    </CoolTable>\r\n                ))}\r\n            </div>\r\n            <div className=\"past-orders order-section\">    \r\n                <h5 className=\"panel-title\">From the past</h5>\r\n                {orders.delivered && orders.delivered.map((item)=>(\r\n                    <CoolTable key={item.trackingID} titleList={titleList} list={item.orderList}> \r\n                        <div className=\"package-info\">\r\n                            <div className=\"order-tracking\">Order tracking number <span className=\"tracking-id\">#{item.trackingID}</span></div>\r\n                            <div className=\"order-date\">Date placed: <span className=\"date-placed\">{item.orderMonth + \"-\" + item.orderDay+\"-\"+item.orderYear}</span></div>\r\n                            {item.shippedTo && <div className=\"shipped-to\">Shipped to: <span className=\"shipped-address\">{item.shippedTo.address}</span></div>}\r\n                        </div>   \r\n                    </CoolTable>\r\n                ))}\r\n            </div></Fragment>:<div className=\"no-order\"><NoOrder></NoOrder><div className=\"message\">You have not ordered any of our fantastic goods yet</div></div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Orders;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\SignUp\\index.js",["428"],"import React, {useEffect, useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport AwesomeForm from '../../AwesomeForm';\r\nimport Firebase from '../../Firebase';\r\nimport bcrypt from 'bcryptjs';\r\nimport './sign-up.scss';\r\nconst SignUp = () => {\r\n    const [userName, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordMatch, setPasswordMatch] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [nickname, setNickname] = useState(\"\");\r\n    const [validUser, setValidUser] = useState(true);\r\n    const [foundUser, setFoundUser] = useState(false);\r\n    const [validPassword, setValidPassword] = useState(true);\r\n    const [validPasswordLength, setValidPasswordLength] = useState(true);\r\n    const [readyToCreate, setReadyToCreate] = useState(true);\r\n    const db = Firebase.firestore();\r\n    const USER_LENGTH_MINIMUM = 6;\r\n    const PASSWORD_LENGTH_MINUMUM = 8;\r\n    const history = useHistory();\r\n    let handleUserNameChange = (e) =>{\r\n        setUsername(e.target.value);\r\n    }\r\n    let handleCheckUserName = () =>{\r\n        let userFieldValue = userName;\r\n        if(userFieldValue.length < USER_LENGTH_MINIMUM){\r\n            setValidUser(false);\r\n        } else {\r\n            setValidUser(true);\r\n        }\r\n        if (userFieldValue!==\"\"){\r\n            db.collection(\"users\").doc(userFieldValue).get().then((doc)=>{\r\n                if (doc.exists){\r\n                    setFoundUser(true);\r\n                } else {\r\n                    setFoundUser(false);\r\n                }\r\n            })\r\n        }\r\n      \r\n    }\r\n    let hashPasswordForAccount = (pass) =>{\r\n        const salt = bcrypt.genSaltSync(10);\r\n        var dahash = bcrypt.hashSync(pass,salt);\r\n        return dahash;\r\n    }\r\n    let handlePasswordChange = (e) =>{\r\n        setPassword(e.target.value);\r\n    }\r\n    let handlePasswordMatchChange = (e) =>{\r\n        setPasswordMatch(e.target.value);\r\n    }\r\n    let handleMatchingPassword = () =>{\r\n        setValidPassword(password===passwordMatch);\r\n    }\r\n    let handleCheckPasswordLength = () =>{\r\n        setValidPasswordLength(password.length >= PASSWORD_LENGTH_MINUMUM)\r\n    }\r\n    let handleEmailChange = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n    let handleNicknameChange = (e) =>{\r\n        setNickname(e.target.value);\r\n    }\r\n    let handleCreateAccount = () =>{\r\n        if(password === \"\" || userName === \"\"){\r\n            setReadyToCreate(false);\r\n            handleCheckUserName();\r\n            handleCheckPasswordLength();\r\n        } else {\r\n            let validForm = validPassword&&validPasswordLength&&!foundUser&&validUser;\r\n            if(validForm){\r\n                setReadyToCreate(validForm);\r\n                let account = {\r\n                    cards: [],\r\n                    email: email,\r\n                    gcards: [],\r\n                    kart: [],\r\n                    nickname: nickname,\r\n                    orders: [],\r\n                    phone: \"\",\r\n                    shippings: [],\r\n                    tcards: [],\r\n                    username: userName\r\n                }\r\n                let user = {\r\n                    password: hashPasswordForAccount(password),\r\n                    username: userName\r\n                }\r\n                db.collection(\"users\").doc(userName).set(user);\r\n                db.collection(\"accounts\").doc(userName).set(account);\r\n                history.push(\"/sign-in\");\r\n            }\r\n            \r\n        }\r\n    }\r\n    return (\r\n        <div id=\"sign-up\">\r\n            <AwesomeForm title=\"Sign Up\" width=\"fix-width small\">\r\n                <span className=\"aform-field\">\r\n                    <label>User Name</label>\r\n                    <input type=\"text\" name=\"user-name\" value={userName} onBlur={handleCheckUserName} onChange={handleUserNameChange} autoComplete=\"off\"></input>\r\n                    <span className=\"error\" hidden={!foundUser}>This username was used, please try using a different one</span>\r\n                    <span className=\"error\" hidden={validUser}>Username should be at least 6 characters</span>\r\n\r\n                </span>\r\n                <span className=\"aform-field\">\r\n                    <label>Preferred name</label>\r\n                    <input type=\"text\" name=\"nickname\" value={nickname} onChange={handleNicknameChange}></input>\r\n                </span>\r\n                <span className=\"aform-field\">\r\n                    <label>Your Password</label>\r\n                    <input type=\"password\" name=\"password\" value={password} onBlur={handleCheckPasswordLength} onChange={handlePasswordChange}></input>\r\n                    <span className=\"error\" hidden={validPasswordLength}>password should be at least 8 characters</span>\r\n                </span>\r\n                <span className=\"aform-field\">\r\n                    <label>Re-enter Password</label>\r\n                    <input type=\"password\" name=\"password-match\" onBlur={handleMatchingPassword} value={passwordMatch} onChange={handlePasswordMatchChange}></input>\r\n                    <span className=\"error\" hidden={validPassword}>the password does not match with what you entered</span>\r\n                </span>\r\n                <span className=\"aform-field\">\r\n                    <label>Email</label>\r\n                    <input type=\"email\" name=\"email\" value={email} onChange={handleEmailChange}></input>\r\n                </span>\r\n                <span className=\"error\" hidden={readyToCreate}>Can not create account, please resolve the errors</span>\r\n                <button onClick={handleCreateAccount} className=\"aform-button submit\">Create Account</button>\r\n            </AwesomeForm>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\context.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Firebase\\firebase.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\SignIn\\index.js",["429","430","431","432"],"import React, {useEffect, useState} from 'react';\r\nimport {useHistory, Link} from 'react-router-dom';\r\nimport AwesomeForm from '../../AwesomeForm';\r\nimport bcrypt from 'bcryptjs';\r\nimport Firebase from './../../Firebase';\r\nimport './sign-in.scss';\r\nconst SignIn = (props) => {\r\n    const history = useHistory();\r\n    const [passwordField, setPasswordField] = useState(\"\");\r\n    const [usernameField, setUsernameField] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [user, setUser] = useState(\"\");\r\n    const [userFound, setUserFound] = useState(null);\r\n    const [passWordMatch, setPasswordMatch] = useState(null);\r\n    const [readyForPassword, setReadyForPassword] = useState(false);\r\n    const db = Firebase.firestore();\r\n   /*bcrypt.genSalt(10, function(err,salt){\r\n        bcrypt.hash(pass, salt, function(err, hash){\r\n            dahash = hash;\r\n        })\r\n    })*/\r\n    \r\n    let updatePasswordToTestUser = (user) =>{\r\n        const salt = bcrypt.genSaltSync(10);\r\n        var pass = \"292/B22Bui\";\r\n        var dahash = bcrypt.hashSync(pass,salt);\r\n        db.collection(\"users\").doc(user).update({\r\n            password: dahash\r\n        })\r\n    }\r\n    let comparePasswordWithHash = (pass, dahash) => {\r\n        bcrypt.compare(pass, dahash, function(err,res){\r\n            if(res){\r\n                setPasswordMatch(true);\r\n                props.setUserForApp(user);\r\n                history.push(\"\");\r\n            } else {\r\n                setPasswordMatch(false);\r\n                console.log(\"Wrong pass word or ID\")\r\n            }   \r\n        })\r\n    }\r\n    let userInDatabase = (user) => {\r\n        db.collection(\"users\").get().then((res)=>{\r\n                var found = false;\r\n                res.docs.map((doc)=>{\r\n                    if(doc.data().username === user){\r\n                       found = true;\r\n                       setUser(user);\r\n                       setReadyForPassword(true);\r\n                    } \r\n                });\r\n                setUserFound(found);\r\n        })\r\n    }\r\n    let getPasswordFromUser = (user) =>{\r\n        db.collection(\"users\").doc(user).get().then((res)=>{\r\n            setPassword(res.data().password)\r\n        });\r\n    }\r\n    let handlePasswordFieldChange = (e) => {\r\n        setPasswordField(e.target.value);\r\n    }\r\n    let handleUsernameFieldChange = (e) => {\r\n        setUsernameField(e.target.value)\r\n    }\r\n    let handleSignIn = () => {\r\n        if(readyForPassword){\r\n            if (userFound && password !== \"\"){\r\n                setPasswordMatch(comparePasswordWithHash(passwordField, password));\r\n            } else if (userFound){\r\n                getPasswordFromUser(user);\r\n            }\r\n        } else {\r\n            if (user !== usernameField || user !== \"\"){\r\n                userInDatabase(usernameField);\r\n            }\r\n        }\r\n\r\n        /* if(userInDatabase(usernameField)){\r\n            setUserFound(true);\r\n        }else{\r\n            setUserFound(false);\r\n        } */\r\n    }\r\n   /*  useEffect(()=>{\r\n        if(password !== \"\"){\r\n            setPasswordMatch(comparePasswordWithHash(passwordField, password));\r\n        }\r\n    },[password]) */\r\n    useEffect(()=>{\r\n       if(user !== \"\"){\r\n           getPasswordFromUser(user);\r\n       }\r\n    },[userFound])\r\n    useEffect(()=>{})\r\n    return (\r\n        <div className=\"sign-in-aqc\">\r\n                <div className={\"error no-user \" + (userFound === true || userFound ===  null ? \"error-hidden\" : \"\")}>No user found</div>\r\n                <div className={\"error password-unmatch \" + (passWordMatch === true || passWordMatch === null ? \"error-hidden\" : \"\")}>Wrong password</div>\r\n                <AwesomeForm title=\"Sign In\" width=\"fix-width small\"> \r\n                    <span className=\"username aform-field\">\r\n                        <label>\r\n                            User Name\r\n                        </label>\r\n                        <input type=\"text\" name=\"user\" value={usernameField} onChange={handleUsernameFieldChange} autoComplete=\"off\" disabled={readyForPassword}>\r\n\r\n                        </input>\r\n                    </span>\r\n                    <span className={\"user-password aform-field\" + (userFound && readyForPassword? \"\":\" hidden-field\")} >\r\n                        <label>\r\n                            Password\r\n                        </label>\r\n                        <input type=\"password\" name=\"pass\" value={passwordField} onChange={handlePasswordFieldChange} autoComplete=\"off\">\r\n\r\n                        </input>\r\n                    </span>\r\n                    <button className={\"aform-button submit\"} onClick={()=>{\r\n                        history.push(\"/sign-up\");\r\n                    }}>Sign Up</button>\r\n                    <button className={\"aform-button submit\"+ (readyForPassword ? \" \" : \" hidden-btn\")} onClick={()=>{setReadyForPassword(false); setUser(\"\"); setPasswordMatch(true)}}>Change username</button>\r\n                    <button className=\"aform-button submit\" onClick={handleSignIn}>{!readyForPassword ? \"Next\" : \"Sign In\"}</button>\r\n                </AwesomeForm>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignIn;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\index.js",["433","434","435","436","437","438","439","440"],"import React, {useState,useEffect, useImperativeHandle} from 'react';\r\nimport Payment from './Payment';\r\nimport ItemsSummary from './ItemsSummary';\r\nimport ShippingInfo from './ShippingInfo';\r\nimport PriceTotal from './PriceTotal';\r\nimport firebase from './../Firebase/firebase.js';\r\nimport './check-out.scss';\r\nimport './../AwesomeForm/awesome-form.scss';\r\nimport GIFTCARDS from '../../model/GiftCards';\r\nconst db = firebase.firestore();\r\nconst CheckOut = React.forwardRef((props, ref) => {\r\n    const [dis, setDis] = useState(0);\r\n    const [debitDis, setDebitDis] = useState(0);\r\n    const [card, setCard] = useState(props.curCard);\r\n    const [gcards, setGcards] = useState(props.curGCards);\r\n    const [shipping, setShipping] = useState(props.curShipping);\r\n    const [total, setTotal] = useState();\r\n    const [cards, setCards] = useState();\r\n    const [noOfCards, setNoOfCard] = useState(0);\r\n    let getDis = (percentage = 0) => {\r\n        setDis(percentage)\r\n    }  \r\n    let getDebitDis = (ammount = 0) => {\r\n        setDebitDis(ammount);\r\n    } \r\n    let fetchCardsData = (id) =>{//fetch data from firestore then process it and import it into the cards state of checkout component as well as setting the initial card state\r\n        db.collection(\"cards\").get().then(dat=>{\r\n            var daColection = dat.docs;\r\n            var daList = [];\r\n            var cardsNo = 0;\r\n            daColection.forEach(doc=>{\r\n                cardsNo += 1;\r\n                daList.push(doc.data());\r\n            });\r\n            var promise = new Promise(resolve => {\r\n                //set state at once through props or avail model\r\n                setNoOfCard(cardsNo);\r\n                setCards(daList);\r\n                setCard(daList[id]);\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    let addCardToDb = (obj) => { //add card to the collection\r\n        obj.id =  parseInt(noOfCards).toString();\r\n        if (props.account !== undefined && props.account !== null){\r\n            let accountDoc = db.collection(\"accounts\").doc(props.account.username)\r\n            accountDoc.update({\r\n                cards: firebase.firestore.FieldValue.arrayUnion(obj)\r\n            }).then(()=>{\r\n                setCard(obj);\r\n                setCards(prevState => [...prevState, obj]);\r\n                props.reFetch();\r\n            });\r\n        } else {\r\n            db.collection(\"cards\").doc(obj.id).set(obj).then(()=>{\r\n                //once added, fetch the cards data again and set the current card to newly added card\r\n                    db.collection(\"cards\").doc(obj.id).get().then((data)=>{\r\n                        var newCard = data.data(); //don't forget .data() method to get actual data\r\n                        setCard(newCard);\r\n                        setCards(prevState => [...prevState, newCard]);//add new object to the list\r\n                    });\r\n                }).catch((error)=>{\r\n                    console.error(\"Error writting document: \", error)\r\n                }); \r\n        }\r\n    }\r\n    let setMyCard = (id) => {\r\n        setCard(cards[id]);\r\n    }\r\n    //Get total price info from total price component\r\n    let getTotalFromWithinPriceTotalComp = (num) => {\r\n        setTotal(num);\r\n        props.setTotalForApp(num);\r\n    }\r\n    useEffect(() => {\r\n        //getting data from firestone for the first time\r\n       if(card === undefined){\r\n           //If there is account or signed in\r\n           if(props.account !== undefined && props.account !== null ){\r\n                setCards(props.account.cards);\r\n                setNoOfCard(props.account.cards.length);\r\n                setCard(props.account.cards[0])\r\n           }else {//else use default option\r\n                fetchCardsData(0);\r\n           }\r\n       } else {\r\n            if(props.account !== undefined && props.account !== null){\r\n                setCards(props.account.cards);\r\n                setNoOfCard(props.account.cards.length);\r\n            }else {\r\n                fetchCardsData(card.id);\r\n            }     \r\n       }\r\n    }, []);\r\n    useEffect(()=>{\r\n        props.setCardForApp(card);\r\n    }, [card])\r\n    return (\r\n        <div id=\"check_out\">\r\n            <div className=\"left-container\">\r\n                <ShippingInfo account={props.account} curShipping={shipping} setShippingForApp={props.setShippingForApp}></ShippingInfo>\r\n                {(cards && card) ? <Payment user={props.account ? props.account.username : \"\"}  addCardToDb={addCardToDb} setMyCard={setMyCard} card={card} cards={cards} gcards={props.account ? props.account.gcards : GIFTCARDS} currentGCards={props.curGCards} setGCardForApp={props.setGCardForApp} getDis={getDis} getDebitDis={getDebitDis}></Payment>: <div>No payments available for this account please add via \"Payments\" in account information</div>}\r\n                <ItemsSummary list={props.list}></ItemsSummary> \r\n            </div>\r\n            <div className=\"right-container\">\r\n                <PriceTotal osRef={props.osRef} setTotalForCheckOut = {getTotalFromWithinPriceTotalComp} card={props.curCard} dis={dis} debit={debitDis}  list={props.list}></PriceTotal>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n})\r\n\r\nexport default CheckOut;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\NavigationItems.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\Orders.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\OrderTypesRadio\\OrderTypeRadio.js",["441"],"import {React, useEffect, useState} from 'react';\r\nimport \"./order-type-radio.scss\";\r\nconst OrderTypeRadio = (props) => {\r\n    const [curType, setCurType] = useState('');\r\n    const [types, setTypes] = useState([]);\r\n    useEffect(()=>{\r\n        setTypes(props.types);\r\n        setCurType(props.types[0]);\r\n    },[]);\r\n    \r\n    return (\r\n        <form id=\"type_form\">\r\n            <span className=\"select-type\">Select types:</span>\r\n            { types.map((daType) => {\r\n                return(\r\n                <div className=\"radio-input-container\"  key={daType}>\r\n                    <span className=\"radio-color-type-display\" style={{backgroundColor: daType}}></span>\r\n                    <input onClick={()=>{\r\n                        props.upDateCurType(daType);\r\n                        props.resetQInput();\r\n                    }} type=\"radio\" id={daType} name=\"type\" value={daType} defaultChecked={daType === curType}/>\r\n                </div>\r\n            )\r\n            }) }\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default OrderTypeRadio;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\GiftCards.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\FeaturedItems\\index.js",["442"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\index.js",["443"],"\r\nimport React, { Fragment } from 'react';\r\nimport BannerBox from './BannerBox';\r\nimport Controller from './Controller';\r\nimport BANNERLIST from '../../../model/BannerList';\r\nimport Pagination from './Pagination';\r\nimport './Banner.css';\r\nimport $ from 'jquery';\r\n//Data of Banner items \r\nlet NoOfItems = BANNERLIST.length;\r\nclass Banner extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            bannerWidth: 0,\r\n            bannerBoxWidth: 0,\r\n            bannerItemsNo: NoOfItems,\r\n            current: null,\r\n            next: null,\r\n            prev: null,\r\n            fist: null,\r\n            last: null,\r\n        }\r\n    }\r\n\r\n    JQUERY = () => {\r\n        var that = this;// refer to the instance of the Banner object to use later in the jquery codes\r\n        $(function(){\r\n            var $window = $(window);// window object does not need ''\r\n            var $body = $('body');\r\n            //set bannerWidth for individual width of each banner Item\r\n            let bodyWidth = $body.width();\r\n            let windowHeight = $window.height();\r\n            //set height for banner\r\n            $(\".Banner\").height((windowHeight * 60)/100);\r\n            that.setState({\r\n                bannerWidth: bodyWidth\r\n            })\r\n            //banner Box width is the total width of the containers of all the banner items,\r\n            //this container is hidden by the banner div that only show exactly one banner item at a time \r\n            that.setState({\r\n                bannerBoxWidth: bodyWidth*NoOfItems\r\n            })\r\n            //controllers code\r\n            //Animation handlers\r\n            let $moveRight = () =>{\r\n                $(\".banner-box\").animate({right: \"+=\" + that.state.bannerWidth},500);\r\n            };\r\n            let $moveLeft = () =>{\r\n                $(\".banner-box\").animate({right: \"-=\" + that.state.bannerWidth},500);\r\n            };\r\n            let $moveTo = (id,animated = true)  =>{\r\n                let parsedID = parseInt(id);\r\n                let current = that.getCurrent();\r\n                let currentID = current.index;\r\n                let idDifference = currentID - parsedID;\r\n                //calculating how far the box will be translated\r\n                let moveByTheWidthOf = Math.abs(idDifference) * that.state.bannerWidth;\r\n                //check if the destination is greater than or less comparing to the current id\r\n                //if greater, move to left, else to the right\r\n                if (animated){\r\n                    let $BannerBox = $(\".banner-box\");\r\n                    if(idDifference > 0){\r\n                        $BannerBox.animate({right: \"-=\" + moveByTheWidthOf},500); \r\n                    } else {\r\n                        $BannerBox.animate({right: \"+=\" + moveByTheWidthOf},500)\r\n                    }\r\n                } else {\r\n                    let $BannerBox = $(\".banner-box\");\r\n                    let $BannerBoxRight = parseInt($BannerBox.css(\"right\").replace(\"px\",\"\"));\r\n                    if(idDifference > 0){\r\n                        $BannerBox.css({\r\n                            \"right\": $BannerBoxRight - moveByTheWidthOf + \"px\"\r\n                        })\r\n                    } else {\r\n                        $BannerBox.css({\r\n                            \"right\": $BannerBoxRight + moveByTheWidthOf + \"px\"\r\n                        })\r\n                    }\r\n                }\r\n                \r\n                //Setting state for the banner items, current, prev and next\r\n                that.setCurrent(BANNERLIST[parsedID]);\r\n                if (parsedID === 0){//if the destination is first\r\n                    that.setPrev(that.getLast());\r\n                    that.setNext(BANNERLIST[parsedID + 1]);\r\n                } else if (parsedID === that.state.bannerItemsNo - 1){//if the destination is last\r\n                    that.setPrev(BANNERLIST[parsedID - 1]);\r\n                    that.setNext(that.getFirst());\r\n                } else {//the default ways for prev and next items\r\n                    that.setPrev(BANNERLIST[parsedID - 1]);\r\n                    that.setNext(BANNERLIST[parsedID+ 1]);\r\n                }\r\n                $(\".current\").removeClass(\"current\");\r\n                $(\".Pagination\").find(\"[index='\"+ parsedID + \"']\").addClass(\"current\");\r\n                return;\r\n            };\r\n            //get width when started the app or resizing a window for banner\r\n            $window.on(\"resize\", function(){\r\n                let currentSlide = that.getCurrent();\r\n                let curIndex = currentSlide.index;\r\n                let bodyWidth = $body.width();\r\n                let bannerBoxWidth = bodyWidth*NoOfItems;\r\n                that.setState({\r\n                    bannerWidth: bodyWidth\r\n                })\r\n                that.setState({\r\n                    bannerBoxWidth: bannerBoxWidth\r\n                })\r\n                //Height of Banner\r\n                let windowHeight = $window.height();\r\n                $(\".Banner\").height((windowHeight * 60)/100);\r\n                //return to its last position after reload\r\n                $(\".banner-box\").css({\"right\": curIndex * bodyWidth + \"px\"});\r\n                $(\".current\").removeClass(\"current\");\r\n                $(\".Pagination\").find(\"[index='\"+ curIndex +\"']\").addClass(\"current\");\r\n                \r\n            });\r\n            //Initiallize orders for banner lists \r\n            that.setCurrent(BANNERLIST[0]);\r\n            that.setNext(BANNERLIST[1]);\r\n            that.setPrev(BANNERLIST[that.state.bannerItemsNo - 1]);\r\n            that.setFirst(BANNERLIST[0]);\r\n            that.setLast(BANNERLIST[that.state.bannerItemsNo - 1]);\r\n            //cache of first and last items along with the left and right controllers\r\n            let firstItem = that.getFirst();\r\n            let lastItem = that.getLast();\r\n            let $left = $('.left-controller-banner');\r\n            let $right = $('.right-controller-banner');\r\n            //Left controller codes\r\n            $left.on(\"click\", function(e){\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                let cur = that.getCurrent();\r\n                let prev = that.getPrev();\r\n                let prevIndex = prev.index;\r\n                let newPrevIndex = prevIndex - 1;\r\n                //check if it has to move to the very end of the list\r\n                if(prevIndex === lastItem.index){\r\n                    $moveTo(lastItem.index);\r\n                } else {\r\n                    $moveLeft();\r\n                }\r\n                that.setCurrent(prev);\r\n                that.setNext(cur);\r\n                //Let Pagination components know to move to corresponding dot\r\n                $(\".current\").removeClass(\"current\");\r\n                $(\".Pagination\").find(\"[index='\"+ prev.index + \"']\").addClass(\"current\");\r\n                //check if it has to move to the very front of the list\r\n                if (newPrevIndex < 0) {\r\n                    that.setPrev(lastItem);\r\n                    return;\r\n                } \r\n                that.setPrev(BANNERLIST[newPrevIndex]);\r\n            });\r\n            //Right controller codes\r\n            $right.on(\"click\", function(e){\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                let cur = that.getCurrent();\r\n                let next = that.getNext();\r\n                let nextIndex = next.index;\r\n                let newNextIndex = nextIndex + 1;\r\n                if(nextIndex === firstItem.index){\r\n                    $moveTo(firstItem.index);\r\n                    return;\r\n                } else {\r\n                    $moveRight();\r\n                }\r\n                that.setCurrent(next);\r\n                that.setPrev(cur);\r\n                //Let Pagination components know to move to corresponding dot\r\n                $(\".current\").removeClass(\"current\");\r\n                $(\".Pagination\").find(\"[index='\"+ next.index + \"']\").addClass(\"current\");\r\n                if (newNextIndex > that.state.last.index) {\r\n                    that.setNext(firstItem);      \r\n                    return;\r\n                } \r\n                that.setNext(BANNERLIST[newNextIndex]);\r\n            })\r\n            //Pagination codes\r\n                $(\".page-dot\").first().addClass(\"current\");\r\n                $(\".page-dot\").on(\"click\",function(e){\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    let $this = $(this);\r\n                    $(\".current\").removeClass(\"current\");\r\n                    $this.addClass('current');\r\n                    $moveTo($this.attr(\"index\"));\r\n                });\r\n        })\r\n    }\r\n    componentDidMount = () => {\r\n        this.JQUERY();\r\n    }\r\n    componentWillUnmount() {\r\n        // fix Warning: Can't perform a React state update on an unmounted component\r\n        this.setState = (state,callback)=>{\r\n            return;\r\n        };\r\n    }\r\n    getCurrent = () => {\r\n        return this.state.current;\r\n    }\r\n    getNext = () => {\r\n        return this.state.next;\r\n    }\r\n    getPrev = () => {\r\n        return this.state.prev;\r\n    }\r\n    getNoOfItems = () =>{\r\n        return this.state.bannerItemsNo\r\n    }\r\n    setCurrent = (obj) => {\r\n        this.setState({\r\n            current: obj\r\n        });\r\n    }\r\n    getFirst = () => {\r\n        return this.state.first;\r\n    }\r\n    getLast = () =>{\r\n        return this.state.last;\r\n    }\r\n    setNext = (obj) => {\r\n        this.setState({\r\n            next: obj\r\n        });\r\n    }\r\n    setPrev = (obj) => {\r\n        this.setState({\r\n            prev: obj\r\n        });\r\n    }\r\n    setFirst = (obj) => {\r\n        this.setState({\r\n            first: obj\r\n        })\r\n    }\r\n    setLast = (obj) => {\r\n        this.setState({\r\n            last: obj\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"Banner\">\r\n                <Controller></Controller>\r\n                {/*key is needed for the Banner Box to update the passing props from Banner*/}\r\n                <BannerBox key={this.state.bannerBoxWidth} bannerBoxWidth={this.state.bannerBoxWidth} width={this.state.bannerWidth}></BannerBox>              \r\n                <Pagination NoOfItems={this.getNoOfItems()}></Pagination>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\Sorter\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\SearchForm\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ItemDetail\\index.js",["444"],"import {React, useState} from 'react';\r\nimport './item-detail.scss';\r\nconst ItemDetail = (props) => {\r\n    const [order,setOrder] = useState(props.daOrder);\r\n    return (\r\n        <div id=\"item_detail\">\r\n            <span className=\"product-name\">{order.name}</span>\r\n            <span className=\"product-price\">Price: $ {order.price}</span>\r\n            <p className=\"product-description\">{order.description}</p>\r\n            <span className=\"product-availability\">\r\n                {order.quantity<=0?(\r\n                    <span className=\"out-of-stock\">Out of stock</span>\r\n                ):(\r\n                    <span>\r\n                        <span className=\"item-in-stock\">In Stock</span>\r\n                        <span className=\"item-quantity\">{order.quantity} left</span>\r\n                    </span>\r\n                )}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemDetail;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\SearchResult\\ResultDisplay\\index.js",["445","446"],"import React from 'react';\r\nimport Pagination from './../../Pagination';\r\n\r\nimport './result-display.scss';\r\nclass ResultDisplay extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchQueue: {\r\n                name: props.name,\r\n                maxPrice: props.maxPrice,\r\n                minPrice: props.minPrice,\r\n                inStock: props.inStock,\r\n            },\r\n            list: [],\r\n            foundList: []\r\n        }\r\n        this.fetchItems = this.fetchItems.bind(this);\r\n    }\r\n    getItemBasedOnSearchResult(){\r\n        let list = this.state.list;\r\n        let newList = [];\r\n        let result = [];\r\n        let nameResult = this.props.name;\r\n        let maxPriceResult = parseInt(this.props.maxPrice);\r\n        let minPriceResult = parseInt(this.props.minPrice);\r\n        let getInStockResult = this.props.inStock;\r\n        if(getInStockResult){\r\n            list.forEach((item) =>{\r\n                var nameMatchResult = item.name.toLowerCase().search(nameResult);\r\n                if (nameMatchResult != -1 && item.quantity > 0){\r\n                    newList.push(item);\r\n                } \r\n            });\r\n        } else {\r\n            list.forEach((item) =>{\r\n                var nameMatchResult = item.name.toLowerCase().search(nameResult);\r\n                if (nameMatchResult != -1){\r\n                    newList.push(item);\r\n                } \r\n            });\r\n        }\r\n        \r\n        if (maxPriceResult === 0){\r\n           result = newList.filter(item => (parseInt(item.price) >= minPriceResult));\r\n        }else {\r\n           result = newList.filter(item => (parseInt(item.price) >= minPriceResult && parseInt(item.price) <= maxPriceResult));\r\n        }\r\n        return result;\r\n    }\r\n    fetchItems(){\r\n        fetch(\"../ORDERS.json\").then(res => res.json()).then((result)=>{\r\n            this.setState({\r\n                 list: result,\r\n             });\r\n        }).then(()=>{\r\n            this.setState({\r\n               foundList: this.getItemBasedOnSearchResult()\r\n            })\r\n        })\r\n     }\r\n    componentDidMount(){\r\n        this.fetchItems();\r\n    }\r\n    componentDidUpdate(prevProps,prevState){\r\n        if(prevProps.name !== this.props.name \r\n            || prevProps.minPrice !== this.props.minPrice\r\n            || prevProps.maxPrice !== this.props.maxPrice\r\n            || prevProps.inStock !== this.props.inStock\r\n            ){//need to use this to update component when props change, compare the prev props with the current props to stop infinite call of render\r\n            this.setState({\r\n                foundList: this.getItemBasedOnSearchResult()\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"result_display\">\r\n                    <h4>Here is what we found: ({this.state.foundList.length})</h4>\r\n                    { this.state.foundList.length >0 ? (<Pagination  dalist={this.state.foundList}></Pagination>) : ( <div>Not found</div>)}   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultDisplay;","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderDetail\\ImageView\\index.js",["447","448","449","450"],"import {React, useState, useEffect} from 'react';\r\nimport './image-view.scss';\r\nconst ImageView = (props) => {\r\n    const [imgSrc, setImgSrc] = useState(props.imgSrc);\r\n    const [imgName, setImgName] = useState(props.imgName);\r\n    return (\r\n        <div id=\"image_view\">\r\n            <img att={imgName} src={require('./../../../images/' + imgSrc)}></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageView;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\AwesomeForm\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Modal\\index.js",["451","452"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\CollapseTab\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CardModal\\index.js",[],["453","454"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\HozBox\\index.js",["455"],"import React, { Component } from 'react';\r\nimport \"./hoz-box.scss\";\r\nclass HozBox extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            imgSrc: props.imgSrc,\r\n            title: props.title,\r\n            content: props.content,\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n                <div className=\"hoz-order-box\">\r\n                    <img src={require(\"./../../../images/\" + this.state.imgSrc)}></img>\r\n                    <div className=\"box-content\">\r\n                        <span className=\"order-name\">{this.state.title}</span>\r\n                        <div className=\"order-content\">{this.state.content}</div>\r\n                        {this.props.extraContent &&(\r\n                            this.props.extraContent\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default HozBox;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ItemsSummary\\index.js",["456","457"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\ShippingInfo\\index.js",["458","459","460"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\Payment\\index.js",["461","462"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CheckOut\\PriceTotal\\index.js",["463","464","465"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\model\\BannerList.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\OrderWidget\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerBox\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Controller\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\Pagination\\index.js",["466"],"import React from 'react';\r\nimport './Pagination.css';\r\nimport {BsFillCircleFill as Circle} from 'react-icons/bs';\r\nfunction Pagedot(props) {\r\n    return(\r\n        <a href=\"#\" className=\"page-dot\" index={props.index}>\r\n            <Circle></Circle>\r\n        </a>\r\n    )\r\n\r\n};\r\nclass Pagination extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            NoOfItems: this.props.NoOfItems,\r\n            current: 0,\r\n            next: this.props.NoOfItems - 1,\r\n            prev: 0,\r\n        }\r\n    }\r\n    generateUI(){\r\n        var i = 0;\r\n        var max = this.state.NoOfItems;\r\n        var items = [];\r\n        for(i; i < max; i+=1){\r\n            items.push(<Pagedot key={i} index={i}></Pagedot>);\r\n        }\r\n        return items;   \r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"Pagination\">\r\n                {this.generateUI()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pagination;","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\index.js",["467","468","469","470","471"],"import {React, useState, useEffect} from 'react';\r\nimport PaginationController from './PaginationController';\r\nimport PaginationView from './PaginationView';\r\nimport './pagination.scss';\r\nconst Pagination = (props) => {\r\n   let getTotalPageNumbers = () => {\r\n        var totalItems = props.dalist.length;\r\n        var divider = parseInt(itemPerPage);\r\n        return Math.ceil(totalItems/divider);\r\n    }\r\n    let getItemsForPage = (startIndex) => {\r\n        let newList = [...props.dalist];\r\n        let itemsList =  newList.splice(startIndex, itemPerPage);\r\n        return itemsList;\r\n    } \r\n    let handlePageChange = (indexFromController) => {\r\n       setCurPage(indexFromController);\r\n    }\r\n    let nextPage = () => {\r\n        let next = parseInt(curPage) + 1;//Added parseInt here because the curPage sometimes is string\r\n        setCurPage(next);\r\n    }\r\n    let prevPage = () => {\r\n        let prev = curPage - 1;\r\n        setCurPage(prev);\r\n    }\r\n    let firstPage = () =>{\r\n        setCurPage(0);\r\n    }\r\n    let lastPage = () =>{\r\n        setCurPage(getTotalPageNumbers() - 1);\r\n    }\r\n    const [itemPerPage, setItemPerPage] = useState(8);//how many item to display\r\n   // const [itemWidth, setItemWidth] = useState(30); //percentage width of items\r\n    const [curList, setCurList] = useState(getItemsForPage(0));\r\n    const [pageNumber, setPageNumber] = useState(getTotalPageNumbers());\r\n    const [curPage, setCurPage] = useState(0);//deduct one to get the start index\r\n    const [paginified,setPaginified] = useState(pageNumber>0);\r\n    //props.dalist got update from search result\r\n\r\n    useEffect(()=>{\r\n                var totalPages = getTotalPageNumbers();\r\n                setCurList(getItemsForPage(0));\r\n                setPageNumber(totalPages);\r\n                setPaginified(totalPages >= 2);\r\n            },[]);\r\n    useEffect((prev,next)=>{ \r\n        if (prev != props){\r\n            var totalPages = getTotalPageNumbers();\r\n            setCurList(getItemsForPage(0));\r\n            setCurPage(0);\r\n            setPageNumber(totalPages);\r\n            setPaginified(totalPages >= 2);\r\n        }\r\n    },[props.dalist]); \r\n    useEffect(()=>{\r\n         \r\n        setCurList(getItemsForPage(curPage*itemPerPage));\r\n    },[curPage]);\r\n    return (\r\n        <div className=\"pagination\">\r\n            {paginified && <PaginationController list={curList} prev={prevPage} next={nextPage} last={lastPage} cur={curPage} lastP={getTotalPageNumbers()-1} first={firstPage} pageNo={pageNumber} handlePageChange={handlePageChange}></PaginationController>\r\n            }\r\n            <PaginationView list={curList}></PaginationView>\r\n            { paginified &&\r\n            <PaginationController list={curList} prev={prevPage} next={nextPage} last={lastPage} cur={curPage} lastP={getTotalPageNumbers()-1} first={firstPage} pageNo={pageNumber} handlePageChange={handlePageChange}></PaginationController>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Plugins\\LinkCards\\LinkCard\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\Collaspable\\index.js",["472","473","474"],"import React, {useState,useEffect, useImperativeHandle} from 'react';\r\nimport './collapsable.scss';\r\nconst Collapsable = React.forwardRef((props,ref) => {\r\n    //States\r\n    let [idChosenDiv, setIdChosenDiv] = useState(\"chosen_\"+props.itemName);\r\n    let [idChangeDiv, setIdChangeDiv] = useState(\"change_field_\"+props.itemName);\r\n\r\n\r\n    //Methods of the component\r\n      //When user click change button to change their cards option\r\n    let handleChange = (e) =>{\r\n        e.stopPropagation();\r\n        var changeField = document.getElementById(idChangeDiv);\r\n        var chosen = document.getElementById(idChosenDiv);\r\n        changeField.classList.remove(\"display-none\");\r\n        chosen.classList.add(\"display-none\");\r\n    }\r\n      //when use click close button or commit to change to hide the change option tab\r\n    let handleClose = (e) =>{\r\n       e.stopPropagation();\r\n       var changeField = document.getElementById(idChangeDiv);\r\n       var chosen = document.getElementById(idChosenDiv);\r\n        chosen.classList.remove(\"display-none\");\r\n        changeField.classList.add(\"display-none\");\r\n    }\r\n    useImperativeHandle(ref, ()=>({//expose the component methods to its user, must use useRef to refer to it \r\n        handleChange: handleChange,\r\n        handleClose: handleClose,\r\n    }));\r\n    return (\r\n        <div className=\"collapsable\">\r\n            <div id={idChosenDiv} className=\"chosen-collapsable\">\r\n                {props.chosenChildren}\r\n                <button className=\"change-btn\" onClick={handleChange}>Change</button>\r\n            </div>\r\n            <div id={idChangeDiv} className=\"change-collapsable display-none\">\r\n                {props.changeChildren}\r\n                {props.extra? props.extra : \"\"}\r\n                <button className=\"close-btn\" onClick={handleClose}>Commit Change (Close)</button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Collapsable;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Home\\Banner\\BannerItem\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationView\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Pagination\\PaginationController\\index.js",["475","476","477","478","479","480","481","482","483","484","485"],"import { checkPropTypes } from 'prop-types';\r\nimport React, {useState, useEffect} from 'react';\r\nimport './pagination-controller.scss';\r\nconst PaginationController = (props) => {\r\n    const [curPage, setCurPage] = useState(props.cur);\r\n    const [,setState] = useState();\r\n    const [lastPage, setLastPage] = useState(props.lastP);\r\n    const [listOfPage,setListOfPage] = useState([]);\r\n    let generatePageNo = () =>{\r\n        let arrays = [];\r\n        let i = 0;\r\n        let length = props.pageNo;\r\n        while(i < length){\r\n            arrays.push((<span  data-index={i} onClick={(e)=>{\r\n                e.stopPropagation();\r\n                let index = e.target.getAttribute(\"data-index\");\r\n                props.handlePageChange(index);\r\n            }} className={(props.cur == i? \"cur-page-btn \" : \"\") + \"page-no\"} key={i}>{i + 1}</span>));\r\n            i+=1;\r\n        }\r\n        return arrays;\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        //if the current page number is updated\r\n        setCurPage(props.cur);\r\n        setListOfPage(generatePageNo());\r\n    },[props.cur]);\r\n    useEffect(()=>{\r\n        setListOfPage(generatePageNo());\r\n    },[props.pageNo]);\r\n    return (\r\n        <div className=\"pagination-controller\">\r\n            <span hidden={curPage == 0} className=\"first-btn\" onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.first();\r\n            }}>First</span>\r\n            <span className=\"prev-btn\" hidden={curPage == 0} onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.prev();\r\n            }}>Prev</span>\r\n            <span key={curPage} className=\"pages-number\">\r\n                {listOfPage}\r\n            </span>\r\n            <span hidden={curPage == props.lastP } className=\"next-btn\"onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.next();\r\n            }}>Next</span>\r\n            <span hidden={curPage == props.lastP } className=\"last-btn\"onClick={(e)=>{\r\n                e.stopPropagation();\r\n                props.last();\r\n            }}>Last</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PaginationController;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CustomerService\\index.js",["486","487"],"import React, {useState, useEffect} from 'react';\r\nimport FlexLinks from './../Plugins/FlexLinks';\r\nimport SERVICEITEMS from './../../Constants/ServicesItems';\r\nimport {AiFillCreditCard} from 'react-icons/ai';\r\nimport {MdAssignmentReturn, MdAccountBox} from 'react-icons/md';\r\nimport {FaGift} from 'react-icons/fa';\r\nimport {GiHelp} from 'react-icons/gi';\r\nimport {RiShoppingBag2Fill} from 'react-icons/ri';\r\nimport \"./customer-service.scss\";\r\nconst CustomerService = () => {\r\n    const [list, setList] =  useState(null);\r\n    const SERVICESICONS = {\r\n        \"help and guide\": {icon: <GiHelp></GiHelp>, description: \"How to navigate account and others, this is where you can find Q and A and other information reagarding the service and your account\"}, \r\n        \"refunds\": {icon: <MdAssignmentReturn></MdAssignmentReturn> , description: \"Want to return and get refund on a certain item? look no further\"} , \r\n        \"your account\": {icon:  <MdAccountBox></MdAccountBox> , description: \"Mange your account, you can update shipping information, payments, giftcards, and other personal informations\"}, \r\n        \"payments\": {icon: <AiFillCreditCard></AiFillCreditCard>, description: \"Add, delete and update cards that you owned\"} ,\r\n        \"gift cards\": {icon: <FaGift></FaGift>, description: \"Add, delete and update gift cards that you owned\"}, \r\n        \"orders\": {icon: <GiHelp></GiHelp>, description: \"Keep track of your orders here, consist of current and from the past orders\"}}\r\n    useEffect(() => {\r\n        let daList = SERVICEITEMS.map((item)=>{\r\n            let iconItem = SERVICESICONS[item.title];\r\n            item.extra = iconItem.icon;\r\n            item.description = iconItem.description; \r\n            return item;\r\n        });\r\n        setList(daList);\r\n    }, []);\r\n    return (\r\n        <div className=\"customer-service\">\r\n            <h4>Customer Service</h4>\r\n            {list !== null && <FlexLinks list={list} >\r\n\r\n            </FlexLinks>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerService;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\ServicesItems.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\FlexLinks\\index.js",["488","489"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\FlexLinks\\FlexLink\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\ProtectedRoute\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\CustomerService\\Help\\index.js",["490","491","492","493"],"import React, {useState, useEffect} from 'react';\r\nimport CollapseTab from './../../Plugins/CollapseTab';\r\nimport Firebase from './../../Firebase';\r\nimport './help.scss';\r\nconst Help = (props) => {\r\n    let {sub,section} = props.match.params;\r\n    const db = Firebase.firestore();\r\n    const LIST_MAIN_ITEMS = [\"helps\", \"guides\"];\r\n    let preparedList;\r\n    let updateCurrentItem = (item) =>{\r\n        setCurrentItem(item);\r\n    }\r\n    const [list, setList] = useState([\r\n        {\r\n            title: \"helps\",\r\n            content: \"\"\r\n        },\r\n        {\r\n            title: \"guides\",\r\n            content: \"\"\r\n        }\r\n    ])\r\n    let retrieveDocumentsFromFireStore = () =>{\r\n        for (let i = 0; i < LIST_MAIN_ITEMS.length; i += 1){\r\n            let daList = [];\r\n            db.collection(LIST_MAIN_ITEMS[i]).onSnapshot((querySnapshot) => {\r\n                querySnapshot.forEach((doc)=>{\r\n                    daList.push(doc.data());\r\n                });\r\n                let newArr = [...list];\r\n                newArr[i].content =  <ul className={LIST_MAIN_ITEMS[i] + \" side-panel-items\"}>{daList.map((item)=>(\r\n                    <li key={item.title} className=\"help-list-item\" onClick={()=>{\r\n                        updateCurrentItem(item);\r\n                    }}>{item.title}</li>))}\r\n                    </ul>;\r\n                setList(newArr);\r\n            })\r\n        }\r\n      \r\n    }\r\n   \r\n    const [currentItem, setCurrentItem] = useState(null);\r\n    const [proccessedList, SetProcessedList] = useState([]);\r\n    let processContentParagraph = (p) =>{\r\n        let paragraphs = p.split(\"$$$\");\r\n        return paragraphs.map((item, index)=>(\r\n            <p key={index}>{item}</p>\r\n        ));\r\n    }\r\n    useEffect(() => {\r\n            retrieveDocumentsFromFireStore();\r\n    }, []);\r\n    useEffect(()=>{\r\n        if(proccessedList.length === 0){\r\n            SetProcessedList(list);\r\n        }\r\n    },[list]);\r\n    useEffect(()=>{\r\n        if(proccessedList.length !== 0){\r\n            //whenever params changes or the List is ready, update the current Item\r\n            if(sub && section){\r\n                db.collection(section).doc(sub.replaceAll(\"_\",\" \")).get().then((snap)=>{\r\n                    setCurrentItem(snap.data());\r\n                })\r\n            }\r\n        }\r\n    },[proccessedList,props.match.params]);\r\n    return (\r\n        <div className=\"help\">\r\n            <h4>Help</h4>\r\n            <div className=\"panel\">\r\n            <div className=\"side-panel\">\r\n                <CollapseTab list={proccessedList? proccessedList : []} >\r\n                </CollapseTab>\r\n            </div>\r\n            <div className=\"display-panel\">\r\n                {currentItem ? <div>\r\n                    <h3>{currentItem.title}</h3>\r\n                    <div className=\"help-content\">{processContentParagraph(currentItem.content)}</div>\r\n                </div>:<div className=\"no current Item\">Please choose the question on the collapsable list on the left side</div>}\r\n               \r\n            </div>\r\n            </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Help;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CollapseTab\\index.js",["494"],"import React from 'react';\r\nimport './collapse-tab.scss';\r\nimport {RiArrowUpSLine,RiArrowDownSLine} from 'react-icons/ri';\r\nconst CollapseTab = (props) => {\r\n    let handleCollapse = (e) => {\r\n        const target = e.target;\r\n        let contentBox, id, arrowUp, arrowDown;\r\n        if(target.nodeName ===\"IMG\"){\r\n            contentBox =  target.parentElement.parentElement.nextSibling;\r\n            contentBox.classList.toggle(\"display-none\");\r\n        } else if(!target.matches(\".collapse-title\")){\r\n            contentBox = target.parentElement.nextSibling\r\n            contentBox.classList.toggle(\"display-none\");\r\n        } else {\r\n           contentBox =  target.nextElementSibling;\r\n           contentBox.classList.toggle(\"display-none\")\r\n        };\r\n        id = contentBox.getAttribute(\"id\");\r\n        arrowUp = contentBox.previousSibling.children[0];\r\n        arrowDown = contentBox.previousSibling.children[1];\r\n        if(contentBox.classList.contains(\"display-none\")){\r\n            arrowUp.classList.add(\"hidden-arrow\");\r\n            arrowDown.classList.remove(\"hidden-arrow\"); \r\n        }else{\r\n            arrowUp.classList.remove(\"hidden-arrow\");\r\n            arrowDown.classList.add(\"hidden-arrow\"); \r\n        }\r\n    }\r\n    return (\r\n        <div className=\"collapse-tabs\">\r\n            {props.list && props.list.map((item,index)=>{\r\n                return(\r\n                <div className=\"collapse-tab\" key={index} id={\"collapse-\"+index}>\r\n                    <div className=\"collapse-title\" onClick={handleCollapse}>\r\n                        {item.title}\r\n                        <RiArrowUpSLine id={index+\"-arrowup\"}></RiArrowUpSLine>\r\n                        <RiArrowDownSLine id={index+\"-arrowdown\"} className=\"hidden-arrow\"></RiArrowDownSLine>\r\n                    </div>\r\n                    <div className=\"collapse-content\" id={index}>\r\n                        {item.content}\r\n                    </div>\r\n                </div>\r\n                )\r\n            })}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CollapseTab;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Footer\\index.js",["495","496","497"],"import React, {useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Firebase from 'firebase';\r\nimport './footer.scss';\r\nconst Footer = () => {\r\n    const [list, setList] = useState({});\r\n    const [preparedList, setPreparedList] = useState([]);\r\n    const db = Firebase.firestore();\r\n    const LIST_OF_ITEMS = [\"account guides\", \"helps\" ,\"guides\"];\r\n    const currentTime = new Date();\r\n    let fetchItems = () =>{\r\n        let myList = {};\r\n        for (var i = 0; i < LIST_OF_ITEMS.length; i += 1){\r\n            let item = LIST_OF_ITEMS[i];\r\n            let daList = [];\r\n            db.collection(item).get().then(querySnapshot=>{\r\n                querySnapshot.forEach(data=>{\r\n                    daList.push(data.data());\r\n                });\r\n               myList[item] = daList;\r\n               // setList((prevState) => {...prevState, holdArray});\r\n            }).then(()=>{\r\n                if(Object.keys(myList).length === LIST_OF_ITEMS.length){\r\n                    //to make sure that there is maximum items of the array \r\n                    setList(myList);\r\n                }\r\n            })\r\n        }\r\n        \r\n        }\r\n    let prepareComponents = () =>{\r\n        setPreparedList(()=>{\r\n            let array = [];\r\n            for (var dakey in list){\r\n                array.push(<ul key={dakey} className=\"footer-items\">\r\n                    <li className=\"main-item\">{dakey}</li>\r\n                    {list[dakey].map((item)=>(\r\n                        <li key={item.title}><Link to={item.route? item.route: \"#\"}>{item.title}</Link></li>\r\n                    ))}\r\n                </ul>)\r\n            }\r\n            return array;\r\n        })\r\n    }\r\n    useEffect(() => {\r\n            fetchItems();\r\n    }, []);\r\n    useEffect(()=>{\r\n       prepareComponents();\r\n    },[list])\r\n    return (\r\n        <div className=\"footer\">\r\n            {preparedList ? preparedList : \"Nothing\"}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\index.js",["498","499"],"import React,{useEffect, useState} from 'react';\r\nimport EmailForm from './EmailForm';\r\nimport ContactInfo from './ContactInfo';\r\nimport {RiProfileLine} from 'react-icons/ri';\r\nimport {MdEmail} from 'react-icons/md';\r\nimport './contact-us.scss';\r\nconst ContactUs = (props) => {\r\n\r\n    return (\r\n        <div className=\"contact-us\">\r\n            <h4> Contact Us</h4>\r\n            <h6 className=\"contact-title\"><RiProfileLine></RiProfileLine>Contact Information</h6>\r\n            <ContactInfo></ContactInfo>\r\n            <h6 className=\"contact-title\"><MdEmail></MdEmail> sent us an email!</h6>\r\n            <EmailForm account={props.account}></EmailForm>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactUs;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\Constants\\EmailJSInfo.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\EmailForm\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\ContactBox\\index.js",["500","501"],"import React, {useState,useEffect} from 'react';\r\nimport './contact-box.scss';\r\nimport Firebase from \"./../../../Firebase\";\r\nimport {AiOutlineShop, AiOutlinePhone, AiOutlineMail} from 'react-icons/ai';\r\nimport {GoLocation} from 'react-icons/go';\r\nconst ContactBox = () => {\r\n    const [list, setList] = useState([]);\r\n    const [preparedComponent, setPreparedComponent] = useState([]);\r\n    const db = Firebase.firestore();\r\n    const ICON_MATCH = {\r\n        \"company name\": <AiOutlineShop></AiOutlineShop>,\r\n        \"phone\": <AiOutlinePhone></AiOutlinePhone>,\r\n        \"email\": <AiOutlineMail></AiOutlineMail>,\r\n        \"address\": <GoLocation></GoLocation>,\r\n    }\r\n    let fetchListFromDb = () =>{\r\n        db.collection(\"contact informations\").get().then((snap)=>{\r\n            let dalist = [...list];\r\n            snap.forEach((item)=>{\r\n                dalist.push(item.data());\r\n            });\r\n            setList(dalist);\r\n        })\r\n    }\r\n    let makeComponentFromList = () => {\r\n        return list.map((item)=>(\r\n            <div key={item.title} className=\"contact-bar\">\r\n                <div className=\"contact-title\">\r\n                    {ICON_MATCH[item.title]}\r\n                </div>\r\n                <div className=\"contact-content\">\r\n                    {item.content}\r\n                </div>\r\n            </div>\r\n        )) \r\n  \r\n    }\r\n    useEffect(()=>{\r\n        fetchListFromDb();\r\n    },[])\r\n    useEffect(() => {\r\n        if(preparedComponent.length === 0){\r\n            setPreparedComponent(makeComponentFromList());\r\n        }\r\n    }, [list]);\r\n    return (\r\n        <div className=\"contact-box\">\r\n            {preparedComponent? preparedComponent : \"\"}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactBox;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\MapLocation\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\ContactUs\\ContactInfo\\MapLocation\\Marker\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\KartDetail\\SadBag\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourShipping\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourTotal\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourPayment\\index.js",["502"],"import React, {useState, useEffect} from 'react';\r\nimport './your-payment.scss';\r\nconst YourPayment = (props) => {\r\n    const [cardEnd, setCardEnd] = useState(\"\");\r\n    useEffect(()=>{\r\n        let str = props.card[\"card number\"];\r\n        setCardEnd(str.slice(str.length-4));\r\n    },[]) \r\n    return (\r\n        <div className=\"your-payment sub-box flex-full\">\r\n                        <h5>Payment method</h5>\r\n                        <span>{props.card.owner}</span>\r\n                        <span> Card ending in {cardEnd}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default YourPayment;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\PlaceOrder\\YourOrder\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\DisplayPanel\\index.js",["503","504","505","506","507","508"],"import React, {useEffect, useState  , useRef, Fragment} from 'react';\r\nimport Firebase from \"./../../Firebase\";\r\nimport {FaExchangeAlt} from 'react-icons/fa';\r\nimport CustomSelect from './../../Plugins/CustomSelect';\r\nimport Orders from '../Orders';\r\nimport LinkCards from './../Plugins/LinkCards';\r\nimport GCards from '../GCards';\r\nimport Cards from '../Cards';\r\nimport bcrypt from 'bcryptjs';\r\nimport Modal from './../../Plugins/Modal';\r\nimport './display-panel.scss';\r\nimport AwesomeForm from '../../AwesomeForm';\r\nconst DisplayPanel = (props) => {\r\n    const changePassRefModal = useRef(null);\r\n    const EditShippingRefModal = useRef(null);\r\n    const AddShippingRefModal = useRef(null);\r\n    const INITIAL_ADDING_FORM_OBJECT = {\r\n        address: \"\",\r\n        city: \"\",\r\n        current: false,\r\n        resiState: \"\",\r\n        zip: \"\",\r\n        name: \"\"\r\n    }\r\n    const INITIAL_PASSWORD_CHANGE_FORM_OBJECT = {\r\n        password:\"\",\r\n        passwordMatch:\"\",\r\n        validPassword: false,\r\n        passwordMatched: false,\r\n        dirty: false\r\n    }\r\n    const PASSWORD_LENGTH_MINUMUM = 8;\r\n    const otherInfo = [{name: \"Your Cards\", path: \"account/cards\"},{name: \"Gift Cards You Owned\", path: \"account/gcards\"},{name: \"Your Orders\", path: \"account/orders\"}];\r\n    const [curAddress, setCurAddress] = useState();\r\n    const [editAddressForm, setEditAddressForm] = useState({});\r\n    const [beforeEditedAddress, setBeforeEditedAddress] = useState({});\r\n    const [addAddressForm, setAddAddressForm] = useState({...INITIAL_ADDING_FORM_OBJECT});\r\n    const [errorFieldsInAddingForm, setErrorFieldsInAddingForm] = useState([]);\r\n    const [repeatedAddress, setRepeatedAddress] = useState(false);\r\n    const [changePasswordForm, setChangePasswordForm] = useState({...INITIAL_PASSWORD_CHANGE_FORM_OBJECT});\r\n    const db = Firebase.firestore();\r\n    const account = db.collection(\"accounts\").doc(props.account.username);\r\n    let setCurrentPanel = () =>{\r\n        let currentOtion = props.current;\r\n        let thePanels = document.getElementsByClassName(\"panel\");\r\n        for (var i = 0; i < thePanels.length; i+=1){\r\n            thePanels[i].classList.remove(\"current-panel\");\r\n        }\r\n        let thePanel = document.getElementById(currentOtion);\r\n        thePanel.classList.add(\"current-panel\");\r\n    }\r\n    let setFieldOfAccountOnFireStore = (field, data) =>{\r\n        var obj = {};\r\n        obj[field] =  data;\r\n        account.update(obj);\r\n        props.reFetch();\r\n    };\r\n    let handleEditableSwapOfField = (e,col) =>{\r\n            e.stopPropagation();\r\n            var parent = col.parentNode;\r\n            col.hidden = true;\r\n            var dataField = parent.dataset.field;\r\n            var dataObject = parent.dataset.obj;\r\n            if(dataField !== \"username\" && dataField !== \"shippings\"){\r\n                var text = col.textContent;\r\n                var inputElement = document.createElement(\"input\");\r\n                var buttonConfirmed = document.createElement(\"button\");\r\n                var buttonCancel = document.createElement(\"button\");\r\n                let handleCancel = (e, btn)=>{\r\n                    e.stopPropagation();\r\n                    parent.innerHTML = \"\";\r\n                    col.hidden = false;\r\n                    parent.append(col);\r\n                    btn.removeEventListener(\"click\", handleCancel)\r\n                }\r\n                let handleConfirm = (e, btn)=>{\r\n                    e.stopPropagation();\r\n                    parent.innerHTML = \"\";\r\n                    var inputString = inputElement.value;\r\n                    col.hidden= false;\r\n                    parent.append(col);\r\n                    if(dataObject === \"account\"){\r\n                        setFieldOfAccountOnFireStore(dataField, inputString);\r\n                    }\r\n                  btn.removeEventListener(\"click\", handleConfirm);\r\n                    //col.innerHTML = inputString;    \r\n                }\r\n                //Setting the content the input and other buttons on the fly\r\n                inputElement.type = \"text\";\r\n                inputElement.className = \"editable-field\";\r\n                inputElement.value = text;\r\n                buttonCancel.textContent = \"Cancel\"\r\n                buttonCancel.className = \"cancel-edit\";\r\n                buttonConfirmed.textContent = \"Confirmed\";\r\n                //Add events listeners to the buttons\r\n                buttonCancel.addEventListener(\"click\", (event) =>{\r\n                    handleCancel(event,buttonCancel)\r\n                });\r\n               buttonConfirmed.addEventListener(\"click\", (event) => {\r\n                  handleConfirm(event,buttonConfirmed)\r\n               });\r\n                //Add the components to the target\r\n                parent.appendChild(inputElement);\r\n                inputElement.focus();\r\n                parent.appendChild(buttonConfirmed);\r\n                parent.appendChild(buttonCancel);\r\n            }  \r\n    }\r\n    let handleSetcurrentAddress = () => {\r\n        if(props.account.shippings && props.account.shippings.length === 1) {\r\n            //for account that only has 1 shipping address\r\n            let shipping = props.account.shippings[0];\r\n            setCurAddress(shipping);\r\n            setEditAddressForm(shipping);\r\n            setBeforeEditedAddress(shipping);\r\n        } else if(props.account.shippings && props.account.shippings.length > 0){\r\n            let shippings = props.account.shippings;\r\n            for(let shipping of shippings){\r\n                //for primary shipping address, get them first\r\n                if(shipping.current === true){\r\n                    setCurAddress(shipping);\r\n                    setEditAddressForm(shipping);\r\n                    setBeforeEditedAddress(shipping);\r\n                } \r\n            }\r\n        }\r\n    }\r\n    //HANDLE EDITING SHIPPING ADDRESS\r\n    let handleEdittingAddress = (e) =>{\r\n        setEditAddressForm((prevState)=>({\r\n            ...prevState,\r\n            address: e.target.value\r\n        }));\r\n    }\r\n    let handleEdittingCity = (e) =>{\r\n        setEditAddressForm((prevState)=>({\r\n            ...prevState,\r\n            city: e.target.value\r\n        }));\r\n    }\r\n    let handleEdittingState = (e) =>{\r\n        setEditAddressForm((prevState)=>({\r\n            ...prevState,\r\n            resiState: e.target.value\r\n        }));\r\n    }\r\n    let handleEdittingZip = (e) =>{\r\n        setEditAddressForm((prevState)=>({\r\n            ...prevState,\r\n            zip: e.target.value\r\n        }));\r\n    }\r\n    let handleEdittingName = (e) =>{\r\n        setEditAddressForm((prevState)=>({\r\n            ...prevState,\r\n            name: e.target.value\r\n        }))\r\n    }\r\n    let handleConfirmEdit = (e) =>{\r\n        if (beforeEditedAddress !== editAddressForm){\r\n            account.update({\r\n                shippings: Firebase.firestore.FieldValue.arrayRemove(beforeEditedAddress)\r\n            }).then(()=>{\r\n                account.update({\r\n                    shippings: Firebase.firestore.FieldValue.arrayUnion(editAddressForm)\r\n                }).then(()=>{\r\n                    EditShippingRefModal.current.hideModal();\r\n                    setCurAddress(editAddressForm);\r\n                    setEditAddressForm(editAddressForm);\r\n                    setBeforeEditedAddress(editAddressForm);\r\n                    //props.reFetch();\r\n                })\r\n            })\r\n        } else {\r\n            EditShippingRefModal.current.hideModal();\r\n        }  \r\n    }\r\n      //HANDLE ADDING SHIPPING ADDRESS\r\n      let handleAddingAddress = (e) =>{\r\n        setAddAddressForm((prevState)=>({\r\n            ...prevState,\r\n            address: e.target.value\r\n        }));\r\n    }\r\n    let handleAddingCity = (e) =>{\r\n        setAddAddressForm((prevState)=>({\r\n            ...prevState,\r\n            city: e.target.value\r\n        }));\r\n    }\r\n    let handleAddingState = (e) =>{\r\n        setAddAddressForm((prevState)=>({\r\n            ...prevState,\r\n            resiState: e.target.value\r\n        }));\r\n    }\r\n    let handleAddingZip = (e) =>{\r\n        setAddAddressForm((prevState)=>({\r\n            ...prevState,\r\n            zip: e.target.value\r\n        }));\r\n    }\r\n    let handleAddingPrimary = (e) =>{\r\n        setAddAddressForm((prevState)=>({\r\n            ...prevState,\r\n            current: e.target.checked\r\n        }));\r\n    }\r\n    let handleAddingName = (e) =>{\r\n        setAddAddressForm((prevState)=>({\r\n            ...prevState,\r\n            name: e.target.checked\r\n        }));\r\n    }\r\n    let handleConfirmAdd = (e) =>{\r\n        let shippingAddresses = props.account.shippings;\r\n        let primaryChoice = addAddressForm.current;//keep user choice here for the object comparasion later, since the current status can be different \r\n        let repeated = false;\r\n        //but similar address, city, zip and state can be all the same cause same address to slip through validation\r\n        let addressFields = Object.keys(addAddressForm);\r\n        for(let address of shippingAddresses){\r\n          if(address.address === addAddressForm.address){\r\n              repeated = true;\r\n              setRepeatedAddress(true);\r\n          }\r\n        }\r\n        addAddressForm.current = primaryChoice;\r\n\r\n       let errorList = [];\r\n       for (let field of addressFields){\r\n           if(addAddressForm[field] === \"\") errorList.push(field);\r\n       }\r\n       if (errorList.length> 0){\r\n        setErrorFieldsInAddingForm(errorList);\r\n        for (let error of errorList){\r\n            puttingErrorOnInputFieldsInAddingForm(error);\r\n        }\r\n        return;\r\n       }\r\n       \r\n        //Validate \r\n        if (!repeated){\r\n            if(addAddressForm.current === true){\r\n                //reset all primary to false if user want to set new address to primary\r\n                for(let address of shippingAddresses){\r\n                    address.current = false;\r\n                }\r\n            } \r\n            shippingAddresses.push({...addAddressForm});\r\n            account.update({\r\n                shippings: shippingAddresses\r\n            }).then(()=>{\r\n                setCurrentAddressEveryWhere({...addAddressForm});\r\n                props.reFetch();\r\n                setAddAddressForm({...INITIAL_ADDING_FORM_OBJECT});\r\n                setRepeatedAddress(false);\r\n                AddShippingRefModal.current.hideModal();\r\n            })\r\n        } else {\r\n            EditShippingRefModal.current.hideModal();\r\n        }\r\n       \r\n    }\r\n    let puttingErrorOnInputFieldsInAddingForm = (errorField) =>{\r\n        let theForm = document.getElementById(\"modal_add-new-address\");\r\n        let theFields = theForm.getElementsByClassName(\"aform-field\");\r\n        for(let field of theFields){\r\n            if(field.classList.contains(errorField)){\r\n                field.getElementsByTagName(\"input\")[0].classList.add(\"errorInput\")\r\n            }\r\n            \r\n        }\r\n    }\r\n    let resetErrorInput = () =>{\r\n        let forms = document.getElementsByClassName(\"awesome_form\");\r\n        for(let form of forms){\r\n            let inputs = form.getElementsByTagName(\"input\")\r\n            for(let input of inputs){\r\n               input.classList.remove(\"errorInput\");\r\n            }\r\n        }\r\n    }\r\n    //SET PRIMARY FOR ADDRESSES, find the one that is primary, delete it, find the one to be primary, delete it, \r\n    //then add the new primary along with the old primary to the list\r\n    let setThisAsPrimary = (e) => {\r\n        let newShippings = [...props.account.shippings];\r\n        let shippingsFields = Object.keys(curAddress);\r\n        let newCurAddres = {...curAddress};\r\n        //look for the primary one, set primary status to false;\r\n        for (let shipping of newShippings){\r\n            if(shipping.current === true){\r\n                shipping.current = false;\r\n            }\r\n        }\r\n        //find the address to be updated\r\n         for (let shipping of newShippings){\r\n            let matches = 0;\r\n            for(let key of shippingsFields){\r\n                if(shipping[key] === curAddress[key]){\r\n                    matches += 1;\r\n                }\r\n            }\r\n            if(matches === shippingsFields.length){\r\n                //matchess, update the list and the item to be used later\r\n                shipping.current = true;\r\n                newCurAddres.current = true;\r\n            }\r\n        } \r\n        account.update({\r\n            shippings: newShippings\r\n        }).then(()=>{\r\n            props.reFetch();\r\n            setCurrentAddressEveryWhere(newCurAddres);\r\n        })\r\n    }\r\n    //DELETE CURRENT ADDRESS\r\n    let deleteCurrentAddress = () =>{\r\n        let toBeDeleted = {...curAddress};\r\n        let shippingList = [...props.account.shippings];\r\n        let remainingList = shippingList.filter( data => data.address != toBeDeleted.address);\r\n        let remainingIsNotEmpty = remainingList && remainingList.length > 0\r\n        if(toBeDeleted.current === true){   \r\n            if(remainingIsNotEmpty){\r\n                remainingList[0].current = true;\r\n            }\r\n        }\r\n        //delete the data first\r\n        account.update({\r\n            shippings: remainingList\r\n        }).then(()=>{\r\n            props.reFetch();\r\n            if(remainingIsNotEmpty){\r\n                setCurrentAddressEveryWhere(props.account.shippings[0])\r\n            };\r\n        })\r\n    }\r\n    //handle when shipping address is change throught the custom select component\r\n    let setOption = (address) =>{\r\n        setCurrentAddressEveryWhere(address);\r\n    }\r\n    //update the current address, forms\r\n    let setCurrentAddressEveryWhere = (address) =>{\r\n        setCurAddress(address);\r\n        setEditAddressForm(address);\r\n        setBeforeEditedAddress(address);\r\n    }\r\n    //CHANGE PASSWORD\r\n    let hashPasswordForAccount = (pass) =>{ //send the hash version to the server\r\n        const salt = bcrypt.genSaltSync(10);\r\n        var dahash = bcrypt.hashSync(pass,salt);\r\n        return dahash;\r\n    }\r\n    let handlePasswordChange = (e) =>{\r\n        setChangePasswordForm((prevState)=>({\r\n            ...prevState,\r\n            password: e.target.value\r\n        }));\r\n        if(changePasswordForm.dirty === false){\r\n            setChangePasswordForm((prevState)=>({\r\n                ...prevState,\r\n               dirty: true\r\n            }));\r\n        } else {\r\n            if(changePasswordForm.passwordMatch.length >0){\r\n                setChangePasswordForm((prevState)=>({\r\n                    ...prevState,\r\n                    passwordMatched: e.target.value === changePasswordForm.passwordMatch\r\n                }))\r\n            }\r\n        }\r\n    }\r\n    let handlePasswordMatchChange = (e) =>{\r\n       setChangePasswordForm((prevState)=>({\r\n            ...prevState,\r\n           passwordMatch: e.target.value,\r\n           passwordMatched: e.target.value === changePasswordForm.password\r\n        }))\r\n        if(changePasswordForm.dirty === false){\r\n            setChangePasswordForm((prevState)=>({\r\n                ...prevState,\r\n               dirty: true\r\n            }));\r\n        }\r\n    }\r\n    let handleMatchingPassword = () =>{\r\n        setChangePasswordForm((prevState)=>({\r\n            ...prevState,\r\n            passwordMatched: prevState.password === prevState.passwordMatch\r\n        }))\r\n    }\r\n    let handleCheckPasswordLength = () =>{\r\n        setChangePasswordForm((prevState)=>({\r\n            ...prevState,\r\n           validPassword: changePasswordForm.password.length >= PASSWORD_LENGTH_MINUMUM \r\n        }))\r\n    }\r\n    let handleConfirmPassword = () =>{\r\n       account.update({\r\n            password: hashPasswordForAccount(changePasswordForm.password)\r\n        }).then(()=>{ \r\n            db.collection(\"users\").doc(props.account.username).update({\r\n                password: hashPasswordForAccount(changePasswordForm.password),\r\n            }).then(()=>{\r\n                let daChangePassModal = document.getElementById(\"modal_change-password\");\r\n                let formContainer, okMessateContainer;\r\n                if(daChangePassModal){\r\n                    formContainer = daChangePassModal.getElementsByClassName(\"form-in-modal\")[0];\r\n                    okMessateContainer = daChangePassModal.getElementsByClassName(\"password-change-ok-message\")[0];\r\n                }\r\n                if(okMessateContainer&&formContainer){\r\n                    okMessateContainer.classList.remove(\"display-none\");\r\n                    formContainer.classList.add(\"display-none\");\r\n                }\r\n            }).catch((error)=>{\r\n                console.log(error);\r\n            })\r\n           \r\n       }).catch((error)=>{\r\n           console.log(error);\r\n       }) \r\n    }\r\n    let resetChangePasswordForm = () =>{\r\n        let daChangePassModal = document.getElementById(\"modal_change-password\");\r\n        let formContainer, okMessateContainer;\r\n            if(daChangePassModal){\r\n                formContainer = daChangePassModal.getElementsByClassName(\"form-in-modal\")[0];\r\n                okMessateContainer = daChangePassModal.getElementsByClassName(\"password-change-ok-message\")[0];\r\n            }\r\n        if (formContainer && okMessateContainer){\r\n            formContainer.classList.remove(\"display-none\");\r\n            okMessateContainer.classList.add(\"display-none\");\r\n        }\r\n        setChangePasswordForm({...INITIAL_PASSWORD_CHANGE_FORM_OBJECT});\r\n    }\r\n    useEffect(() => {\r\n        //Add click event to editable component of personal information section\r\n        let cols = document.getElementsByClassName(\"edit-hover\");\r\n        for( var i = 0; i < cols.length; i+=1){\r\n            let col = cols[i];\r\n\r\n            col.addEventListener(\"click\", (e) => {handleEditableSwapOfField(e,col)});\r\n        }\r\n        //handle address for shipping information\r\n        handleSetcurrentAddress();\r\n        //setAddress(props.account.shippings[0]);\r\n    },[]);\r\n    useEffect(() => {\r\n        if(props.current !== undefined){\r\n            setCurrentPanel();\r\n            \r\n        }\r\n    }, [props.current]);\r\n    return (\r\n        <div className=\"display-panel\">\r\n             <div className=\"panel\" id=\"information\">\r\n               { props.account && <div className=\"information-container sub-section\">\r\n               <h5 className=\"panel-title\">Personal information</h5>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">User Name</div>\r\n                            <div className=\"content-col\" data-field=\"username\">{props.account.username}</div>\r\n                        </div>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">Email</div>\r\n                            <div className=\"content-col editable\" data-obj=\"account\" data-field=\"email\"><div className=\"edit-hover\">{props.account.email}</div></div>\r\n                        </div>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">Phone</div>\r\n                            <div className=\"content-col editable\" data-obj=\"account\" data-field=\"phone\"><div className=\"edit-hover\">{props.account.phone}</div></div>\r\n                        </div>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">Nick Name</div>\r\n                            <div className=\"content-col editable\" data-obj=\"account\" data-field=\"nickname\"><div className=\"edit-hover\">{props.account.nickname}</div></div>\r\n                        </div>\r\n                        </div>}\r\n                <div className=\"shipping sub-section information-container\">\r\n                    <h5 className=\"panel-title\">\r\n                        shippings\r\n                    </h5>\r\n                    {curAddress ? \r\n                        <Fragment>\r\n                            { (props.account.shippings.length > 1) && <CustomSelect id=\"select-shipping\" setOption={setOption} label=\"View different address\" desiredField=\"address\" list={props.account.shippings}></CustomSelect>}\r\n                          <div className=\"field-panel\">\r\n                            <div className=\"title-col\">Address</div>\r\n                            <div className=\"content-col\" data-obj=\"shipping\" data-field=\"address\">{curAddress.address}</div>\r\n                        </div>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">To Whom:</div>\r\n                            <div className=\"content-col\" data-obj=\"shipping\" data-field=\"name\">{curAddress.name}</div>\r\n                        </div>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">City</div>\r\n                            <div className=\"content-col\" data-obj=\"shipping\" data-field=\"city\">{curAddress.city}</div>\r\n                        </div>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">State</div>\r\n                            <div className=\"content-col\" data-obj=\"shipping\" data-field=\"resiState\">{curAddress.resiState}</div>\r\n                        </div>\r\n                        <div className=\"field-panel\">\r\n                            <div className=\"title-col\">Zip</div>\r\n                            <div className=\"content-col\" data-obj=\"shipping\" data-field=\"zip\">{curAddress.zip}</div>\r\n                        </div>\r\n                        </Fragment>\r\n                        : \"No shipping address, please add\"}\r\n                        <div className=\"btn-group\">\r\n                            {curAddress && \r\n                            <Fragment>\r\n                            <button onClick={setThisAsPrimary} className={\"operation-btn set-primary-btn\"+ (curAddress.current? \" primary\" : \"\")}>\r\n                                {!curAddress.current? \r\n                                (<span><span class=\"material-icons-outlined\">grade</span>Set this address as primary</span>) \r\n                                : (<span><span class=\"material-icons\">grade</span>This address is primary</span>) }\r\n                            </button>\r\n                            <button className=\"operation-btn edit-btn\" onClick={()=>{\r\n                                EditShippingRefModal.current.showModal();\r\n                            }}><span class=\"material-icons-outlined\">edit</span> Edit this address</button>\r\n                            <button onClick={deleteCurrentAddress} className=\"operation-btn delete-btn\"><span class=\"material-icons-outlined\">delete</span> Delete this address</button>\r\n                            </Fragment>\r\n                            }\r\n                            <button className=\"operation-btn add-btn\" onClick={()=>{\r\n                                setErrorFieldsInAddingForm([]);\r\n                                AddShippingRefModal.current.showModal(resetErrorInput);\r\n                            }}> <span className=\"material-icons-outlined\">add_location_alt</span>Add new address</button>\r\n                        </div>\r\n                    \r\n                </div>\r\n                <div className=\"password sub-section information-container\">\r\n                    <h5 className=\"panel-title\">\r\n                        password\r\n                    </h5>\r\n                    <button className=\"change-password-btn operation-btn\" onClick={()=>{changePassRefModal.current.showModal(resetChangePasswordForm)}}><FaExchangeAlt></FaExchangeAlt>Change Password</button>\r\n                \r\n                </div>\r\n                {/*MODALS CODES HERE*/}\r\n                <Modal hasTitle={true} ref={changePassRefModal} name=\"change-password\">\r\n                    <div className=\"form-in-modal\">\r\n                       <span className=\"form-row-control\">\r\n                            <legend>New Password</legend>\r\n                            <input type=\"password\" value={changePasswordForm.password} onBlur={handleCheckPasswordLength} onChange={handlePasswordChange}></input>\r\n                            <span className=\"error\" hidden={changePasswordForm.validPassword && changePasswordForm.dirty}>Password should be at least 8 characters</span>\r\n                        </span>\r\n                        <span className=\"form-row-control\">\r\n                            <legend>Re enter new password </legend>\r\n                            <input type=\"password\" value={changePasswordForm.passwordMatch} onChange={handlePasswordMatchChange}></input>\r\n                            <span className=\"error\" hidden={changePasswordForm.passwordMatched && changePasswordForm.dirty}>Password re-entered should be match with the above</span>\r\n                        </span>\r\n                        <button onClick={handleConfirmPassword} className={\"aform-button submit half\" + (changePasswordForm.dirty && changePasswordForm.validPassword && changePasswordForm.passwordMatched ? \"\" : \" not-ready\")}>Confirm Password Change</button>\r\n                    </div>\r\n                    <div className=\"password-change-ok-message display-none\">\r\n                        <div className=\"message\"><span class=\"material-icons-round\">done</span>Great! You are off to a new password!</div>\r\n                        <button onClick={()=>{changePassRefModal.current.hideModal()}}>Ok</button>\r\n                    </div>\r\n                </Modal>\r\n                <Modal autoHeight={true} hasTitle={true} ref={EditShippingRefModal} name=\"edit-address\">\r\n                    <AwesomeForm included={true}>\r\n                            <span className=\"address aform-field\">\r\n                                <label>Address</label>\r\n                                <input type=\"text\" required={true} onChange={handleEdittingAddress} value={editAddressForm.address}  autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"address aform-field\">\r\n                                <label>To Whom</label>\r\n                                <input type=\"text\" required={true} onChange={handleEdittingName} value={editAddressForm.name}  autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"city aform-field half\">\r\n                                <label>City</label>\r\n                                <input type=\"text\" required={true} onChange={handleEdittingCity} value={editAddressForm.city} autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"resiState aform-field half\">\r\n                                <label>State</label>\r\n                                <input type=\"text\" required={true} onChange={handleEdittingState} value={editAddressForm.resiState} autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"zip aform-field half\">\r\n                                <label>Zip code</label>\r\n                                <input type=\"text\" required={true} onChange={handleEdittingZip} value={editAddressForm.zip} autoComplete={false}>{}</input>\r\n                            </span>\r\n                            <button className=\"aform-button submit half\" onClick={handleConfirmEdit}>Confirm</button>\r\n                    </AwesomeForm>\r\n                </Modal>\r\n                <Modal autoHeight={true} hasTitle={true} ref={AddShippingRefModal} name=\"add-new-address\">\r\n                    <AwesomeForm included={true}>\r\n                            <span className={\"error-repeated error-message\" + (repeatedAddress? \"\" : \" hidden-message\") }>This address is repeated, please change one of the field below</span>\r\n                            <span className={\"error-empty error-message\" + (errorFieldsInAddingForm && errorFieldsInAddingForm.length > 0 ? \"\" : \" hidden-message\") }>\r\n                                Please fill \r\n                                {\r\n                                    errorFieldsInAddingForm && errorFieldsInAddingForm.map((item)=>(<span className=\"error-field-item\">{(item === \"resiState\" ? \"state\" : item)}</span>))\r\n                                }\r\n                            </span>\r\n                            <span className=\"address aform-field\">\r\n                                <label>Address</label>\r\n                                <input type=\"text\" onChange={handleAddingAddress} value={addAddressForm.address}  autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"address aform-field\">\r\n                                <label>Name on Address</label>\r\n                                <input type=\"text\" onChange={handleAddingName} value={addAddressForm.name}  autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"city aform-field half\">\r\n                                <label>City</label>\r\n                                <input type=\"text\" onChange={handleAddingCity} value={addAddressForm.city} autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"resiState aform-field half\">\r\n                                <label>State</label>\r\n                                <input type=\"text\" onChange={handleAddingState} value={addAddressForm.resiState} autoComplete={false}></input>\r\n                            </span>\r\n                            <span className=\"zip aform-field half\">\r\n                                <label>Zip code</label>\r\n                                <input type=\"text\" onChange={handleAddingZip} value={addAddressForm.zip} autoComplete={false}>{}</input>\r\n                            </span>\r\n                            <span className=\"current aform-field fourth\">\r\n                                <label>Set as primary?</label>\r\n                                <input type=\"checkbox\" onChange={handleAddingPrimary} value={addAddressForm.current} >{}</input>\r\n                            </span>\r\n                            <button className={\"aform-button submit fourth\"} onClick={handleConfirmAdd}>Confirm</button>\r\n                    </AwesomeForm>\r\n                </Modal>\r\n               {/*  <div className=\"other-information-access\">\r\n                    {otherInfo && <LinkCards list={otherInfo}>\r\n                    </LinkCards>}\r\n                </div> */}\r\n            </div>\r\n\r\n            <div className=\"panel\" id=\"settings\">\r\n                Place holder for setting components\r\n            </div>\r\n            <div className=\"panel\" id=\"orders\">\r\n               <Orders ordersOfAccount={props.account.orders}></Orders>\r\n            </div>\r\n            <div className=\"panel\" id=\"payments\">\r\n                <Cards reFetch={props.reFetch} accountID={props.account.username} list={props.account.cards}></Cards>\r\n                <GCards reFetch={props.reFetch} accountID={props.account.username} list={props.account.gcards}></GCards>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayPanel;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\OptionPanel\\index.js",["509","510","511"],"import React, {useState, useEffect} from 'react';\r\nimport './option-panel.scss';\r\nconst OptionPanel = (props) => {\r\n    const [list, setList] = useState([]);\r\n    const [current, setCurrent] = useState(props.list[0].name);\r\n    useEffect(() => {\r\n        setList(props.list);\r\n    }, []);\r\n    useEffect(() => {\r\n       setCurrent(props.current)\r\n    }, [props.current]);\r\n    return (\r\n        <ul className=\"option-panel\">\r\n            {list.length > 0 ? list.map((item) =>\r\n                (<li key={item.name}>\r\n                    <a className={current === item.name ? \"currentOp\" : \"\"} onClick={(e)=>{\r\n                        e.preventDefault();\r\n                        props.setCurrent(item.name);\r\n                        setCurrent(item.name);\r\n                    }} href=\"#\">\r\n                        {item.name}\r\n                    </a>\r\n                </li>)\r\n            ) : <span>No item</span>}        \r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default OptionPanel;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CustomSelect\\index.js",["512","513","514","515"],"import React, {useState,useEffect} from 'react';\r\nimport './custom-select.scss';\r\nconst CustomSelect = (props) =>{\r\n    //to provide list for list of item, desiredField for what value or name would be used in the item \r\n    //optional setOption function to be passed so that any change from here will be notified to the user \r\n    //of this plugin\r\n    const [list, setList] = useState(props.list);\r\n    const [id, setID] = useState(props.id);\r\n    const [selected, setSelected] = useState({});\r\n    const [dropped, setDropped] = useState(false);\r\n    const [desiredField, setDesiredField] = useState(props.desiredField? props.desiredField : \"name\");\r\n    let handleSelected = (item) =>{\r\n        setSelected(item);\r\n        //if the user pass the set option function\r\n        props.setOption && props.setOption(item);\r\n        closeList();\r\n    }\r\n    let dropList = (e) =>{\r\n        e.stopPropagation();\r\n        setDropped(true);\r\n        var dropdown = document.getElementById(id);\r\n        if (dropdown){\r\n            dropdown.classList.add(\"expanded\");\r\n        }\r\n    }\r\n    let closeList = () =>{\r\n        setDropped(false);\r\n        var dropdown = document.getElementById(id);\r\n        if(dropdown){\r\n            dropdown.classList.remove(\"expanded\");\r\n        }\r\n       \r\n    }\r\n    let handleOutSideClick = () =>{\r\n        const outsideClickListener = e => {\r\n            if(e.target.closest(\"custom-select\") === null){\r\n                //function to close component is here\r\n                closeList();\r\n                removeOutsideClick();\r\n            } \r\n        }\r\n        const removeOutsideClick = () =>{\r\n            document.removeEventListener(\"click\",handleOutSideClick);\r\n        }\r\n        document.addEventListener('click', outsideClickListener);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setList(props.list);\r\n        setSelected(props.selected? props.selected: props.list[0]);\r\n    }, []);\r\n    useEffect(()=>{\r\n        setList(props.list);\r\n    },[props.list])\r\n    return (\r\n        <div className=\"custom-select\">\r\n            <div className=\"select-list-container\">\r\n                <div onClick={(e)=>{\r\n                dropList(e); \r\n                handleOutSideClick();\r\n                }} className={\"selected\" + (dropped? \" select-clicked\" : \" \") }>{props.label ? props.label : \"Select \" + desiredField} \r\n                {!dropped ? <span className=\"material-icons-outlined\">expand_more</span> : <span className=\"material-icons-outlined\">expand_less</span> }</div>\r\n                <div className=\"list-dropdown\" id={id}>\r\n                    {list && list.map((item)=>(\r\n                        <div key={item[desiredField]} onClick={(e)=>{\r\n                            handleSelected(item)}}>\r\n                            {item[desiredField]}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomSelect;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CoolTable\\index.js",["516","517"],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CoolTable\\TableTitle\\index.js",["518"],"import React from 'react';\r\nimport './table-title.scss';\r\nconst TableTitle = (props) => {\r\n    return (\r\n        <div className=\"table-title\">\r\n            {props.titleList && props.titleList.map((item,index)=>(\r\n                <div className={\"title-item\"+\" col-\"+(index+1)} key={item}>{item}</div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableTitle;\r\n","C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Plugins\\CoolTable\\TableRow\\index.js",[],"C:\\Users\\quang chu\\OneDrive\\Desktop\\Front end apps\\React Practice\\commercial\\src\\components\\Account\\Orders\\NoOrder\\index.js",[],{"ruleId":"519","replacedBy":"520"},{"ruleId":"521","replacedBy":"522"},{"ruleId":"523","severity":1,"message":"524","line":1,"column":37,"nodeType":"525","messageId":"526","endLine":1,"endColumn":43},{"ruleId":"523","severity":1,"message":"527","line":17,"column":8,"nodeType":"525","messageId":"526","endLine":17,"endColumn":14},{"ruleId":"523","severity":1,"message":"528","line":19,"column":8,"nodeType":"525","messageId":"526","endLine":19,"endColumn":13},{"ruleId":"523","severity":1,"message":"529","line":20,"column":8,"nodeType":"525","messageId":"526","endLine":20,"endColumn":14},{"ruleId":"523","severity":1,"message":"530","line":32,"column":8,"nodeType":"525","messageId":"526","endLine":32,"endColumn":25},{"ruleId":"523","severity":1,"message":"531","line":61,"column":16,"nodeType":"525","messageId":"526","endLine":61,"endColumn":21},{"ruleId":"523","severity":1,"message":"532","line":61,"column":24,"nodeType":"525","messageId":"526","endLine":61,"endColumn":32},{"ruleId":"533","severity":1,"message":"534","line":131,"column":32,"nodeType":"535","messageId":"536","endLine":131,"endColumn":33},{"ruleId":"537","severity":1,"message":"538","line":172,"column":24,"nodeType":"539","messageId":"540","endLine":172,"endColumn":26},{"ruleId":"541","severity":1,"message":"542","line":240,"column":11,"nodeType":"543","endLine":240,"endColumn":13,"suggestions":"544"},{"ruleId":"541","severity":1,"message":"545","line":266,"column":11,"nodeType":"543","endLine":266,"endColumn":17,"suggestions":"546"},{"ruleId":"523","severity":1,"message":"547","line":2,"column":15,"nodeType":"525","messageId":"526","endLine":2,"endColumn":23},{"ruleId":"523","severity":1,"message":"548","line":7,"column":10,"nodeType":"525","messageId":"526","endLine":7,"endColumn":16},{"ruleId":"549","severity":1,"message":"550","line":89,"column":9,"nodeType":"551","endLine":89,"endColumn":19},{"ruleId":"549","severity":1,"message":"550","line":95,"column":9,"nodeType":"551","endLine":95,"endColumn":19},{"ruleId":"523","severity":1,"message":"552","line":2,"column":13,"nodeType":"525","messageId":"526","endLine":2,"endColumn":19},{"ruleId":"523","severity":1,"message":"530","line":4,"column":8,"nodeType":"525","messageId":"526","endLine":4,"endColumn":25},{"ruleId":"523","severity":1,"message":"553","line":6,"column":12,"nodeType":"525","messageId":"526","endLine":6,"endColumn":20},{"ruleId":"523","severity":1,"message":"554","line":6,"column":22,"nodeType":"525","messageId":"526","endLine":6,"endColumn":33},{"ruleId":"541","severity":1,"message":"555","line":33,"column":8,"nodeType":"543","endLine":33,"endColumn":10,"suggestions":"556"},{"ruleId":"519","replacedBy":"557"},{"ruleId":"521","replacedBy":"558"},{"ruleId":"523","severity":1,"message":"559","line":4,"column":9,"nodeType":"525","messageId":"526","endLine":4,"endColumn":17},{"ruleId":"541","severity":1,"message":"560","line":83,"column":8,"nodeType":"543","endLine":83,"endColumn":14,"suggestions":"561"},{"ruleId":"562","severity":1,"message":"563","line":111,"column":33,"nodeType":"564","endLine":111,"endColumn":134},{"ruleId":"523","severity":1,"message":"565","line":15,"column":19,"nodeType":"525","messageId":"526","endLine":15,"endColumn":27},{"ruleId":"541","severity":1,"message":"566","line":44,"column":8,"nodeType":"543","endLine":44,"endColumn":17,"suggestions":"567"},{"ruleId":"523","severity":1,"message":"568","line":1,"column":16,"nodeType":"525","messageId":"526","endLine":1,"endColumn":25},{"ruleId":"541","severity":1,"message":"569","line":37,"column":8,"nodeType":"543","endLine":37,"endColumn":10,"suggestions":"570"},{"ruleId":"541","severity":1,"message":"571","line":42,"column":8,"nodeType":"543","endLine":42,"endColumn":17,"suggestions":"572"},{"ruleId":"523","severity":1,"message":"573","line":8,"column":13,"nodeType":"525","messageId":"526","endLine":8,"endColumn":21},{"ruleId":"562","severity":1,"message":"563","line":40,"column":33,"nodeType":"564","endLine":40,"endColumn":106},{"ruleId":"549","severity":1,"message":"550","line":25,"column":8,"nodeType":"551","endLine":25,"endColumn":18},{"ruleId":"523","severity":1,"message":"574","line":26,"column":12,"nodeType":"525","messageId":"526","endLine":26,"endColumn":19},{"ruleId":"541","severity":1,"message":"575","line":218,"column":8,"nodeType":"543","endLine":218,"endColumn":10,"suggestions":"576"},{"ruleId":"541","severity":1,"message":"577","line":226,"column":8,"nodeType":"543","endLine":226,"endColumn":28,"suggestions":"578"},{"ruleId":"541","severity":1,"message":"575","line":229,"column":7,"nodeType":"543","endLine":229,"endColumn":19,"suggestions":"579"},{"ruleId":"580","severity":1,"message":"581","line":16,"column":9,"nodeType":"582","messageId":"540","endLine":16,"endColumn":11},{"ruleId":"541","severity":1,"message":"575","line":206,"column":8,"nodeType":"543","endLine":206,"endColumn":10,"suggestions":"583"},{"ruleId":"537","severity":1,"message":"538","line":208,"column":46,"nodeType":"539","messageId":"540","endLine":208,"endColumn":48},{"ruleId":"541","severity":1,"message":"577","line":214,"column":8,"nodeType":"543","endLine":214,"endColumn":28,"suggestions":"584"},{"ruleId":"541","severity":1,"message":"575","line":217,"column":7,"nodeType":"543","endLine":217,"endColumn":19,"suggestions":"585"},{"ruleId":"541","severity":1,"message":"586","line":32,"column":7,"nodeType":"543","endLine":32,"endColumn":9,"suggestions":"587"},{"ruleId":"523","severity":1,"message":"568","line":1,"column":16,"nodeType":"525","messageId":"526","endLine":1,"endColumn":25},{"ruleId":"523","severity":1,"message":"588","line":2,"column":21,"nodeType":"525","messageId":"526","endLine":2,"endColumn":25},{"ruleId":"523","severity":1,"message":"589","line":23,"column":9,"nodeType":"525","messageId":"526","endLine":23,"endColumn":33},{"ruleId":"590","severity":1,"message":"591","line":46,"column":35,"nodeType":"592","messageId":"593","endLine":46,"endColumn":37},{"ruleId":"541","severity":1,"message":"594","line":95,"column":7,"nodeType":"543","endLine":95,"endColumn":18,"suggestions":"595"},{"ruleId":"523","severity":1,"message":"596","line":1,"column":36,"nodeType":"525","messageId":"526","endLine":1,"endColumn":55},{"ruleId":"523","severity":1,"message":"597","line":15,"column":12,"nodeType":"525","messageId":"526","endLine":15,"endColumn":18},{"ruleId":"523","severity":1,"message":"598","line":15,"column":20,"nodeType":"525","messageId":"526","endLine":15,"endColumn":29},{"ruleId":"523","severity":1,"message":"599","line":16,"column":22,"nodeType":"525","messageId":"526","endLine":16,"endColumn":33},{"ruleId":"523","severity":1,"message":"600","line":17,"column":12,"nodeType":"525","messageId":"526","endLine":17,"endColumn":17},{"ruleId":"523","severity":1,"message":"574","line":35,"column":17,"nodeType":"525","messageId":"526","endLine":35,"endColumn":24},{"ruleId":"541","severity":1,"message":"601","line":95,"column":8,"nodeType":"543","endLine":95,"endColumn":10,"suggestions":"602"},{"ruleId":"541","severity":1,"message":"603","line":98,"column":8,"nodeType":"543","endLine":98,"endColumn":14,"suggestions":"604"},{"ruleId":"541","severity":1,"message":"605","line":9,"column":7,"nodeType":"543","endLine":9,"endColumn":9,"suggestions":"606"},{"ruleId":"523","severity":1,"message":"607","line":3,"column":9,"nodeType":"525","messageId":"526","endLine":3,"endColumn":22},{"ruleId":"523","severity":1,"message":"608","line":2,"column":17,"nodeType":"525","messageId":"526","endLine":2,"endColumn":25},{"ruleId":"523","severity":1,"message":"565","line":4,"column":18,"nodeType":"525","messageId":"526","endLine":4,"endColumn":26},{"ruleId":"537","severity":1,"message":"538","line":31,"column":37,"nodeType":"539","messageId":"540","endLine":31,"endColumn":39},{"ruleId":"537","severity":1,"message":"538","line":38,"column":37,"nodeType":"539","messageId":"540","endLine":38,"endColumn":39},{"ruleId":"523","severity":1,"message":"568","line":1,"column":26,"nodeType":"525","messageId":"526","endLine":1,"endColumn":35},{"ruleId":"523","severity":1,"message":"609","line":4,"column":20,"nodeType":"525","messageId":"526","endLine":4,"endColumn":29},{"ruleId":"523","severity":1,"message":"610","line":5,"column":21,"nodeType":"525","messageId":"526","endLine":5,"endColumn":31},{"ruleId":"562","severity":1,"message":"563","line":8,"column":13,"nodeType":"564","endLine":8,"endColumn":77},{"ruleId":"523","severity":1,"message":"611","line":5,"column":14,"nodeType":"525","messageId":"526","endLine":5,"endColumn":19},{"ruleId":"541","severity":1,"message":"612","line":31,"column":7,"nodeType":"543","endLine":31,"endColumn":19,"suggestions":"613"},{"ruleId":"519","replacedBy":"614"},{"ruleId":"521","replacedBy":"615"},{"ruleId":"562","severity":1,"message":"563","line":15,"column":21,"nodeType":"564","endLine":15,"endColumn":82},{"ruleId":"541","severity":1,"message":"616","line":7,"column":7,"nodeType":"543","endLine":7,"endColumn":9,"suggestions":"617"},{"ruleId":"562","severity":1,"message":"563","line":30,"column":37,"nodeType":"564","endLine":30,"endColumn":116},{"ruleId":"541","severity":1,"message":"603","line":133,"column":7,"nodeType":"543","endLine":133,"endColumn":24,"suggestions":"618"},{"ruleId":"541","severity":1,"message":"619","line":142,"column":7,"nodeType":"543","endLine":142,"endColumn":22,"suggestions":"620"},{"ruleId":"541","severity":1,"message":"621","line":165,"column":8,"nodeType":"543","endLine":165,"endColumn":10,"suggestions":"622"},{"ruleId":"523","severity":1,"message":"623","line":22,"column":12,"nodeType":"525","messageId":"526","endLine":22,"endColumn":27},{"ruleId":"523","severity":1,"message":"624","line":36,"column":24,"nodeType":"525","messageId":"526","endLine":36,"endColumn":37},{"ruleId":"523","severity":1,"message":"625","line":14,"column":17,"nodeType":"525","messageId":"526","endLine":14,"endColumn":23},{"ruleId":"541","severity":1,"message":"626","line":49,"column":7,"nodeType":"543","endLine":49,"endColumn":9,"suggestions":"627"},{"ruleId":"541","severity":1,"message":"628","line":55,"column":7,"nodeType":"543","endLine":55,"endColumn":19,"suggestions":"629"},{"ruleId":"630","severity":1,"message":"631","line":6,"column":9,"nodeType":"564","endLine":6,"endColumn":62},{"ruleId":"523","severity":1,"message":"632","line":33,"column":25,"nodeType":"525","messageId":"526","endLine":33,"endColumn":39},{"ruleId":"541","severity":1,"message":"633","line":46,"column":15,"nodeType":"543","endLine":46,"endColumn":17,"suggestions":"634"},{"ruleId":"537","severity":1,"message":"538","line":48,"column":18,"nodeType":"539","messageId":"540","endLine":48,"endColumn":20},{"ruleId":"541","severity":1,"message":"635","line":55,"column":7,"nodeType":"543","endLine":55,"endColumn":21,"suggestions":"636"},{"ruleId":"541","severity":1,"message":"637","line":59,"column":7,"nodeType":"543","endLine":59,"endColumn":16,"suggestions":"638"},{"ruleId":"523","severity":1,"message":"568","line":1,"column":25,"nodeType":"525","messageId":"526","endLine":1,"endColumn":34},{"ruleId":"523","severity":1,"message":"639","line":5,"column":23,"nodeType":"525","messageId":"526","endLine":5,"endColumn":37},{"ruleId":"523","severity":1,"message":"640","line":6,"column":23,"nodeType":"525","messageId":"526","endLine":6,"endColumn":37},{"ruleId":"523","severity":1,"message":"641","line":1,"column":10,"nodeType":"525","messageId":"526","endLine":1,"endColumn":24},{"ruleId":"523","severity":1,"message":"573","line":6,"column":13,"nodeType":"525","messageId":"526","endLine":6,"endColumn":21},{"ruleId":"523","severity":1,"message":"642","line":7,"column":12,"nodeType":"525","messageId":"526","endLine":7,"endColumn":20},{"ruleId":"523","severity":1,"message":"643","line":7,"column":22,"nodeType":"525","messageId":"526","endLine":7,"endColumn":33},{"ruleId":"537","severity":1,"message":"644","line":18,"column":38,"nodeType":"539","messageId":"540","endLine":18,"endColumn":40},{"ruleId":"541","severity":1,"message":"645","line":28,"column":7,"nodeType":"543","endLine":28,"endColumn":18,"suggestions":"646"},{"ruleId":"541","severity":1,"message":"645","line":31,"column":7,"nodeType":"543","endLine":31,"endColumn":21,"suggestions":"647"},{"ruleId":"537","severity":1,"message":"644","line":34,"column":35,"nodeType":"539","messageId":"540","endLine":34,"endColumn":37},{"ruleId":"537","severity":1,"message":"644","line":38,"column":56,"nodeType":"539","messageId":"540","endLine":38,"endColumn":58},{"ruleId":"537","severity":1,"message":"644","line":45,"column":35,"nodeType":"539","messageId":"540","endLine":45,"endColumn":37},{"ruleId":"537","severity":1,"message":"644","line":49,"column":35,"nodeType":"539","messageId":"540","endLine":49,"endColumn":37},{"ruleId":"523","severity":1,"message":"648","line":8,"column":9,"nodeType":"525","messageId":"526","endLine":8,"endColumn":27},{"ruleId":"541","severity":1,"message":"649","line":27,"column":8,"nodeType":"543","endLine":27,"endColumn":10,"suggestions":"650"},{"ruleId":"523","severity":1,"message":"651","line":1,"column":16,"nodeType":"525","messageId":"526","endLine":1,"endColumn":24},{"ruleId":"523","severity":1,"message":"568","line":1,"column":26,"nodeType":"525","messageId":"526","endLine":1,"endColumn":35},{"ruleId":"523","severity":1,"message":"652","line":9,"column":9,"nodeType":"525","messageId":"526","endLine":9,"endColumn":21},{"ruleId":"541","severity":1,"message":"653","line":52,"column":8,"nodeType":"543","endLine":52,"endColumn":10,"suggestions":"654"},{"ruleId":"541","severity":1,"message":"655","line":57,"column":7,"nodeType":"543","endLine":57,"endColumn":13,"suggestions":"656"},{"ruleId":"541","severity":1,"message":"657","line":67,"column":7,"nodeType":"543","endLine":67,"endColumn":42,"suggestions":"658"},{"ruleId":"523","severity":1,"message":"659","line":18,"column":9,"nodeType":"525","messageId":"526","endLine":18,"endColumn":11},{"ruleId":"523","severity":1,"message":"660","line":10,"column":11,"nodeType":"525","messageId":"526","endLine":10,"endColumn":22},{"ruleId":"541","severity":1,"message":"661","line":47,"column":8,"nodeType":"543","endLine":47,"endColumn":10,"suggestions":"662"},{"ruleId":"541","severity":1,"message":"663","line":50,"column":7,"nodeType":"543","endLine":50,"endColumn":13,"suggestions":"664"},{"ruleId":"523","severity":1,"message":"568","line":1,"column":15,"nodeType":"525","messageId":"526","endLine":1,"endColumn":24},{"ruleId":"523","severity":1,"message":"651","line":1,"column":26,"nodeType":"525","messageId":"526","endLine":1,"endColumn":34},{"ruleId":"541","severity":1,"message":"665","line":40,"column":7,"nodeType":"543","endLine":40,"endColumn":9,"suggestions":"666"},{"ruleId":"541","severity":1,"message":"667","line":45,"column":8,"nodeType":"543","endLine":45,"endColumn":14,"suggestions":"668"},{"ruleId":"541","severity":1,"message":"669","line":8,"column":7,"nodeType":"543","endLine":8,"endColumn":9,"suggestions":"670"},{"ruleId":"523","severity":1,"message":"671","line":6,"column":8,"nodeType":"525","messageId":"526","endLine":6,"endColumn":17},{"ruleId":"523","severity":1,"message":"672","line":33,"column":11,"nodeType":"525","messageId":"526","endLine":33,"endColumn":20},{"ruleId":"537","severity":1,"message":"538","line":320,"column":71,"nodeType":"539","messageId":"540","endLine":320,"endColumn":73},{"ruleId":"523","severity":1,"message":"673","line":385,"column":9,"nodeType":"525","messageId":"526","endLine":385,"endColumn":31},{"ruleId":"541","severity":1,"message":"674","line":446,"column":7,"nodeType":"543","endLine":446,"endColumn":9,"suggestions":"675"},{"ruleId":"541","severity":1,"message":"676","line":452,"column":8,"nodeType":"543","endLine":452,"endColumn":23,"suggestions":"677"},{"ruleId":"541","severity":1,"message":"616","line":8,"column":8,"nodeType":"543","endLine":8,"endColumn":10,"suggestions":"678"},{"ruleId":"541","severity":1,"message":"679","line":11,"column":8,"nodeType":"543","endLine":11,"endColumn":23,"suggestions":"680"},{"ruleId":"630","severity":1,"message":"631","line":16,"column":21,"nodeType":"564","endLine":20,"endColumn":33},{"ruleId":"523","severity":1,"message":"681","line":8,"column":16,"nodeType":"525","messageId":"526","endLine":8,"endColumn":21},{"ruleId":"523","severity":1,"message":"682","line":9,"column":12,"nodeType":"525","messageId":"526","endLine":9,"endColumn":20},{"ruleId":"523","severity":1,"message":"683","line":11,"column":26,"nodeType":"525","messageId":"526","endLine":11,"endColumn":41},{"ruleId":"541","severity":1,"message":"684","line":51,"column":8,"nodeType":"543","endLine":51,"endColumn":10,"suggestions":"685"},{"ruleId":"686","severity":1,"message":"687","line":21,"column":73,"nodeType":"539","messageId":"688","endLine":21,"endColumn":74},{"ruleId":"686","severity":1,"message":"687","line":25,"column":73,"nodeType":"539","messageId":"688","endLine":25,"endColumn":74},{"ruleId":"686","severity":1,"message":"687","line":7,"column":45,"nodeType":"539","messageId":"688","endLine":7,"endColumn":46},"no-native-reassign",["689"],"no-negated-in-lhs",["690"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Orders' is defined but never used.","'Cards' is defined but never used.","'GCards' is defined but never used.","'OverlayScrollbars' is defined but never used.","'osRef' is assigned a value but never used.","'setOsRef' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'db', 'location.pathname', 'thisref', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["691"],"React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["692"],"'Redirect' is defined but never used.","'BiBody' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'ROUTES' is defined but never used.","'datarget' is assigned a value but never used.","'setdaTarget' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.osScrollBar'. Either include it or remove the dependency array.",["693"],["689"],["690"],"'VscClose' is defined but never used.","React Hook useEffect has a missing dependency: 'getTotal'. Either include it or remove the dependency array.",["694"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setOrder' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getImgSrcFromType'. Either include it or remove the dependency array.",["695"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'currentOption', 'getOptionItems', 'optionItems', and 'subpath'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentOption' needs the current value of 'optionItems'.",["696"],"React Hook useEffect has a missing dependency: 'currentOption'. Either include it or remove the dependency array.",["697"],"'setState' is assigned a value but never used.","'promise' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlePreProcessingCardListToComponent'. Either include it or remove the dependency array.",["698"],"React Hook useEffect has missing dependencies: 'db' and 'props.accountID'. Either include them or remove the dependency array.",["699"],["700"],"no-dupe-keys","Duplicate key 'id'.","ObjectExpression",["701"],["702"],["703"],"React Hook useEffect has a missing dependency: 'filterOrdersByEra'. Either include it or remove the dependency array.",["704"],"'Link' is defined but never used.","'updatePasswordToTestUser' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'getPasswordFromUser' and 'user'. Either include them or remove the dependency array.",["705"],"'useImperativeHandle' is defined but never used.","'gcards' is assigned a value but never used.","'setGcards' is assigned a value but never used.","'setShipping' is assigned a value but never used.","'total' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'card' and 'props.account'. Either include them or remove the dependency array.",["706"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["707"],"React Hook useEffect has a missing dependency: 'props.types'. Either include it or remove the dependency array. If 'setTypes' needs the current value of 'props.types', you can also switch to useReducer instead of useState and read 'props.types' in the reducer.",["708"],"'AiTwotoneStar' is defined but never used.","'Fragment' is defined but never used.","'setImgSrc' is assigned a value but never used.","'setImgName' is assigned a value but never used.","'setid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'showModal'. Either include it or remove the dependency array.",["709"],["689"],["690"],"React Hook useEffect has a missing dependency: 'props.list'. Either include it or remove the dependency array. If 'setList' needs the current value of 'props.list', you can also switch to useReducer instead of useState and read 'props.list' in the reducer.",["710"],["711"],"React Hook useEffect has missing dependencies: 'currentShipping' and 'setShippingIfUserPresents'. Either include them or remove the dependency array.",["712"],"React Hook useEffect has missing dependencies: 'fetchDataFromFireStore', 'props.account', 'props.curShipping', and 'setShippingIfUserPresents'. Either include them or remove the dependency array. If 'setCurrentShipping' needs the current value of 'props.curShipping', you can also switch to useReducer instead of useState and read 'props.curShipping' in the reducer.",["713"],"'INITIALCARDFORM' is assigned a value but never used.","'setUserGcards' is assigned a value but never used.","'setTax' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getSum', 'props.list', and 'props.osRef'. Either include them or remove the dependency array. If 'setList' needs the current value of 'props.list', you can also switch to useReducer instead of useState and read 'props.list' in the reducer.",["714"],"React Hook useEffect has a missing dependency: 'getSum'. Either include it or remove the dependency array.",["715"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'setItemPerPage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getItemsForPage' and 'getTotalPageNumbers'. Either include them or remove the dependency array.",["716"],"React Hook useEffect has missing dependencies: 'getItemsForPage', 'getTotalPageNumbers', and 'props'. Either include them or remove the dependency array.",["717"],"React Hook useEffect has missing dependencies: 'getItemsForPage' and 'itemPerPage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurList' needs the current value of 'itemPerPage'.",["718"],"'setIdChosenDiv' is assigned a value but never used.","'setIdChangeDiv' is assigned a value but never used.","'checkPropTypes' is defined but never used.","'lastPage' is assigned a value but never used.","'setLastPage' is assigned a value but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'generatePageNo'. Either include it or remove the dependency array.",["719"],["720"],"'RiShoppingBag2Fill' is defined but never used.","React Hook useEffect has a missing dependency: 'SERVICESICONS'. Either include it or remove the dependency array.",["721"],"'useState' is defined but never used.","'preparedList' is defined but never used.","React Hook useEffect has a missing dependency: 'retrieveDocumentsFromFireStore'. Either include it or remove the dependency array.",["722"],"React Hook useEffect has a missing dependency: 'proccessedList.length'. Either include it or remove the dependency array.",["723"],"React Hook useEffect has missing dependencies: 'db', 'section', and 'sub'. Either include them or remove the dependency array.",["724"],"'id' is assigned a value but never used.","'currentTime' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchItems'. Either include it or remove the dependency array.",["725"],"React Hook useEffect has a missing dependency: 'prepareComponents'. Either include it or remove the dependency array.",["726"],"React Hook useEffect has a missing dependency: 'fetchListFromDb'. Either include it or remove the dependency array.",["727"],"React Hook useEffect has missing dependencies: 'makeComponentFromList' and 'preparedComponent.length'. Either include them or remove the dependency array.",["728"],"React Hook useEffect has a missing dependency: 'props.card'. Either include it or remove the dependency array.",["729"],"'LinkCards' is defined but never used.","'otherInfo' is assigned a value but never used.","'handleMatchingPassword' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleEditableSwapOfField' and 'handleSetcurrentAddress'. Either include them or remove the dependency array.",["730"],"React Hook useEffect has missing dependencies: 'props' and 'setCurrentPanel'. Either include them or remove the dependency array. Mutable values like 'props.current' aren't valid dependencies because mutating them doesn't re-render the component.",["731"],["732"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. Mutable values like 'props.current' aren't valid dependencies because mutating them doesn't re-render the component.",["733"],"'setID' is assigned a value but never used.","'selected' is assigned a value but never used.","'setDesiredField' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.list' and 'props.selected'. Either include them or remove the dependency array. If 'setList' needs the current value of 'props.list', you can also switch to useReducer instead of useState and read 'props.list' in the reducer.",["734"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation",{"desc":"735","fix":"736"},{"desc":"737","fix":"738"},{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"747","fix":"748"},{"desc":"749","fix":"750"},{"desc":"751","fix":"752"},{"desc":"753","fix":"754"},{"desc":"749","fix":"755"},{"desc":"751","fix":"756"},{"desc":"753","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},{"desc":"796","fix":"797"},{"desc":"798","fix":"799"},{"desc":"800","fix":"801"},{"desc":"802","fix":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},{"desc":"770","fix":"814"},{"desc":"815","fix":"816"},{"desc":"817","fix":"818"},"Update the dependencies array to be: [db, location.pathname, thisref, user]",{"range":"819","text":"820"},"Update the dependencies array to be: [db, user]",{"range":"821","text":"822"},"Update the dependencies array to be: [props.osScrollBar]",{"range":"823","text":"824"},"Update the dependencies array to be: [getTotal, list]",{"range":"825","text":"826"},"Update the dependencies array to be: [curType, getImgSrcFromType]",{"range":"827","text":"828"},"Update the dependencies array to be: [currentOption, getOptionItems, optionItems, subpath]",{"range":"829","text":"830"},"Update the dependencies array to be: [currentOption, subpath]",{"range":"831","text":"832"},"Update the dependencies array to be: [handlePreProcessingCardListToComponent]",{"range":"833","text":"834"},"Update the dependencies array to be: [confirmedAddedCard, db, props.accountID]",{"range":"835","text":"836"},"Update the dependencies array to be: [handlePreProcessingCardListToComponent, props.list]",{"range":"837","text":"838"},{"range":"839","text":"834"},{"range":"840","text":"836"},{"range":"841","text":"838"},"Update the dependencies array to be: [filterOrdersByEra]",{"range":"842","text":"843"},"Update the dependencies array to be: [getPasswordFromUser, user, userFound]",{"range":"844","text":"845"},"Update the dependencies array to be: [card, props.account]",{"range":"846","text":"847"},"Update the dependencies array to be: [card, props]",{"range":"848","text":"849"},"Update the dependencies array to be: [props.types]",{"range":"850","text":"851"},"Update the dependencies array to be: [props.hide, showModal]",{"range":"852","text":"853"},"Update the dependencies array to be: [props.list]",{"range":"854","text":"855"},"Update the dependencies array to be: [currentShipping, props]",{"range":"856","text":"857"},"Update the dependencies array to be: [currentShipping, props.account, setShippingIfUserPresents]",{"range":"858","text":"859"},"Update the dependencies array to be: [fetchDataFromFireStore, props.account, props.curShipping, setShippingIfUserPresents]",{"range":"860","text":"861"},"Update the dependencies array to be: [getSum, props.list, props.osRef]",{"range":"862","text":"863"},"Update the dependencies array to be: [getSum, props.list]",{"range":"864","text":"865"},"Update the dependencies array to be: [getItemsForPage, getTotalPageNumbers]",{"range":"866","text":"867"},"Update the dependencies array to be: [getItemsForPage, getTotalPageNumbers, props, props.dalist]",{"range":"868","text":"869"},"Update the dependencies array to be: [curPage, getItemsForPage, itemPerPage]",{"range":"870","text":"871"},"Update the dependencies array to be: [generatePageNo, props.cur]",{"range":"872","text":"873"},"Update the dependencies array to be: [generatePageNo, props.pageNo]",{"range":"874","text":"875"},"Update the dependencies array to be: [SERVICESICONS]",{"range":"876","text":"877"},"Update the dependencies array to be: [retrieveDocumentsFromFireStore]",{"range":"878","text":"879"},"Update the dependencies array to be: [list, proccessedList.length]",{"range":"880","text":"881"},"Update the dependencies array to be: [db, proccessedList, props.match.params, section, sub]",{"range":"882","text":"883"},"Update the dependencies array to be: [fetchItems]",{"range":"884","text":"885"},"Update the dependencies array to be: [list, prepareComponents]",{"range":"886","text":"887"},"Update the dependencies array to be: [fetchListFromDb]",{"range":"888","text":"889"},"Update the dependencies array to be: [list, makeComponentFromList, preparedComponent.length]",{"range":"890","text":"891"},"Update the dependencies array to be: [props.card]",{"range":"892","text":"893"},"Update the dependencies array to be: [handleEditableSwapOfField, handleSetcurrentAddress]",{"range":"894","text":"895"},"Update the dependencies array to be: [props, setCurrentPanel]",{"range":"896","text":"897"},{"range":"898","text":"855"},"Update the dependencies array to be: [props]",{"range":"899","text":"900"},"Update the dependencies array to be: [props.list, props.selected]",{"range":"901","text":"902"},[9733,9735],"[db, location.pathname, thisref, user]",[10842,10848],"[db, user]",[1209,1211],"[props.osScrollBar]",[3381,3387],"[getTotal, list]",[1679,1688],"[curType, getImgSrcFromType]",[1178,1180],"[currentOption, getOptionItems, optionItems, subpath]",[1308,1317],"[currentOption, subpath]",[9597,9599],"[handlePreProcessingCardListToComponent]",[9994,10014],"[confirmedAddedCard, db, props.accountID]",[10162,10174],"[handlePreProcessingCardListToComponent, props.list]",[8878,8880],[9275,9295],[9442,9454],[1178,1180],"[filterOrdersByEra]",[3269,3280],"[getPasswordFromUser, user, userFound]",[4056,4058],"[card, props.account]",[4126,4132],"[card, props]",[313,315],"[props.types]",[1109,1121],"[props.hide, showModal]",[224,226],"[props.list]",[4492,4509],"[currentShipping, props]",[4806,4821],"[currentShipping, props.account, setShippingIfUserPresents]",[5639,5641],"[fetchDataFromFireStore, props.account, props.curShipping, setShippingIfUserPresents]",[1738,1740],"[getSum, props.list, props.osRef]",[1839,1851],"[getSum, props.list]",[1837,1839],"[getItemsForPage, getTotalPageNumbers]",[2131,2145],"[getItemsForPage, getTotalPageNumbers, props, props.dalist]",[2247,2256],"[curPage, getItemsForPage, itemPerPage]",[1067,1078],"[generatePageNo, props.cur]",[1151,1165],"[generatePageNo, props.pageNo]",[1782,1784],"[SERVICESICONS]",[1806,1808],"[retrieveDocumentsFromFireStore]",[1929,1935],"[list, proccessedList.length]",[2312,2347],"[db, proccessedList, props.match.params, section, sub]",[1762,1764],"[fetchItems]",[1824,1830],"[list, prepareComponents]",[1416,1418],"[fetchListFromDb]",[1567,1573],"[list, makeComponentFromList, preparedComponent.length]",[284,286],"[props.card]",[17884,17886],"[handleEditableSwapOfField, handleSetcurrentAddress]",[18019,18034],"[props, setCurrentPanel]",[284,286],[354,369],"[props]",[1913,1915],"[props.list, props.selected]"]